let nb_instants = ref (-1)

(* simulation space *)
let max_x = ref 1000.
let max_y = ref 1000.

let area_size_x = ref 80.
let area_size_y = ref 80.

(* nodes *)
let nb_nodes = ref 500
let coverage_range = ref 80.

let speed = ref 1. (* m/s *)
let speed_min = ref 1.3889
let speed_max = ref 5.5556
let pause_min = ref 0
let pause_max = ref 10


(* packets *)
let elip_proba = ref 100.0
let elip_forecast = ref 0
let elip_min_insert_dist = ref 1.
let elip_min_insert_angle = ref 90.0

let msg_proba = ref 50.0
let msg_len = ref 1

(* overhead *)
let search_overhead = ref 1

(* outputs *)
let with_graphics = ref true
let zoom = ref 1.

let prefix = ref "simul"
let with_stat = ref false

(* Set functions *)
let option_set r v = r := Some v

let set_option r v_opt =
  match v_opt with
  | None -> ()
  | Some v -> r := v


let set_size t =
  set_option max_x t;
  set_option max_y t

let set_prefix s =
	match s with
	| Some pref ->
        with_stat := true;
        prefix := pref
	| None -> ()

let set_density d =
  let surface = (!max_x *. !max_y) in
  let range =
      (sqrt(d *. surface /. (3.14 *. float_of_int(!nb_nodes))))
  in
  coverage_range := range

let set_with_graphics r v_opt =
  match v_opt with
  | None -> ()
  | Some v -> r := not v


let set_area t_opt =
  match t_opt with
  | None ->
      area_size_x := 2. *. !coverage_range;
      area_size_y := 2. *. !coverage_range
  | Some t ->
      area_size_x := t;
      area_size_y := t

let set_speed s delta =
	let av_speed = (!speed_max +. !speed_min) /. 2. in
	let delta =
		begin match delta with
		| None -> (!speed_max -. !speed_min) /. 2.
		| Some d -> d
		end
	in
	begin match s with
	| None ->
		speed := av_speed;
		speed_min := av_speed -. delta;
		speed_max := av_speed +. delta
	| Some s ->
		speed := s;
		speed_min := s -. delta;
		speed_max := s +. delta
	end

let set_pause p delta =
	let av_pause = (!pause_max + !pause_min) / 2 in
	let delta =
		begin match delta with
		| None -> (!pause_max - !pause_min) / 2
		| Some d -> d
		end
	in
	begin match p with
	| None ->
		pause_min := av_pause - delta;
		pause_max := av_pause + delta
	| Some p ->
		pause_min := p - delta;
		pause_max := p + delta
	end


(* Configuration function *)
let configure () =
  let doc_N = "<nb> nombre d'instant de smulation"
  and doc_D = "<density> densité par zone de couverture"
  and doc_n = "<nb> nombre de noeuds dans la topologie"
  and doc_t = "<longueur> longueur d'un cote"
  and doc_range = "<r> rayon de couverture"
  and doc_area = "<longueur> longueur d'un cote d'une area"
  and doc_o =
    "<pref> calcul des stats (<pref> est le préfixe des fichiers de sortie)"
  and doc_msg_proba = "<p> probabilité d'émission d'un message"
  and doc_msg_len = "<n> longueur max d'un message"
  and doc_elip_proba = "<f> probabilité d'insertion d'une info de elip"
  and doc_elip_min_insert_dist = "<n> distance minimale d'insertion d'une info de
	elip en nb de rayons de couverture"
  and doc_elip_min_insert_angle = "<n> angle minimal d'insertion d'une info de elip"
  and doc_nox = " sans mode graphique"
  and doc_node = "<n> numero du noeud observé"
  and doc_seed = "<n> initialisation du random"
  and doc_zoom = "<f> zoom lors de l'affichage"
  and doc_speed = "<f> vitesse rwp"
  and doc_delta_speed = "<f> différence vitesse rwp"
  and doc_pause = "<n> pause rwp"
  and doc_delta_pause = "<n> différence pause rwp"
  and errmsg = "Options are:"
  in
  let var_N = ref None
  and var_D = ref None
  and var_n = ref None
  and var_t = ref None
  and var_range = ref None
  and var_area = ref None
  and var_o = ref None
  and var_msg_proba = ref None
  and var_msg_len = ref None
  and var_elip_proba = ref None
  and var_elip_min_insert_dist = ref None
  and var_elip_min_insert_angle = ref None
  and var_node = ref None
  and var_seed = ref None
  and var_zoom = ref None
  and var_speed = ref None
  and var_delta_speed = ref None
  and var_pause = ref None
  and var_delta_pause = ref None
  in
  Arg.parse
    [ ("-N", Arg.Int (option_set var_N), doc_N);
      ("-n", Arg.Int (option_set var_n), doc_n);
      ("-t", Arg.Float (option_set var_t), doc_t);
      ("-range", Arg.Float (option_set var_range), doc_range);
      ("-D", Arg.Float (option_set var_D), doc_D);
      ("-area", Arg.Float (option_set var_area), doc_area);
      ("-msg_proba", Arg.Float (option_set var_msg_proba), doc_msg_proba);
      ("-msg_len", Arg.Int (option_set var_msg_len), doc_msg_len);
      ("-elip_proba", Arg.Float (option_set var_elip_proba), doc_elip_proba);
      ("-elip_min_insert_dist", Arg.Float (option_set var_elip_min_insert_dist), doc_elip_min_insert_dist);
      ("-elip_min_insert_angle", Arg.Float (option_set var_elip_min_insert_angle), doc_elip_min_insert_angle);
      ("-o", Arg.String (option_set var_o), doc_o);
      ("-nox", Arg.Clear with_graphics, doc_nox);
      ("-node", Arg.Int (option_set var_node), doc_node);
      ("-seed", Arg.Int (option_set var_seed), doc_seed);
      ("-z", Arg.Float (option_set var_zoom), doc_zoom);
      ("-speed", Arg.Float (option_set var_speed), doc_speed);
      ("-pause", Arg.Int (option_set var_pause), doc_pause);
      ("-delta_speed", Arg.Float (option_set var_delta_speed), doc_delta_speed);
      ("-delta_pause", Arg.Int (option_set var_delta_pause), doc_delta_pause);
    ]
    (fun s -> raise (Invalid_argument s))
    errmsg;

  if (!var_D <> None) && (!var_range <> None) then
    failwith "-D and -range are not compatible";
  set_option nb_instants !var_N;
  set_option nb_nodes !var_n;
  set_size !var_t;
  set_option coverage_range !var_range;
  begin match !var_D with
  | None -> ()
  | Some d -> set_density d
  end;
  set_area !var_area;
  set_option elip_proba !var_elip_proba;
  set_prefix !var_o;
  set_option msg_proba !var_msg_proba;
  set_option msg_len !var_msg_len;
  set_option elip_min_insert_dist !var_elip_min_insert_dist;
  set_option elip_min_insert_angle !var_elip_min_insert_angle;
  set_option zoom !var_zoom;
  set_speed !var_speed !var_delta_speed;
  set_pause !var_pause !var_delta_pause;
  begin match !var_seed with
  | None -> Random.self_init()
  | Some seed -> Random.init seed
  end


