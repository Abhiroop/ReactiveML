let rec process integers n s_out =
  emit s_out n;
  pause;
  run (integers (n+1) s_out)

let process filter prime s_in s_out =
  loop
    await s_in(n) in
    if (n mod prime) != 0 then emit s_out n
  end


let rec process shift s_in s_out =
  await s_in(prime) in
  emit s_out prime; (* emit a discovered prime *)
  signal s default 0 gather (+) in
  run (filter prime s_in s)
  ||
  run (shift s s_out)

let process output s_in =
  loop
    await s_in (primes) in
    List.iter
      (fun n ->
	print_int n;
	print_string " ";
	flush stdout)
      primes
  end

let process main =
  signal nat default 0 gather (+) in
  signal primes default [] gather fun x y -> x::y in
  run (integers 2 nat)
  ||
  run (shift nat primes)
  ||
  run (output primes)

let () = run main
