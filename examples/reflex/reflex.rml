(****************************************************************)
(* Game Controller                                              *)
(****************************************************************)

let pause_length = 50
let measure_number = 3

let process average update_average average_value =
  let measure_number = ref 0 in
  let total_time = ref 0 in
  loop
    await update_average(n) in
    total_time := !total_time + n;
    incr measure_number;
    emit average_value (!total_time / !measure_number)
  end


let process measure ready stop
    ring_bell go_on go_off error display update_average =
  (* step (1)
   * Wait for the [ready] signal.
   * The signal [ring_bell] is emitted if the signal [stop] is
   * emitted during the waiting *)
  do
    loop
      pause;
      await immediate stop;
      emit ring_bell
    end
  until ready done;

  (* step (2)
   * Wait for a random delay, and after the delay switch on
   * the go lamp. If the signal [stop] is emitted the signal
   * [error] is emitted *)
  do
    for i = 0 to Random.int 1000 do
      pause
    done;
    emit go_on
  until stop -> emit error; pause done;

  (* step (3)
   * Wait for the [stop] signal and conting the instants.
   * Then the go lamp is turned off. The bell rings when
   * the button [ready] is hit. *)

  let time = ref 0 in
  do
    loop
      incr time;
      pause
    end
    ||
    loop
      pause;
      await immediate ready;
      emit ring_bell
    end
  until stop ->
    emit display !time;
    emit update_average !time;
    emit go_off
  done

let process game_controller
    coin ready stop
    go_on go_off game_over_on game_over_off red_on red_off display ring_bell
    =
  signal error, end_measure in
  loop
    pause
    ||
    await immediate coin;
    (* game initialization *)
    emit go_off;
    emit red_off;
    emit game_over_off;
    emit display 0;

    do
      do
	signal update_average, average_value default 0 gather (+) in
	run (average update_average average_value)
	||
	for i = 1 to measure_number do
	  run (measure
		 ready stop ring_bell go_on go_off error display update_average)
	done;
	(* normal end: wait a few seconds and display the average time *)
	for i = 1 to pause_length do pause done;
	emit display (last ?average_value);
	emit end_measure
      until error (x) ->
	emit red_on;
	emit go_off
      done
    until
      end_measure
    done;
    emit game_over_on;
  end


(****************************************************************)
(* Game interface                                               *)
(****************************************************************)

let draw_frame (x1, y1, x2, y2) c =
  Graphics.set_color c;
  Graphics.fill_rect x1 y1 (x2-x1) (y2-y1)

(* The mouse *)

let process read_click click =
  signal button_down in
  loop
    if Graphics.button_down() then emit button_down (Graphics.mouse_pos());
    pause
  end
  ||
  loop
    present button_down then
      pause
    else
      await immediate one button_down(pos) in
      emit click (pos);
      pause
  end


(* A button *)

let inside (x,y) (x1, y1, x2, y2) =
  (x1 <= x) && (x <= x2) && (y1 <= y) && (y <= y2)

let process button frame mevent oclick =
  loop
    await immediate one mevent (pos) in
    if inside pos frame then emit oclick;
    pause
  end

(* A lamp *)
let process lamp frame c_on c_off on off =
  loop
    await on;
    draw_frame frame c_on
  end
  ||
  loop
    await off;
    draw_frame frame c_off
  end

(* Bell *)
let process bell ring_bell =
  loop
    await ring_bell;
    print_string "Bip !";
    print_newline()
  end

(* screen *)
let process screen display =
  loop
    await display (s_list) in
    List.iter (fun s -> print_int s; print_newline()) s_list
  end

(* A reflex machine *)

let process game_interface
    go_on go_off game_over_on game_over_off red_on red_off display ring_bell
    coin ready stop
    =
  Graphics.open_graph "";
  let max_x = Graphics.size_x () in
  let max_y = Graphics.size_y () in
  let coin_frame = 0, 0, max_x/3, max_y/3 in
  let red_frame = max_x/3, 0, 2*max_x/3, max_y/3 in
  let game_over_frame = 2*max_x/3, 0, max_x, max_y/3 in
  let ready_frame = 0, max_y/3, max_x/2, 2*max_y/3 in
  let stop_frame = max_x/2, max_y/3, max_x, 2*max_y/3 in
  let go_frame = 0, 2*max_y/3, max_x, max_y in
  draw_frame coin_frame Graphics.yellow;
  draw_frame red_frame Graphics.white;
  draw_frame game_over_frame Graphics.red;
  draw_frame ready_frame Graphics.green;
  draw_frame stop_frame Graphics.red;
  draw_frame go_frame Graphics.red;
  signal click in
  run (button coin_frame click coin)
  ||
  run (lamp red_frame Graphics.red Graphics.white red_on red_off)
  ||
  run (lamp game_over_frame Graphics.red Graphics.green
	 game_over_on game_over_off)
  ||
  run (button ready_frame click ready)
  ||
  run (button stop_frame click stop)
  ||
  run (lamp go_frame Graphics.green Graphics.red go_on go_off)
  ||
  run (read_click click)
  ||
  run (bell ring_bell)
  ||
  run (screen display)


(****************************************************************)
(* Main                                                         *)
(****************************************************************)

let process game =
  signal go_on, go_off,
    game_over_on, game_over_off,
    red_on, red_off,
    display, ring_bell,
    coin, ready, stop
  in
  run
    (game_interface
       go_on go_off game_over_on game_over_off red_on red_off display ring_bell
       coin ready stop )
  ||
  run
    (game_controller
       coin ready stop
       go_on go_off game_over_on game_over_off red_on red_off display ring_bell)

let () = run game
