(************************************************************************)
(*                         ReactiveArt                                  *)
(*                                                                      *)
(*  Inspierd by http://www.rogervilder.com/projets/carre_16.html        *)
(*                                                                      *)
(*  Authors: Guillaume Baudart (guillaume.baudart@ens.fr)               *)
(*           Louis Mandel (louis.mandel@lri.fr)                         *)
(*                                                                      *)
(************************************************************************)

let process sum state delta =
  loop
    emit state (last ?state +. delta);
    pause
  end

let incr_decr state delta =
  let rec process incr =
    do run sum state delta
    until state(x) when x >= 1. -> run decr done
  and process decr =
    do run sum state (-. delta)
    until state(x) when x <= 0. -> run incr done
  in
  incr

let ( *: ) n p = int_of_float ((float n) *. (max 0. (min 1.0 p)))

type dir = Up | Down | Left | Right
type style = Color | Black | Rand

let random_color () =
  match Random.int 4 with
  | 0 -> Graphics.red
  | 1 -> Graphics.blue
  | 2 -> Graphics.yellow
  | 3 -> Graphics.green
  | _ -> Graphics.black

let color_of_style style dir =
  match style with
  | Black -> Graphics.black
  | Color ->
      begin match dir with
      | Up -> Graphics.red
      | Down -> Graphics.blue
      | Right -> Graphics.green
      | Left -> Graphics.yellow
      end
  | Rand -> random_color ()

let process draw style dir x y n state =
  let rec process draw s =
    let c = color_of_style s dir in
    do
      loop
        let k = n *: (last ?state) in
        Graphics.set_color c;
        begin match dir with
        | Up -> Graphics.fill_rect x y n k
        | Down -> Graphics.fill_rect x (y + n - k) n k
        | Left -> Graphics.fill_rect (x + n - k) y k n
        | Right -> Graphics.fill_rect x y k n
        end;
        pause
      end
    until style(s) ->
      run draw s
    done
  in
  run draw (last? style)


let process pump style dir x y n state delta =
  run incr_decr state delta ||
  run draw style dir x y n state

let random_speed n = float (100 + Random.int 100) /. 20000.

let in_cell x' y' x y n =
  (x' >= x) &&
  (y' >= y) &&
  (x' <= x + n) &&
  (y' <= y + n)

let rec process splittable click split pump dir x y n init =
  signal state default 0. gather (+.) in
  do
    emit state init;
    run pump dir x y n state (random_speed n)
  until
  | click (x',y') when (in_cell x' y' x y n) ->
      run cell click split pump x y n (last ?state)
  | split ->
      run cell click split pump x y n (last ?state)
  done

and process cell click split pump x y n init =
  let n_2 = n / 2 in
  run splittable click split pump Left x y n_2 init ||
  run splittable click split pump Down (x + n_2 + 1) y n_2 init ||
  run splittable click split pump Up x (y + n_2 + 1) n_2 init ||
  run splittable click split pump Right (x + n_2 + 1) (y + n_2 + 1) n_2 init

let process mouse_click click =
  signal mouse in
  loop
    if Graphics.button_down() then emit mouse;
    pause
  end
  ||
  loop
    present mouse then
      pause
    else
      begin
        await immediate mouse;
        emit click (Graphics.mouse_pos());
        pause
      end
  end

let rec process resetable p s =
  do
    run p
  until s ->
    run (resetable p s)
  done

let process read_keyboard split style reset quit =
  loop
    pause;
    if Graphics.key_pressed() then
      match Graphics.read_key() with
      | 'r' -> emit reset
      | ' ' | 's' -> emit split
      | 'q' -> emit quit

      | 'c' ->
          let p = last? style in
          let s = match p with
          | Black -> Color
          | Color -> Rand
          | Rand -> Black
          in
          emit style s
      | _ -> ()
  end


let process main =
  let n = 600 in
  let s = string_of_int n in
  signal click default (0,0) gather (fun x y -> x) in
  signal style default Black gather (fun x y -> x) in
  signal split, reset, quit in
  Graphics.open_graph (" "^s^"x"^s);
  Graphics.set_window_title
    "A la Roger Vilder (click, space: split; q: quit, r: reset)";
  Graphics.auto_synchronize false;
  do
    loop
      pause;
      Graphics.synchronize ();
      Graphics.clear_graph ();
    end
    |>
    run read_keyboard split style reset quit ||
    run mouse_click click ||
    run (resetable (splittable click split (pump style) Up 0 0 n 0.0) reset)
  until quit -> exit 0 done

let () = run main
