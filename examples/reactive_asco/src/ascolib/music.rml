(***************************************************************)
(*                        Reactive Asco                        *)
(*             http://reactiveml.org/reactive_asco             *)
(*                                                             *)
(*                                                             *)
(*  Authors: Guillaume Baudart (guillaume.baudart@ens.fr)      *)
(*           Louis Mandel (louis.mandel@lri.fr)                *)
(*                                                             *)
(***************************************************************)

(** Pitch class of a note
    (Af = A flat, As = A sharp).
*)
type pitch_class =
  | A | Af | As
  | B | Bf | Bs
  | C | Cf | Cs
  | D | Df | Ds
  | E | Ef | Es
  | F | Ff | Fs
  | G | Gf | Gs

(** Octave *)
type octave = int
(** Pitch *)
type pitch = pitch_class * octave
(** Duration *)
type dur = float
(** Note*)
type note = dur * pitch

(** Convert a pitch class into an integer. *)
let int_of_pitch_class pc =
  match pc with
  | Cf -> -1
  | C -> 0
  | Cs -> 1
  | Df -> 1
  | D -> 2
  | Ds -> 3
  | Ef -> 3
  | E -> 4
  | Es -> 5
  | Ff -> 4
  | F -> 5
  | Fs -> 6
  | Gf -> 6
  | G -> 7
  | Gs -> 8
  | Af -> 8
  | A -> 9
  | As -> 10
  | Bf -> 10
  | B -> 11
  | Bs -> 12

(** Convert a pitch into an integer (MIDI standart). *)
let int_of_pitch p =
  let (pitch_class, octave) =  p in
  12 * (octave + 1) + (int_of_pitch_class pitch_class)

(** Convert an integer into a pitch (MIDI standart). *)
let pitch_of_int i =
  let octave = (i / 12) - 1 in
  let pitch_class =
    match i mod 12 with
    | 0 -> C
    | 1 -> Cs
    | 2 -> D
    | 3 -> Ds
    | 4 -> E
    | 5 -> F
    | 6 -> Fs
    | 7 -> G
    | 8 -> Gs
    | 9 -> A
    | 10 -> As
    | 11 -> B
    | _ -> assert false
  in
  (pitch_class, octave)

(** Convert a note into a string destined for the MaX/MSP interface of Reactive Asco. *)
let string_of_note note =
  let (d, p) = note in
  let dms = int_of_float (d *. 500.0) in
  let n = int_of_pitch p in
  "mnote "^(string_of_int n)^" 127 "^(string_of_int dms)

(** Transpose a pitch by a given interval in semitones. *)
let move_pitch inter p =
  pitch_of_int ((int_of_pitch p) + inter)

(** Transpose a pitch by a given number of octaves. *)
let move_octave n (pc, o) =
  (pc, o + n)

(** Transpose an entire sequence of note. *)
let transpose inter sequence =
  List.map
    (fun (d, p) -> d, (move_pitch inter p))
    sequence

(** Color of a chord *)
type color = Maj | Min
(** Chord *)
type chord = pitch_class * color

(** Extract the root of a chord. *)
let root_of_chord chord octave =
  let (pitch_class, color) = chord in
  (pitch_class, octave)

(** Turn a sequence of electronic action into a line of notes. *)
let sequence_of_line l =
  let rec aux d l =
    match l with
    | [] -> []
    | [d1,p1] -> [d,p1]
    | (d1,p1)::(d2,p2)::l ->
      (d,p1)::(d1,p2)::(aux d2 l)
  in
  aux 0.0 l
