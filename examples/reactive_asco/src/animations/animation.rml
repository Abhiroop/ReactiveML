(***************************************************************)
(*                        Reactive Asco                        *)
(*             http://reactiveml.org/reactive_asco             *)
(*                                                             *)
(*                                                             *)
(*  Authors: Guillaume Baudart (guillaume.baudart@ens.fr)      *)
(*           Louis Mandel (louis.mandel@lri.fr)                *)
(*                                                             *)
(***************************************************************)

(** {6 Data structures} *)

type vect =
    { x: float;
      y: float; }

type box =
    { left: float;
      right: float;
      top: float;
      bot: float; }

let box =
  { left = 0.; right = 600.;
    bot = 0.; top = 600.; }

type sprite =
    { center : vect;
      shape : shape;
      radius : float;
      color : Graphics.color; }

and shape =
  | Circle | Circle_fill
  | Square | Square_fill
  | Poly | Poly_fill


(** {6 Utility functions} *)

let random_pos () =
  let x = box.left +. Random.float box.right in
  let y = box.bot +. Random.float box.top in
  { x = x; y = y; }

let random_speed k =
  let alpha = Random.float 7. in
  { x = k *. cos alpha; y =  k *. sin alpha; }

let distance2 pos1 pos2 =
  ((pos2.x -. pos1.x) *. (pos2.x -. pos1.x)) +.
    ((pos2.y -. pos1.y) *. (pos2.y -. pos1.y))

let norme v = v.x *. v.x +. v.y *. v.y


(** {6 Graphics} *)

signal active default () gather (fun () () -> ())
signal draw default [] gather (fun x y -> x :: y)
signal click default { x = 0.; y = 0.; } gather (fun x y -> x)
signal key default 'X' gather (fun x y -> x)

let color_of_int n =
  match n mod 12 with
  | 0 -> Graphics.rgb 220 20 60
  | 1 -> Graphics.blue
  | 2 -> Graphics.rgb 34 139 34
  | 3 -> Graphics.red
  | 4 -> Graphics.rgb 150 150 150
  | 5 -> Graphics.black
  | 6 -> Graphics.magenta
  | 7 -> Graphics.rgb 255  89  65
  | 8 -> Graphics.rgb 150   0   0
  | 9 -> Graphics.cyan
  | 10 -> Graphics.yellow
  | 11 -> Graphics.green
  | _ -> assert false


let shape_of_int n =
  match n mod 6 with
  | 0 -> Circle_fill
  | 1 -> Square_fill
  | 2 -> Poly_fill
  | 3 -> Circle
  | 4 -> Square
  | 5 -> Poly
  | _ -> assert false


let draw_sprite s =
  let { x = x; y = y; } = s.center in
  Graphics.set_color s.color;
  begin match s.shape with
  | Circle_fill ->
      let x, y = int_of_float x, int_of_float y in
      Graphics.fill_circle x y (int_of_float s.radius)
  | Circle ->
      let x, y = int_of_float x, int_of_float y in
      Graphics.draw_circle  x y (int_of_float s.radius)
  | Square_fill ->
      let x, y = int_of_float (x -. s.radius), int_of_float (y -. s.radius) in
      let len = int_of_float (s.radius *. 2.) in
      Graphics.fill_rect x y len len
  | Square ->
      let x, y = int_of_float (x -. s.radius), int_of_float (y -. s.radius) in
      let len = int_of_float (s.radius *. 2.) in
      Graphics.draw_rect x y len len
  | Poly ->
      let x, y = int_of_float (x -. s.radius), int_of_float (y -. s.radius) in
      let len = int_of_float (s.radius *. 2.) in
      Graphics.draw_poly_line
        [| (x, y); (x+len, y); (x, y+len); (x, y); |]
  | Poly_fill ->
      let x, y = int_of_float (x -. s.radius), int_of_float (y -. s.radius) in
      let len = int_of_float (s.radius *. 2.) in
      Graphics.fill_poly
        [| (x, y); (x+len, y); (x, y+len); (x, y); |]
  end

let get_mouse_pos status =
  { x = float_of_int (status.Graphics.mouse_x) ;
    y = float_of_int (status.Graphics.mouse_y) ; }

let process read_inputs mouse_click key =
  let click = ref false in
  let pre_click =  ref false in
  loop
    pause;
    let status = Graphics.wait_next_event [Graphics.Poll] in
    if Graphics.key_pressed() then
      begin match Graphics.read_key() with
      | 'q' -> exit 0
      | k -> emit key k
      end;
    begin
      click := Graphics.button_down();
      if !click && not !pre_click then emit mouse_click (get_mouse_pos status);
      pre_click := !click;
    end
  end

let process window =
  let g =
    " " ^
    (string_of_int (int_of_float (box.right -. box.left))) ^
    "x" ^
    (string_of_int (int_of_float (box.top -. box.bot)))
  in
  Graphics.set_window_title "ReactiveAsco";
  signal not_draw in
  loop
    await immediate draw;
    Graphics.open_graph g;
    do
      Graphics.auto_synchronize false;
      loop
        Graphics.synchronize ();
        await draw (all) in
        Graphics.clear_graph();
        List.iter draw_sprite all
      end
      ||
      run (read_inputs click key)
      ||
      loop
        present active then pause else emit not_draw
      end
      ||
      loop
        present draw then (emit active; pause);
      end
    until not_draw ->
      Graphics.close_graph ()
    done
  end
