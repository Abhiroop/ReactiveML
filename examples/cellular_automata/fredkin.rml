(********************************************************************)
(* Constantes                                                       *)
(********************************************************************)
let maxx = ref 400
let maxy = ref 400

(********************************************************************)
(* Status                                                       *)
(********************************************************************)

type status =
  | Status_Quiescent
  | Status_Active



(**************************************************************************)
(* cell                                                                   *)
(**************************************************************************)

type cell =
    { cell_x: int;
      cell_y: int;
      cell_activation: (unit, int) event;
      mutable cell_status: status;
      mutable cell_neighborhood: (unit , int) event list;
    }



let new_cell x y activation status =
  { cell_x = x;
    cell_y = y;
    cell_activation = activation;
    cell_status = status;
    cell_neighborhood = [];
  }

let nox = ref false
let zoom = ref 2

let no_draw c = ()

let draw_cell_gen color_of_cell c =
  Graphics.set_color (color_of_cell c);
  Graphics.fill_rect (c.cell_x * !zoom) (c.cell_y * !zoom) !zoom !zoom

let color_of_status s =
  match s.cell_status with
  | Status_Quiescent -> Graphics.red
  | Status_Active -> Graphics.blue


(**************************************************************************)
(* neighborhood functions                                                 *)
(**************************************************************************)
let get_von_neumann_neighbors cell cell_array =
  let x = cell.cell_x in
  let y = cell.cell_y in
  let neighbors = ref [] in
  if 0 <= x-1 then neighbors :=  cell_array.(x-1).(y) :: !neighbors;
  if x+1 < !maxx then neighbors := (cell_array.(x+1).(y)) :: !neighbors;
  if 0 <= y-1 then neighbors := (cell_array.(x).(y-1)) :: !neighbors;
  if y+1 < !maxy then neighbors := (cell_array.(x).(y+1)) :: !neighbors;
  !neighbors

let get_von_neumann_neighbors_circular cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x + maxx in
  let y = cell.cell_y + maxy in
  let neighbors = ref [] in
  neighbors := (cell_array.((x-1) mod maxx).(y)) :: !neighbors;
  neighbors := (cell_array.((x+1) mod maxx).(y)) :: !neighbors;
  neighbors := (cell_array.(x).((y-1) mod maxy)) :: !neighbors;
  neighbors := (cell_array.(x).((y+1) mod maxy)) :: !neighbors;
  !neighbors

let get_moore_neighbors cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x in
  let y = cell.cell_y in
  let neighbors = ref [] in
  if 0 <= x-1 && y+1 < maxy then
    neighbors := (cell_array.(x-1).(y+1)) :: !neighbors;
  if y+1 < maxy then
    neighbors := (cell_array.(x).(y+1)) :: !neighbors;
  if x+1 < maxx && y+1 < maxy then
    neighbors := (cell_array.(x+1).(y+1)) :: !neighbors;
  if x+1 < maxx then
    neighbors := (cell_array.(x+1).(y)) :: !neighbors;
  if x+1 < maxx && 0 <= y-1 then
    neighbors := (cell_array.(x+1).(y-1)) :: !neighbors;
  if 0 <= y-1 then
    neighbors := (cell_array.(x).(y-1)) :: !neighbors;
  if 0 <= x-1 && 0 <= y-1 then
    neighbors := (cell_array.(x-1).(y-1)) :: !neighbors;
  if 0 <= x-1 then
    neighbors := (cell_array.(x-1).(y)) :: !neighbors;
  !neighbors

let get_moore_neighbors_circular cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x + maxx in
  let y = cell.cell_y + maxy in
  let neighbors = ref [] in
  neighbors :=
    (cell_array.((x-1) mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.(x mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.((x+1) mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.((x+1) mod maxx).(y mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.((x+1) mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.(x mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.((x-1) mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (cell_array.((x-1) mod maxx).(y mod maxy)) :: !neighbors;
  !neighbors



(**************************************************************************)
(* cell process                                                           *)
(**************************************************************************)

let rec activate_neighborhood self neighbors =
  match neighbors with
  | [] -> ()
  | activation_sig :: neighbors ->
      emit activation_sig;
      activate_neighborhood self neighbors

let process cell draw_cell get_neighbors cell_behavior
    x y status_init cell_array =
  signal activation default 0 gather fun x y -> y + 1 in
  let self = new_cell x y activation status_init in
  cell_array.(x).(y) <- activation;
  draw_cell self;
  pause;
  self.cell_neighborhood <- get_neighbors self cell_array;
  loop
    if self.cell_status <> Status_Quiescent
    then activate_neighborhood self self.cell_neighborhood
    else await immediate activation;
    pause;
    let cpt = pre ?activation in
    cell_behavior self cpt;
    draw_cell self
  end


(**************************************************************************)
(* cell behaviors                                                         *)
(**************************************************************************)

let fredkin cell cpt =
  cell.cell_status <-
    if (cpt mod 2) = 1 then Status_Active else Status_Quiescent

let game_of_life cell cpt =
  cell.cell_status <-
    if cell.cell_status = Status_Quiescent && cpt = 3
    then Status_Active
    else
      if cell.cell_status <> Status_Quiescent && cpt <> 2 && cpt <> 3
      then Status_Quiescent
      else cell.cell_status



(**************************************************************************)
(* cellular automaton                                                     *)
(**************************************************************************)
let cell_array_create tmp =
  Array.make_matrix !maxx !maxy tmp

let get_status_empty i j = Status_Quiescent

let get_status_center i j =
  if i = !maxx/2 && j = !maxy/2
  then Status_Active
  else Status_Quiescent

let get_status_center_line i j =
  if i = !maxx/2
  then Status_Active
  else Status_Quiescent

let get_status_center_line_wall i j =
  if i = 0 or i = !maxx/2 or i = (!maxx-1) or j = 0 or j = (!maxy-1)
  then Status_Active
  else Status_Quiescent


let process cellular_automaton_start
    draw_cell get_neighbors get_status cell_behavior cell_array =
  for i = 0 to !maxx - 1 dopar
    for j = 0 to !maxy - 1 dopar
      run (cell draw_cell get_neighbors cell_behavior
	     i j (get_status i j) cell_array)
    done
  done


(**************************************************************************)
(* main                                                                   *)
(**************************************************************************)

let behavior = ref "fredkin"

let configure () =
  let doc_zoom = "<n> set the size of a cell"
  and doc_width = "<n> set the number of cells in the width"
  and doc_height = "<n> set the number of cells in the height"
  and doc_behavior = "<s> select the behavior of the automaton"
  and doc_nox = "disable graphical output"
  and errmsg = "Options are:"
  in
  Arg.parse
    [ ("-zoom", Arg.Set_int zoom, doc_zoom);
      ("-width", Arg.Set_int maxx, doc_width);
      ("-w", Arg.Set_int maxx, doc_width);
      ("-height", Arg.Set_int maxy, doc_height);
      ("-h", Arg.Set_int maxy, doc_height);
      ("-b", Arg.Set_string behavior, doc_behavior);
      ("-nox", Arg.Set nox, doc_nox);
    ]
    (fun s -> raise (Invalid_argument s))
    errmsg

let process main =
  Random.self_init();
  configure();
  if !nox then ()
  else
    begin
      Graphics.open_graph (" "^(string_of_int (!maxx * !zoom))^"x"^
			       (string_of_int (!maxy * !zoom)));
      Graphics.auto_synchronize false
    end;
  signal tmp default 0 gather fun x y -> y + 1 in
  begin
    begin match !behavior with
    | "gol" ->
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_moore_neighbors_circular
	       get_status_center_line_wall
	       game_of_life
	       cell_array);
    | "fredkin" ->
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_moore_neighbors_circular
	       get_status_center
	       fredkin
	       cell_array);
    | "fredkin2" ->
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_von_neumann_neighbors
	       get_status_center
	       fredkin
	       cell_array);
    | s -> raise (Invalid_argument s)
    end
    ||
    if !nox then ()
    else
      loop
	Graphics.synchronize ();
	pause;
      end
  end

let () = run main
