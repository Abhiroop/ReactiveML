(********************************************************************)
(* Status                                                       *)
(********************************************************************)

type status =
  | Status_Quiescent
  | Status_Wall
  | Status_Active

(*
type state =
  | State_Basic
  | State_Collide
  | State_Barrier
  | State_Grow_gene
  | State_Ckl_gene
  | State_Invclk_gene
  | State_Translator
  | State_Sprout
  | State_Pre_waiter
  | State_Waiter
  | State_Stop
  | State_Erase
*)

type fire_state =
  | Fire_empty
  | Fire_ash
  | Fire_fire
  | Fire_tree

(********************************************************************)
(* Direction                                                        *)
(********************************************************************)
type dir =
  | Up
  | Down
  | Left
  | Right
  | Up_Left
  | Up_Right
  | Down_Left
  | Down_Right

let opposite dir =
  match dir with
  | Up -> Down
  | Down -> Up
  | Left -> Right
  | Right -> Left
  | Up_Left -> Down_Right
  | Up_Right -> Down_Left
  | Down_Left -> Up_Right
  | Down_Right -> Up_Left

(********************************************************************)
(* Info                                                             *)
(********************************************************************)

type 'a info =
    { origine: dir;
      status: status;
      info: 'a;
    }
(*
      state: state_t;
      fired: int;
      new_status: status_t;
      new_state: state_t; }
*)

(**************************************************************************)
(* neighborhood                                                           *)
(**************************************************************************)

type 'a neighborhood = 'a info list

(********************************************************************)
(* Constantes                                                       *)
(********************************************************************)
let maxx = ref 400
let maxy = ref 400

let nox = ref false
let zoom = ref 2


(**************************************************************************)
(* cell                                                                   *)
(**************************************************************************)

type ('a, 'b) cell =
    { cell_x: int;
      cell_y: int;
      cell_activation: ('a info, 'a info list) event;
      mutable cell_status: status;
      mutable cell_neighborhood: (dir * ('a info , 'a info list) event) list;
      mutable cell_ext: 'b;
    }
(*
      mutable cell_state: state_t;
      mutable cell_fired: int;
*)

let make_info origine cell =
  { origine = origine;
    status = cell.cell_status;
    info = cell.cell_ext;
  }

(*
    state = state;
    fired = 0;
    new_status = Status_None;
    new_state = State_Basic; }
*)


let new_cell x y activation status ext =
  { cell_x = x;
    cell_y = y;
    cell_activation = activation;
    cell_status = status;
    cell_neighborhood = [];
    cell_ext = ext;
  }


let no_draw c = ()

let draw_cell_gen color_of_cell c =
  Graphics.set_color (color_of_cell c);
  Graphics.fill_rect (c.cell_x * !zoom) (c.cell_y * !zoom) !zoom !zoom

let color_of_status s =
  match s.cell_status with
  | Status_Quiescent -> Graphics.red
  | Status_Wall -> Graphics.green
  | Status_Active -> Graphics.blue

let color_of_fire_state c =
  match c.cell_ext with
  | Fire_empty -> Graphics.rgb  255 255 255
  | Fire_ash -> Graphics.rgb 173 173 173
  | Fire_fire -> Graphics.rgb 255 0 0
  | Fire_tree -> Graphics.rgb 0 255 0



(**************************************************************************)
(* neighborhood functions                                                 *)
(**************************************************************************)
let get_von_neumann_neighbors cell cell_array =
  let x = cell.cell_x in
  let y = cell.cell_y in
  let neighbors = ref [] in
  if 0 <= x-1 then neighbors := (Left, cell_array.(x-1).(y)) :: !neighbors;
  if x+1 < !maxx then neighbors := (Right, cell_array.(x+1).(y)) :: !neighbors;
  if 0 <= y-1 then neighbors := (Down, cell_array.(x).(y-1)) :: !neighbors;
  if y+1 < !maxy then neighbors := (Up, cell_array.(x).(y+1)) :: !neighbors;
  !neighbors

let get_von_neumann_neighbors_circular cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x + maxx in
  let y = cell.cell_y + maxy in
  let neighbors = ref [] in
  neighbors := (Left, cell_array.((x-1) mod maxx).(y)) :: !neighbors;
  neighbors := (Right, cell_array.((x+1) mod maxx).(y)) :: !neighbors;
  neighbors := (Down, cell_array.(x).((y-1) mod maxy)) :: !neighbors;
  neighbors := (Up, cell_array.(x).((y+1) mod maxy)) :: !neighbors;
  !neighbors

let get_moore_neighbors cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x in
  let y = cell.cell_y in
  let neighbors = ref [] in
  if 0 <= x-1 && y+1 < maxy then
    neighbors := (Up_Left, cell_array.(x-1).(y+1)) :: !neighbors;
  if y+1 < maxy then
    neighbors := (Up, cell_array.(x).(y+1)) :: !neighbors;
  if x+1 < maxx && y+1 < maxy then
    neighbors := (Up_Right, cell_array.(x+1).(y+1)) :: !neighbors;
  if x+1 < maxx then
    neighbors := (Right, cell_array.(x+1).(y)) :: !neighbors;
  if x+1 < maxx && 0 <= y-1 then
    neighbors := (Down_Right, cell_array.(x+1).(y-1)) :: !neighbors;
  if 0 <= y-1 then
    neighbors := (Down, cell_array.(x).(y-1)) :: !neighbors;
  if 0 <= x-1 && 0 <= y-1 then
    neighbors := (Down_Left, cell_array.(x-1).(y-1)) :: !neighbors;
  if 0 <= x-1 then
    neighbors := (Left, cell_array.(x-1).(y)) :: !neighbors;
  !neighbors

let get_moore_neighbors_circular cell cell_array =
  let maxx = !maxx in
  let maxy = !maxy in
  let x = cell.cell_x + maxx in
  let y = cell.cell_y + maxy in
  let neighbors = ref [] in
  neighbors :=
    (Up_Left, cell_array.((x-1) mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (Up, cell_array.(x mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (Up_Right, cell_array.((x+1) mod maxx).((y+1) mod maxy)) :: !neighbors;
  neighbors :=
    (Right, cell_array.((x+1) mod maxx).(y mod maxy)) :: !neighbors;
  neighbors :=
    (Down_Right, cell_array.((x+1) mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (Down, cell_array.(x mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (Down_Left, cell_array.((x-1) mod maxx).((y-1) mod maxy)) :: !neighbors;
  neighbors :=
    (Left, cell_array.((x-1) mod maxx).(y mod maxy)) :: !neighbors;
  !neighbors



(**************************************************************************)
(* cell process                                                           *)
(**************************************************************************)

let rec activate_neighborhood self neighbors =
  match neighbors with
  | [] -> ()
  | (dir, activation_sig) :: neighbors ->
      let info = make_info (opposite dir) self in
      emit activation_sig info;
      activate_neighborhood self neighbors

let process cell draw_cell get_neighbors cell_behavior
    x y (status_init, ext_init) cell_array =
  signal activation in
  let self = new_cell x y activation status_init ext_init in
  cell_array.(x).(y) <- activation;
  draw_cell self;
  pause;
  self.cell_neighborhood <- get_neighbors self cell_array;
  loop
    if self.cell_status <> Status_Quiescent
    then activate_neighborhood self self.cell_neighborhood
    else await immediate activation;
(*    let activation <neighbors> in *)
    pause;
    let neighbors = pre ?activation in
    cell_behavior self neighbors;
    draw_cell self
  end


(**************************************************************************)
(* cell behaviors                                                         *)
(**************************************************************************)

let fredkin cell neighbors =
  let cpt = ref 0 in
  List.iter
    (fun info -> if info.status <> Status_Quiescent then incr cpt)
    neighbors;
  cell.cell_status <-
    if (!cpt mod 2) = 1 then Status_Active else Status_Quiescent

let game_of_life cell neighbors =
  let cpt = ref 0 in
  List.iter
    (fun info -> if info.status <> Status_Quiescent then incr cpt)
    neighbors;
  cell.cell_status <-
    if cell.cell_status = Status_Quiescent && !cpt = 3
    then Status_Active
    else
      if cell.cell_status <> Status_Quiescent && !cpt <> 2 && !cpt <> 3
      then Status_Quiescent
      else cell.cell_status

let fire_behavior cell neighbors =
  match cell.cell_ext with
  | Fire_empty ->
      cell.cell_status <- Status_Quiescent
  | Fire_ash ->
      cell.cell_ext <- Fire_empty;
      cell.cell_status <- Status_Quiescent
  | Fire_fire ->
      cell.cell_ext <- Fire_ash;
      cell.cell_status <- Status_Active
  | Fire_tree ->
      if List.exists
	  (fun info -> info.info = Fire_fire)
	  neighbors
      then
	( cell.cell_ext <- Fire_fire;
	  cell.cell_status <- Status_Active)
      else
	  cell.cell_status <- Status_Quiescent

(*
let srl_behavior cell =
  match cell.cell_status with
  | Status_Wall -> ()
  | Status_Quiescent ->
      firing_processing cell
  | Status_Active ->
      firing_processing cell;
      match cell.cell_ext.srl_state with
      | PSRL_stop ->
	  cell.cell_status <- Status_Quiescent;
	  cell.cell_ext.srl_state <- PSRL_none
      | PSRL_erase ->
	  cell.cell_status <- Status_Quiescent;
	  cell.cell_ext.srl_state <- PSRL_none;
*)


(**************************************************************************)
(* cellular automaton                                                     *)
(**************************************************************************)
let cell_array_create tmp =
  Array.make_matrix !maxx !maxy tmp

let get_status_empty i j = Status_Quiescent, ()

let get_status_center i j =
  if i = !maxx/2 && j = !maxy/2
  then Status_Active, ()
  else Status_Quiescent, ()

let get_status_center_line i j =
  if i = !maxx/2
  then Status_Active, ()
  else Status_Quiescent, ()

let get_status_center_line_wall i j =
  if i = 0 or i = !maxx/2 or i = (!maxx-1) or j = 0 or j = (!maxy-1)
  then Status_Active, ()
  else Status_Quiescent, ()

let get_status_fire i j =
  if i = !maxx/2 && j = !maxy/2 then
    Status_Active, Fire_fire
  else
    if Random.float 1.0 < 0.6 then
      Status_Quiescent, Fire_tree
    else
      Status_Quiescent, Fire_empty

let process cellular_automaton_start
    draw_cell get_neighbors get_status cell_behavior cell_array =
  for i = 0 to !maxx - 1 dopar
    for j = 0 to !maxy - 1 dopar
      run (cell draw_cell get_neighbors cell_behavior
	     i j (get_status i j) cell_array)
    done
  done


(**************************************************************************)
(* main                                                                   *)
(**************************************************************************)

let behavior = ref "fire"

let configure () =
  let doc_zoom = "<n> set the size of a cell"
  and doc_width = "<n> set the number of cells in the width"
  and doc_height = "<n> set the number of cells in the height"
  and doc_behavior = "<s> select the behavior of the automaton"
  and doc_nox = "disable graphical output"
  and errmsg = "Options are:"
  in
  Arg.parse
    [ ("-zoom", Arg.Set_int zoom, doc_zoom);
      ("-width", Arg.Set_int maxx, doc_width);
      ("-w", Arg.Set_int maxx, doc_width);
      ("-height", Arg.Set_int maxy, doc_height);
      ("-h", Arg.Set_int maxy, doc_height);
      ("-b", Arg.Set_string behavior, doc_behavior);
      ("-nox", Arg.Set nox, doc_nox);
    ]
    (fun s -> raise (Invalid_argument s))
    errmsg

let process main =
  Random.self_init();
  configure();
  if !nox then ()
  else
    begin
      Graphics.open_graph (" "^(string_of_int (!maxx * !zoom))^"x"^
			       (string_of_int (!maxy * !zoom)));
      Graphics.auto_synchronize false;
    end;
  begin
    begin match !behavior with
    | "gol" ->
	signal tmp in
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_moore_neighbors_circular
	       get_status_center_line_wall
	       game_of_life
	       cell_array);
    | "fredkin" ->
	signal tmp in
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_moore_neighbors_circular
	       get_status_center
	       fredkin
	       cell_array);
    | "fredkin2" ->
	signal tmp in
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_status
	in
	run (cellular_automaton_start
	       draw
	       get_von_neumann_neighbors
	       get_status_center
	       fredkin
	       cell_array);
    | "fire" ->
	signal tmp in
	let cell_array = cell_array_create tmp in
	let draw =
	  if ! nox then no_draw
	  else draw_cell_gen color_of_fire_state
	in
	run (cellular_automaton_start
	       draw
	       get_von_neumann_neighbors
	       get_status_fire
	       fire_behavior
	       cell_array);
    | s -> raise (Invalid_argument s)
    end
    ||
    if !nox then ()
    else
      loop
        ignore (Graphics.wait_next_event [Graphics.Poll]);
	Graphics.synchronize ();
	pause;
      end
  end

let () = run main
