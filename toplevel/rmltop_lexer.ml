# 24 "rmltop_lexer.mll"
 
 open Lexing

 exception EOF
 exception Syntax_error

 type directive =
   | Rml_phrase of string
   | OCaml_phrase of string
   | Suspend
   | Resume
   | Step of int option
   | Sampling of float
   | Run of string
   | Exec of string
   | Quit

 let expr_buffer = Buffer.create 512

# 22 "rmltop_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\253\255\255\255\005\000\010\000\015\000\245\255\246\255\
    \021\000\039\000\000\000\000\000\001\000\006\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\000\000\255\255\001\000\046\000\
    \001\000\052\000\253\255\002\000\000\000\001\000\009\000\004\000\
    \057\000\063\000\011\000\009\000\008\000\017\000\026\000\254\255\
    \250\255\030\000\000\000\249\255\027\000\017\000\248\255\004\000\
    \253\255\254\255\009\000\255\255\086\000\252\255\015\000\254\255\
    \098\000\120\000\131\000\153\000\163\000\253\255\185\000\253\255\
    \254\255\213\000\224\000\031\000\234\000\041\001\064\001\243\000\
    \148\000\041\001\253\255\254\255\018\000\092\001\113\001\022\000\
    \137\001\143\001\255\255\099\000\254\255\023\000\255\255";
  Lexing.lex_backtrk =
   "\001\000\255\255\255\255\001\000\001\000\255\255\255\255\255\255\
    \008\000\008\000\010\000\010\000\010\000\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\255\255\255\255\255\255\003\000\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\002\000\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\255\255\006\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\048\000\
    \000\000\000\000\255\255\000\000\053\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\063\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\074\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\084\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\000\000\004\000\003\000\004\000\004\000\
    \000\000\004\000\003\000\004\000\004\000\000\000\004\000\003\000\
    \009\000\009\000\000\000\009\000\008\000\000\000\009\000\009\000\
    \004\000\009\000\008\000\002\000\000\000\004\000\000\000\000\000\
    \002\000\000\000\004\000\000\000\000\000\002\000\000\000\009\000\
    \009\000\009\000\000\000\009\000\008\000\009\000\000\000\023\000\
    \023\000\000\000\023\000\025\000\026\000\023\000\023\000\050\000\
    \023\000\025\000\032\000\032\000\051\000\032\000\033\000\009\000\
    \032\000\032\000\061\000\032\000\033\000\082\000\023\000\072\000\
    \072\000\082\000\086\000\000\000\023\000\000\000\000\000\000\000\
    \000\000\032\000\000\000\000\000\000\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\043\000\021\000\022\000\035\000\014\000\
    \019\000\024\000\030\000\032\000\029\000\027\000\020\000\024\000\
    \018\000\023\000\028\000\017\000\011\000\044\000\034\000\031\000\
    \041\000\040\000\015\000\016\000\036\000\037\000\038\000\039\000\
    \010\000\012\000\013\000\042\000\045\000\046\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \058\000\054\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\000\000\000\000\085\000\000\000\
    \000\000\000\000\000\000\060\000\000\000\060\000\000\000\057\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\000\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\000\000\000\000\000\000\
    \000\000\056\000\000\000\000\000\072\000\072\000\000\000\057\000\
    \057\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\000\000\000\000\000\000\
    \000\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
    \057\000\066\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\072\000\000\000\000\000\000\000\000\000\
    \059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\049\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\007\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\067\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\000\000\000\000\000\000\000\000\068\000\
    \000\000\000\000\078\000\078\000\065\000\078\000\077\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
    \000\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\078\000\000\000\000\000\000\000\000\000\000\000\068\000\
    \000\000\000\000\071\000\000\000\000\000\000\000\055\000\000\000\
    \069\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\255\255\076\000\081\000\081\000\000\000\
    \081\000\080\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\081\000\081\000\081\000\081\000\080\000\000\000\
    \000\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
    \000\000\000\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \000\000\081\000\081\000\081\000\000\000\081\000\080\000\079\000\
    \081\000\081\000\000\000\081\000\080\000\000\000\000\000\070\000\
    \000\000\070\000\070\000\070\000\070\000\070\000\070\000\000\000\
    \000\000\081\000\000\000\000\000\079\000\000\000\000\000\081\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\079\000\000\000\000\000\000\000\
    \000\000\000\000\079\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\003\000\003\000\
    \255\255\003\000\003\000\004\000\004\000\255\255\004\000\004\000\
    \005\000\005\000\255\255\005\000\005\000\255\255\008\000\008\000\
    \000\000\008\000\008\000\000\000\255\255\003\000\255\255\255\255\
    \003\000\255\255\004\000\255\255\255\255\004\000\255\255\005\000\
    \009\000\009\000\255\255\009\000\009\000\008\000\255\255\023\000\
    \023\000\255\255\023\000\023\000\024\000\025\000\025\000\047\000\
    \025\000\025\000\032\000\032\000\050\000\032\000\032\000\009\000\
    \033\000\033\000\054\000\033\000\033\000\076\000\023\000\067\000\
    \067\000\079\000\085\000\255\255\025\000\255\255\255\255\255\255\
    \255\255\032\000\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\255\255\255\255\042\000\020\000\015\000\012\000\013\000\
    \018\000\023\000\029\000\031\000\028\000\014\000\019\000\025\000\
    \017\000\022\000\027\000\016\000\005\000\010\000\012\000\030\000\
    \011\000\034\000\013\000\013\000\035\000\036\000\037\000\038\000\
    \005\000\005\000\005\000\041\000\044\000\045\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \056\000\052\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\255\255\255\255\083\000\255\255\
    \255\255\255\255\255\255\057\000\255\255\057\000\255\255\056\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\255\255\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\255\255\255\255\255\255\
    \255\255\056\000\255\255\255\255\072\000\072\000\255\255\056\000\
    \058\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\255\255\255\255\255\255\
    \255\255\255\255\058\000\255\255\255\255\255\255\255\255\255\255\
    \058\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\072\000\255\255\255\255\255\255\255\255\
    \059\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\047\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\005\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\066\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\255\255\255\255\255\255\255\255\066\000\
    \255\255\255\255\073\000\073\000\065\000\073\000\073\000\255\255\
    \066\000\255\255\255\255\255\255\255\255\255\255\255\255\066\000\
    \255\255\255\255\066\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\255\255\255\255\255\255\255\255\255\255\066\000\
    \255\255\255\255\071\000\255\255\255\255\255\255\052\000\255\255\
    \066\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\083\000\073\000\077\000\077\000\255\255\
    \077\000\077\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\078\000\078\000\077\000\078\000\078\000\255\255\
    \255\255\070\000\070\000\070\000\070\000\070\000\070\000\255\255\
    \255\255\255\255\069\000\069\000\069\000\069\000\069\000\069\000\
    \255\255\078\000\080\000\080\000\255\255\080\000\080\000\077\000\
    \081\000\081\000\255\255\081\000\081\000\255\255\255\255\070\000\
    \255\255\070\000\070\000\070\000\070\000\070\000\070\000\255\255\
    \255\255\080\000\255\255\255\255\078\000\255\255\255\255\081\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\062\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\080\000\255\255\255\255\255\255\
    \255\255\255\255\081\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec phrase lexbuf =
   __ocaml_lex_phrase_rec lexbuf 0
and __ocaml_lex_phrase_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 70 "rmltop_lexer.mll"
                     ( directive lexbuf )
# 249 "rmltop_lexer.ml"

  | 1 ->
# 71 "rmltop_lexer.mll"
                     ( Rml_phrase (expr lexbuf) )
# 254 "rmltop_lexer.ml"

  | 2 ->
# 72 "rmltop_lexer.mll"
                     ( raise EOF )
# 259 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_phrase_rec lexbuf __ocaml_lex_state

and directive lexbuf =
   __ocaml_lex_directive_rec lexbuf 5
and __ocaml_lex_directive_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 75 "rmltop_lexer.mll"
                     ( end_of_phrase lexbuf; Suspend )
# 271 "rmltop_lexer.ml"

  | 1 ->
# 76 "rmltop_lexer.mll"
                     ( end_of_phrase lexbuf; Resume )
# 276 "rmltop_lexer.ml"

  | 2 ->
# 77 "rmltop_lexer.mll"
                     ( Step None )
# 281 "rmltop_lexer.ml"

  | 3 ->
# 78 "rmltop_lexer.mll"
                     ( Step (Some (int_expr lexbuf)) )
# 286 "rmltop_lexer.ml"

  | 4 ->
# 79 "rmltop_lexer.mll"
                     ( Sampling (float_expr lexbuf) )
# 291 "rmltop_lexer.ml"

  | 5 ->
# 80 "rmltop_lexer.mll"
                     ( Run (expr lexbuf) )
# 296 "rmltop_lexer.ml"

  | 6 ->
# 81 "rmltop_lexer.mll"
                     ( Exec (expr lexbuf) )
# 301 "rmltop_lexer.ml"

  | 7 ->
# 82 "rmltop_lexer.mll"
                     ( end_of_phrase lexbuf; Quit )
# 306 "rmltop_lexer.ml"

  | 8 ->
# 83 "rmltop_lexer.mll"
                     ( OCaml_phrase (expr lexbuf) )
# 311 "rmltop_lexer.ml"

  | 9 ->
# 84 "rmltop_lexer.mll"
                     ( raise EOF )
# 316 "rmltop_lexer.ml"

  | 10 ->
# 85 "rmltop_lexer.mll"
                     ( error lexbuf; assert false )
# 321 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_directive_rec lexbuf __ocaml_lex_state

and expr lexbuf =
   __ocaml_lex_expr_rec lexbuf 47
and __ocaml_lex_expr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 88 "rmltop_lexer.mll"
                     ( let s = Buffer.contents expr_buffer in
                       Buffer.reset expr_buffer;
                       s )
# 335 "rmltop_lexer.ml"

  | 1 ->
# 91 "rmltop_lexer.mll"
                     ( raise EOF )
# 340 "rmltop_lexer.ml"

  | 2 ->
# 92 "rmltop_lexer.mll"
                     ( Buffer.add_string expr_buffer (lexeme lexbuf);
	               expr lexbuf )
# 346 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_expr_rec lexbuf __ocaml_lex_state

and float_expr lexbuf =
   __ocaml_lex_float_expr_rec lexbuf 52
and __ocaml_lex_float_expr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 96 "rmltop_lexer.mll"
                     ( let x = float_of_string (Lexing.lexeme lexbuf) in
                       end_of_phrase lexbuf;
                       x )
# 360 "rmltop_lexer.ml"

  | 1 ->
# 99 "rmltop_lexer.mll"
                     ( raise EOF )
# 365 "rmltop_lexer.ml"

  | 2 ->
# 100 "rmltop_lexer.mll"
                     ( raise Syntax_error )
# 370 "rmltop_lexer.ml"

  | 3 ->
# 101 "rmltop_lexer.mll"
                     ( error lexbuf; assert false )
# 375 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_float_expr_rec lexbuf __ocaml_lex_state

and int_expr lexbuf =
   __ocaml_lex_int_expr_rec lexbuf 62
and __ocaml_lex_int_expr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 104 "rmltop_lexer.mll"
                     ( let x = int_of_string (Lexing.lexeme lexbuf) in
                        end_of_phrase lexbuf;
                        x )
# 389 "rmltop_lexer.ml"

  | 1 ->
# 107 "rmltop_lexer.mll"
                     ( raise EOF )
# 394 "rmltop_lexer.ml"

  | 2 ->
# 108 "rmltop_lexer.mll"
                     ( error lexbuf; assert false )
# 399 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_int_expr_rec lexbuf __ocaml_lex_state

and end_of_phrase lexbuf =
   __ocaml_lex_end_of_phrase_rec lexbuf 73
and __ocaml_lex_end_of_phrase_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 111 "rmltop_lexer.mll"
                     ( () )
# 411 "rmltop_lexer.ml"

  | 1 ->
# 112 "rmltop_lexer.mll"
                     ( raise EOF )
# 416 "rmltop_lexer.ml"

  | 2 ->
# 113 "rmltop_lexer.mll"
                     ( error lexbuf; assert false )
# 421 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_end_of_phrase_rec lexbuf __ocaml_lex_state

and error lexbuf =
   __ocaml_lex_error_rec lexbuf 83
and __ocaml_lex_error_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 116 "rmltop_lexer.mll"
             ( raise Syntax_error )
# 433 "rmltop_lexer.ml"

  | 1 ->
# 117 "rmltop_lexer.mll"
             ( error lexbuf )
# 438 "rmltop_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_error_rec lexbuf __ocaml_lex_state

;;

