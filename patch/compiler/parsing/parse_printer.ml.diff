--- compiler/parsing/parse_printer.ml	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/parsing/parse_printer.ml	2017-10-10 15:45:19.000000000 -0400
@@ -1,24 +1,39 @@
-(* This file was printast.ml from Objective Caml *)
-
-(***********************************************************************)
-(*                                                                     *)
-(*                           Objective Caml                            *)
-(*                                                                     *)
-(*             Damien Doligez, projet Para, INRIA Rocquencourt         *)
-(*                                                                     *)
-(*  Copyright 1999 Institut National de Recherche en Informatique et   *)
-(*  en Automatique.  All rights reserved.  This file is distributed    *)
-(*  under the terms of the Q Public License version 1.0.               *)
-(*                                                                     *)
-(***********************************************************************)
-
-(* $Id: printast.ml,v 1.25 2003/07/02 09:14:31 xleroy Exp $ *)
-
-open Asttypes;;
-open Format;;
-open Lexing;;
-open Location;;
-open Parsetree;;
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: parse_printer.ml *)
+
+(* Warning: *)
+(* This file is based on the original version of printast.ml *)
+(* from the Objective Caml 3.07 distribution, INRIA          *)
+
+(* first modification: 2004-05-12 *)
+(* modified by: Louis Mandel *)
+
+
+(* $Id$ *)
+
+open Format
+open Lexing
+open Parse_ast
+open Asttypes
+open Location
 
 let fmt_position f l =
   if l.pos_fname = "" && l.pos_lnum = 1
@@ -34,25 +49,28 @@
   if loc.loc_ghost then fprintf f " ghost";
 ;;
 
-let rec fmt_longident_aux f x =
+let rec fmt_parseident_aux f x =
   match x with
-  | Longident.Lident (s) -> fprintf f "%s" s;
-  | Longident.Ldot (y, s) -> fprintf f "%a.%s" fmt_longident_aux y s;
-  | Longident.Lapply (y, z) ->
-      fprintf f "%a(%a)" fmt_longident_aux y fmt_longident_aux z;
+  | Parse_ident.Pident (s) -> fprintf f "%s" s;
+  | Parse_ident.Pdot (m, s) -> fprintf f "%s.%s" m s;
 ;;
 
-let fmt_longident f x = fprintf f "\"%a\"" fmt_longident_aux x;;
+let fmt_parseident f x = fprintf f "\"%a\"" fmt_parseident_aux x;;
+
+let fmt_ident_aux f x = fmt_parseident_aux f x.pident_id;;
+
+let fmt_ident f x = fmt_parseident f x.pident_id;;
+
+let fmt_simple f x = fprintf f "%s" x.psimple_id;;
 
 let fmt_constant f x =
   match x with
+  | Const_unit -> fprintf f "Const_unit";
+  | Const_bool (b) -> fprintf f "Const_bool %s" (string_of_bool b);
   | Const_int (i) -> fprintf f "Const_int %d" i;
   | Const_char (c) -> fprintf f "Const_char %02x" (Char.code c);
   | Const_string (s) -> fprintf f "Const_string %S" s;
-  | Const_float (s) -> fprintf f "Const_float %s" s;
-  | Const_int32 (i) -> fprintf f "Const_int32 %ld" i;
-  | Const_int64 (i) -> fprintf f "Const_int64 %Ld" i;
-  | Const_nativeint (i) -> fprintf f "Const_nativeint %nd" i;
+  | Const_float (fl) -> fprintf f "Const_float %f" fl;
 ;;
 
 let fmt_mutable_flag f x =
@@ -61,17 +79,10 @@
   | Mutable -> fprintf f "Mutable";
 ;;
 
-let fmt_virtual_flag f x =
-  match x with
-  | Virtual -> fprintf f "Virtual";
-  | Concrete -> fprintf f "Concrete";
-;;
-
 let fmt_rec_flag f x =
   match x with
   | Nonrecursive -> fprintf f "Nonrec";
   | Recursive -> fprintf f "Rec";
-  | Default -> fprintf f "Default";
 ;;
 
 let fmt_direction_flag f x =
@@ -80,10 +91,22 @@
   | Downto -> fprintf f "Down";
 ;;
 
-let fmt_private_flag f x =
+let fmt_immediate_flag f x =
+  match x with
+  | Immediate -> fprintf f "Immediate"
+  | Nonimmediate -> fprintf f "Nonimmediate"
+;;
+
+let fmt_pre_kind f x =
+  match x with
+  | Status -> fprintf f "Status"
+  | Value -> fprintf f "Value"
+;;
+
+let fmt_await_kind_flag f x =
   match x with
-  | Public -> fprintf f "Public";
-  | Private -> fprintf f "Private";
+  | All -> fprintf f "All"
+  | One -> fprintf f "One"
 ;;
 
 let line i f s (*...*) =
@@ -101,534 +124,250 @@
       f (i+1) ppf x;
 ;;
 
-let longident i ppf li = line i ppf "%a\n" fmt_longident li;;
+let parseident i ppf li = line i ppf "%a\n" fmt_parseident li;;
+let ident i ppf li = line i ppf "%a\n" fmt_ident li;;
+let simple i ppf li = line i ppf "%a\n" fmt_simple li;;
 let string i ppf s = line i ppf "\"%s\"\n" s;;
 let bool i ppf x = line i ppf "%s\n" (string_of_bool x);;
 let label i ppf x = line i ppf "label=\"%s\"\n" x;;
 
-let rec core_type i ppf x =
-  line i ppf "core_type %a\n" fmt_location x.ptyp_loc;
-  let i = i+1 in
-  match x.ptyp_desc with
-  | Ptyp_any -> line i ppf "Ptyp_any\n";
-  | Ptyp_var (s) -> line i ppf "Ptyp_var %s\n" s;
-  | Ptyp_arrow (l, ct1, ct2) ->
-      line i ppf "Ptyp_arrow\n";
-      string i ppf l;
-      core_type i ppf ct1;
-      core_type i ppf ct2;
-  | Ptyp_tuple l ->
-      line i ppf "Ptyp_tuple\n";
-      list i core_type ppf l;
-  | Ptyp_constr (li, l) ->
-      line i ppf "Ptyp_constr %a\n" fmt_longident li;
-      list i core_type ppf l;
-  | Ptyp_variant (l, closed, low) ->
-      line i ppf "Ptyp_variant closed=%s\n" (string_of_bool closed);
-      list i label_x_bool_x_core_type_list ppf l;
-      option i (fun i -> list i string) ppf low
-  | Ptyp_object (l) ->
-      line i ppf "Ptyp_object\n";
-      list i core_field_type ppf l;
-  | Ptyp_class (li, l, low) ->
-      line i ppf "Ptyp_class %a\n" fmt_longident li;
-      list i core_type ppf l;
-      list i string ppf low
-  | Ptyp_alias (ct, s) ->
-      line i ppf "Ptyp_alias \"%s\"\n" s;
-      core_type i ppf ct;
-  | Ptyp_poly (sl, ct) ->
-      line i ppf "Ptyp_poly%a\n"
-        (fun ppf -> List.iter (fun x -> fprintf ppf " '%s" x)) sl;
-      core_type i ppf ct;
-
-and core_field_type i ppf x =
-  line i ppf "core_field_type %a\n" fmt_location x.pfield_loc;
-  let i = i+1 in
-  match x.pfield_desc with
-  | Pfield (s, ct) ->
-      line i ppf "Pfield \"%s\"\n" s;
-      core_type i ppf ct;
-  | Pfield_var -> line i ppf "Pfield_var\n";
-
-and pattern i ppf x =
-  line i ppf "pattern %a\n" fmt_location x.ppat_loc;
+let rec type_expression i ppf x =
+  line i ppf "type_expression %a\n" fmt_location x.pte_loc;
   let i = i+1 in
-  match x.ppat_desc with
-  | Ppat_any -> line i ppf "Ppat_any\n";
-  | Ppat_var (s) -> line i ppf "Ppat_var \"%s\"\n" s;
-  | Ppat_alias (p, s) ->
-      line i ppf "Ppat_alias \"%s\"\n" s;
+  match x.pte_desc with
+  | Ptype_var (s) -> line i ppf "Ptype_var \'%s\n" s;
+  | Ptype_arrow (ct1, ct2) ->
+      line i ppf "Ptype_arrow\n";
+      type_expression i ppf ct1;
+      type_expression i ppf ct2;
+  | Ptype_tuple l ->
+      line i ppf "Ptype_tuple\n";
+      list i type_expression ppf l;
+  | Ptype_constr (pi, l) ->
+      line i ppf "Ptype_constr %a\n" fmt_ident pi;
+      list i type_expression ppf l
+  | Ptype_process (ct,k) ->
+      line i ppf "Ptype_process(%s)\n"
+	(Def_static.string_of_instantaneous k);
+      type_expression i ppf ct
+;;
+
+let rec pattern i ppf x =
+  line i ppf "pattern %a\n" fmt_location x.ppatt_loc;
+  let i = i+1 in
+  match x.ppatt_desc with
+  | Ppatt_any -> line i ppf "Ppatt_any\n";
+  | Ppatt_var (s) -> line i ppf "Ppatt_var \"%a\"\n" fmt_simple s;
+  | Ppatt_alias (p, s) ->
+      line i ppf "Ppatt_alias \"%a\"\n" fmt_simple s;
       pattern i ppf p;
-  | Ppat_constant (c) -> line i ppf "Ppat_constant %a\n" fmt_constant c;
-  | Ppat_tuple (l) ->
-      line i ppf "Ppat_tuple\n";
+  | Ppatt_constant (c) -> line i ppf "Ppatt_constant %a\n" fmt_constant c;
+  | Ppatt_tuple (l) ->
+      line i ppf "Ppatt_tuple\n";
       list i pattern ppf l;
-  | Ppat_construct (li, po, b) ->
-      line i ppf "Ppat_construct %a\n" fmt_longident li;
+  | Ppatt_construct (li, po) ->
+      line i ppf "Ppatt_construct %a\n" fmt_ident li;
       option i pattern ppf po;
-      bool i ppf b;
-  | Ppat_variant (l, po) ->
-      line i ppf "Ppat_variant \"%s\"\n" l;
-      option i pattern ppf po;
-  | Ppat_record (l) ->
-      line i ppf "Ppat_record\n";
-      list i longident_x_pattern ppf l;
-  | Ppat_array (l) ->
-      line i ppf "Ppat_array\n";
+  | Ppatt_record (l) ->
+      line i ppf "Ppatt_record\n";
+      list i ident_x_pattern ppf l;
+  | Ppatt_array (l) ->
+      line i ppf "Ppatt_array\n";
       list i pattern ppf l;
-  | Ppat_or (p1, p2) ->
-      line i ppf "Ppat_or\n";
+  | Ppatt_or (p1, p2) ->
+      line i ppf "Ppatt_or\n";
       pattern i ppf p1;
       pattern i ppf p2;
-  | Ppat_constraint (p, ct) ->
-      line i ppf "Ppat_constraint";
+  | Ppatt_constraint (p, ct) ->
+      line i ppf "Ppatt_constraint\n";
       pattern i ppf p;
-      core_type i ppf ct;
-  | Ppat_type li ->
-      line i ppf "PPat_type";
-      longident i ppf li
+      type_expression i ppf ct
+
+and ident_x_pattern i ppf (li, p) =
+  line i ppf "%a\n" fmt_ident li;
+  pattern (i+1) ppf p
+;;
 
-and expression i ppf x =
-  line i ppf "expression %a\n" fmt_location x.pexp_loc;
+let rec expression i ppf x =
+  line i ppf "expr %a\n"
+    fmt_location x.pexpr_loc;
   let i = i+1 in
-  match x.pexp_desc with
-  | Pexp_ident (li) -> line i ppf "Pexp_ident %a\n" fmt_longident li;
-  | Pexp_constant (c) -> line i ppf "Pexp_constant %a\n" fmt_constant c;
-  | Pexp_let (rf, l, e) ->
+  match x.pexpr_desc with
+  | Pexpr_ident (id) -> line i ppf "Pexpr_ident %a\n" fmt_ident id;
+  | Pexpr_constant (c) -> line i ppf "Pexpr_constant %a\n" fmt_constant c;
+  | Pexpr_let (rf, l, e) ->
       line i ppf "Pexp_let %a\n" fmt_rec_flag rf;
       list i pattern_x_expression_def ppf l;
       expression i ppf e;
-  | Pexp_function (p, eo, l) ->
-      line i ppf "Pexp_function \"%s\"\n" p;
-      option i expression ppf eo;
-      list i pattern_x_expression_case ppf l;
-  | Pexp_apply (e, l) ->
+  | Pexpr_function (l) ->
+      line i ppf "Pexpr_function\n";
+      list i pattern_x_expression_option_x_expression_case ppf l;
+  | Pexpr_apply (e, l) ->
       line i ppf "Pexp_apply\n";
       expression i ppf e;
-      list i label_x_expression ppf l;
-  | Pexp_match (e, l) ->
-      line i ppf "Pexp_match\n";
-      expression i ppf e;
-      list i pattern_x_expression_case ppf l;
-  | Pexp_try (e, l) ->
-      line i ppf "Pexp_try\n";
-      expression i ppf e;
-      list i pattern_x_expression_case ppf l;
-  | Pexp_tuple (l) ->
-      line i ppf "Pexp_tuple\n";
+      list i expression_arg ppf l;
+  | Pexpr_match (e, l) ->
+      line i ppf "Pexpr_match\n";
+      expression i ppf e;
+      list i pattern_x_expression_option_x_expression_case ppf l;
+  | Pexpr_trywith (e, l) ->
+      line i ppf "Pexpr_trywith\n";
+      expression i ppf e;
+      list i pattern_x_expression_option_x_expression_case ppf l;
+  | Pexpr_tuple (l) ->
+      line i ppf "Pexpr_tuple\n";
       list i expression ppf l;
-  | Pexp_construct (li, eo, b) ->
-      line i ppf "Pexp_construct %a\n" fmt_longident li;
-      option i expression ppf eo;
-      bool i ppf b;
-  | Pexp_variant (l, eo) ->
-      line i ppf "Pexp_variant \"%s\"\n" l;
+  | Pexpr_construct (li, eo) ->
+      line i ppf "Pexpr_construct %a\n" fmt_ident li;
       option i expression ppf eo;
-  | Pexp_record (l, eo) ->
-      line i ppf "Pexp_record\n";
-      list i longident_x_expression ppf l;
-      option i expression ppf eo;
-  | Pexp_field (e, li) ->
-      line i ppf "Pexp_field\n";
-      expression i ppf e;
-      longident i ppf li;
-  | Pexp_setfield (e1, li, e2) ->
-      line i ppf "Pexp_setfield\n";
+  | Pexpr_record (l) ->
+      line i ppf "Pexpr_record\n";
+      list i ident_x_expression ppf l;
+  | Pexpr_record_access (e, li) ->
+      line i ppf "Pexpr_record_access\n";
+      expression i ppf e;
+      ident i ppf li;
+  | Pexpr_record_with (e, li) ->
+      line i ppf "Pexpr_record_with\n";
+      expression i ppf e;
+      list i ident_x_expression ppf li;
+  | Pexpr_record_update (e1, li, e2) ->
+      line i ppf "Pexpr_record_update\n";
       expression i ppf e1;
-      longident i ppf li;
+      ident i ppf li;
       expression i ppf e2;
-  | Pexp_array (l) ->
-      line i ppf "Pexp_array\n";
+  | Pexpr_array (l) ->
+      line i ppf "Pexpr_array\n";
       list i expression ppf l;
-  | Pexp_ifthenelse (e1, e2, eo) ->
-      line i ppf "Pexp_ifthenelse\n";
+  | Pexpr_ifthenelse (e1, e2, eo) ->
+      line i ppf "Pexpr_ifthenelse\n";
       expression i ppf e1;
       expression i ppf e2;
       option i expression ppf eo;
-  | Pexp_sequence (e1, e2) ->
-      line i ppf "Pexp_sequence\n";
+  | Pexpr_seq (e1, e2) ->
+      line i ppf "Pexpr_seq\n";
       expression i ppf e1;
       expression i ppf e2;
-  | Pexp_while (e1, e2) ->
-      line i ppf "Pexp_while\n";
+  | Pexpr_while (e1, e2) ->
+      line i ppf "Pexpr_while\n";
       expression i ppf e1;
       expression i ppf e2;
-  | Pexp_for (s, e1, e2, df, e3) ->
-      line i ppf "Pexp_for \"%s\" %a\n" s fmt_direction_flag df;
+  | Pexpr_for (s, e1, e2, df, e3) ->
+      line i ppf "Pexpr_for \"%a\" %a\n" fmt_simple s fmt_direction_flag df;
       expression i ppf e1;
       expression i ppf e2;
       expression i ppf e3;
-  | Pexp_constraint (e, cto1, cto2) ->
-      line i ppf "Pexp_constraint\n";
-      expression i ppf e;
-      option i core_type ppf cto1;
-      option i core_type ppf cto2;
-  | Pexp_when (e1, e2) ->
-      line i ppf "Pexp_when\n";
+  | Pexpr_fordopar (s, e1, e2, df, e3) ->
+      line i ppf "Pexpr_fordopar \"%a\" %a\n"
+	fmt_simple s fmt_direction_flag df;
       expression i ppf e1;
       expression i ppf e2;
-  | Pexp_send (e, s) ->
-      line i ppf "Pexp_send \"%s\"\n" s;
+      expression i ppf e3;
+  | Pexpr_constraint (e, te) ->
+      line i ppf "Pexpr_constraint\n";
       expression i ppf e;
-  | Pexp_new (li) -> line i ppf "Pexp_new %a\n" fmt_longident li;
-  | Pexp_setinstvar (s, e) ->
-      line i ppf "Pexp_setinstvar \"%s\"\n" s;
-      expression i ppf e;
-  | Pexp_override (l) ->
-      line i ppf "Pexp_override\n";
-      list i string_x_expression ppf l;
-  | Pexp_letmodule (s, me, e) ->
-      line i ppf "Pexp_letmodule \"%s\"\n" s;
-      module_expr i ppf me;
-      expression i ppf e;
-  | Pexp_assert (e) ->
-      line i ppf "Pexp_assert";
-      expression i ppf e;
-  | Pexp_assertfalse ->
-      line i ppf "Pexp_assertfalse";
-  | Pexp_lazy (e) ->
-      line i ppf "Pexp_lazy";
-      expression i ppf e;
-  | Pexp_poly (e, cto) ->
-      line i ppf "Pexp_poly\n";
-      expression i ppf e;
-      option i core_type ppf cto;
-
-and value_description i ppf x =
-  line i ppf "value_description\n";
-  core_type (i+1) ppf x.pval_type;
-  list (i+1) string ppf x.pval_prim;
-
-and type_declaration i ppf x =
-  line i ppf "type_declaration %a\n" fmt_location x.ptype_loc;
-  let i = i+1 in
-  line i ppf "ptype_params =\n";
-  list (i+1) string ppf x.ptype_params;
-  line i ppf "ptype_cstrs =\n";
-  list (i+1) core_type_x_core_type_x_location ppf x.ptype_cstrs;
-  line i ppf "ptype_kind =\n";
-  type_kind (i+1) ppf x.ptype_kind;
-  line i ppf "ptype_manifest =\n";
-  option (i+1) core_type ppf x.ptype_manifest;
-
-and type_kind i ppf x =
-  match x with
-  | Ptype_abstract ->
-      line i ppf "Ptype_abstract\n"
-  | Ptype_variant (l, priv) ->
-      line i ppf "Ptype_variant %a\n" fmt_private_flag priv;
-      list (i+1) string_x_core_type_list ppf l;
-  | Ptype_record (l, priv) ->
-      line i ppf "Ptype_record %a\n" fmt_private_flag priv;
-      list (i+1) string_x_mutable_flag_x_core_type ppf l;
-
-and exception_declaration i ppf x = list i core_type ppf x
-
-and class_type i ppf x =
-  line i ppf "class_type %a\n" fmt_location x.pcty_loc;
-  let i = i+1 in
-  match x.pcty_desc with
-  | Pcty_constr (li, l) ->
-      line i ppf "Pcty_constr %a\n" fmt_longident li;
-      list i core_type ppf l;
-  | Pcty_signature (cs) ->
-      line i ppf "Pcty_signature\n";
-      class_signature i ppf cs;
-  | Pcty_fun (l, co, cl) ->
-      line i ppf "Pcty_fun \"%s\"\n" l;
-      core_type i ppf co;
-      class_type i ppf cl;
-
-and class_signature i ppf (ct, l) =
-  line i ppf "class_signature\n";
-  core_type (i+1) ppf ct;
-  list (i+1) class_type_field ppf l;
-
-and class_type_field i ppf x =
-  match x with
-  | Pctf_inher (ct) ->
-      line i ppf "Pctf_inher\n";
-      class_type i ppf ct;
-  | Pctf_val (s, mf, cto, loc) ->
-      line i ppf
-        "Pctf_val \"%s\" %a %a\n" s fmt_mutable_flag mf fmt_location loc;
-      option i core_type ppf cto;
-  | Pctf_virt (s, pf, ct, loc) ->
-      line i ppf
-        "Pctf_virt \"%s\" %a %a\n" s fmt_private_flag pf fmt_location loc;
-  | Pctf_meth (s, pf, ct, loc) ->
-      line i ppf
-        "Pctf_meth \"%s\" %a %a\n" s fmt_private_flag pf fmt_location loc;
-  | Pctf_cstr (ct1, ct2, loc) ->
-      line i ppf "Pctf_cstr %a\n" fmt_location loc;
-      core_type i ppf ct1;
-      core_type i ppf ct2;
-
-and class_description i ppf x =
-  line i ppf "class_description %a\n" fmt_location x.pci_loc;
-  let i = i+1 in
-  line i ppf "pci_virt = %a\n" fmt_virtual_flag x.pci_virt;
-  line i ppf "pci_params =\n";
-  string_list_x_location (i+1) ppf x.pci_params;
-  line i ppf "pci_name = \"%s\"\n" x.pci_name;
-  line i ppf "pci_expr =\n";
-  class_type (i+1) ppf x.pci_expr;
-
-and class_type_declaration i ppf x =
-  line i ppf "class_type_declaration %a\n" fmt_location x.pci_loc;
-  let i = i+1 in
-  line i ppf "pci_virt = %a\n" fmt_virtual_flag x.pci_virt;
-  line i ppf "pci_params =\n";
-  string_list_x_location (i+1) ppf x.pci_params;
-  line i ppf "pci_name = \"%s\"\n" x.pci_name;
-  line i ppf "pci_expr =\n";
-  class_type (i+1) ppf x.pci_expr;
-
-and class_expr i ppf x =
-  line i ppf "class_expr %a\n" fmt_location x.pcl_loc;
-  let i = i+1 in
-  match x.pcl_desc with
-  | Pcl_constr (li, l) ->
-      line i ppf "Pcl_constr %a\n" fmt_longident li;
-      list i core_type ppf l;
-  | Pcl_structure (cs) ->
-      line i ppf "Pcl_structure\n";
-      class_structure i ppf cs;
-  | Pcl_fun (l, eo, p, e) ->
-      line i ppf "Pcl_fun\n";
-      label i ppf l;
-      option i expression ppf eo;
-      pattern i ppf p;
-      class_expr i ppf e;
-  | Pcl_apply (ce, l) ->
-      line i ppf "Pcl_apply\n";
-      class_expr i ppf ce;
-      list i label_x_expression ppf l;
-  | Pcl_let (rf, l, ce) ->
-      line i ppf "Pcl_let %a\n" fmt_rec_flag rf;
-      list i pattern_x_expression_def ppf l;
-      class_expr i ppf ce;
-  | Pcl_constraint (ce, ct) ->
-      line i ppf "Pcl_constraint\n";
-      class_expr i ppf ce;
-      class_type i ppf ct;
-
-and class_structure i ppf (p, l) =
-  line i ppf "class_structure\n";
-  pattern (i+1) ppf p;
-  list (i+1) class_field ppf l;
-
-and class_field i ppf x =
-  match x with
-  | Pcf_inher (ce, so) ->
-      printf "Pcf_inher\n";
-      class_expr (i+1) ppf ce;
-      option (i+1) string ppf so;
-  | Pcf_val (s, mf, e, loc) ->
-      line i ppf
-        "Pcf_val \"%s\" %a %a\n" s fmt_mutable_flag mf fmt_location loc;
-      expression (i+1) ppf e;
-  | Pcf_virt (s, pf, ct, loc) ->
-      line i ppf
-        "Pcf_virt \"%s\" %a %a\n" s fmt_private_flag pf fmt_location loc;
-      core_type (i+1) ppf ct;
-  | Pcf_meth (s, pf, e, loc) ->
-      line i ppf
-        "Pcf_meth \"%s\" %a %a\n" s fmt_private_flag pf fmt_location loc;
-      expression (i+1) ppf e;
-  | Pcf_cstr (ct1, ct2, loc) ->
-      line i ppf "Pcf_cstr %a\n" fmt_location loc;
-      core_type (i+1) ppf ct1;
-      core_type (i+1) ppf ct2;
-  | Pcf_let (rf, l, loc) ->
-      line i ppf "Pcf_let %a %a\n" fmt_rec_flag rf fmt_location loc;
-      list (i+1) pattern_x_expression_def ppf l;
-  | Pcf_init (e) ->
-      line i ppf "Pcf_init\n";
-      expression (i+1) ppf e;
-
-and class_declaration i ppf x =
-  line i ppf "class_declaration %a\n" fmt_location x.pci_loc;
-  let i = i+1 in
-  line i ppf "pci_virt = %a\n" fmt_virtual_flag x.pci_virt;
-  line i ppf "pci_params =\n";
-  string_list_x_location (i+1) ppf x.pci_params;
-  line i ppf "pci_name = \"%s\"\n" x.pci_name;
-  line i ppf "pci_expr =\n";
-  class_expr (i+1) ppf x.pci_expr;
-
-and module_type i ppf x =
-  line i ppf "module_type %a\n" fmt_location x.pmty_loc;
-  let i = i+1 in
-  match x.pmty_desc with
-  | Pmty_ident (li) -> line i ppf "Pmty_ident %a\n" fmt_longident li;
-  | Pmty_signature (s) ->
-      line i ppf "Pmty_signature\n";
-      signature i ppf s;
-  | Pmty_functor (s, mt1, mt2) ->
-      line i ppf "Pmty_functor \"%s\"\n" s;
-      module_type i ppf mt1;
-      module_type i ppf mt2;
-  | Pmty_with (mt, l) ->
-      line i ppf "Pmty_with\n";
-      module_type i ppf mt;
-      list i longident_x_with_constraint ppf l;
-
-and signature i ppf x = list i signature_item ppf x
-
-and signature_item i ppf x =
-  line i ppf "signature_item %a\n" fmt_location x.psig_loc;
-  let i = i+1 in
-  match x.psig_desc with
-  | Psig_value (s, vd) ->
-      line i ppf "Psig_value \"%s\"\n" s;
-      value_description i ppf vd;
-  | Psig_type (l) ->
-      line i ppf "Psig_type\n";
-      list i string_x_type_declaration ppf l;
-  | Psig_exception (s, ed) ->
-      line i ppf "Psig_exception \"%s\"\n" s;
-      exception_declaration i ppf ed;
-  | Psig_module (s, mt) ->
-      line i ppf "Psig_module \"%s\"\n" s;
-      module_type i ppf mt;
-  | Psig_recmodule decls ->
-      line i ppf "Psig_recmodule\n";
-      list i string_x_module_type ppf decls;
-  | Psig_modtype (s, md) ->
-      line i ppf "Psig_modtype \"%s\"\n" s;
-      modtype_declaration i ppf md;
-  | Psig_open (li) -> line i ppf "Psig_open %a\n" fmt_longident li;
-  | Psig_include (mt) ->
-      line i ppf "Psig_include\n";
-      module_type i ppf mt;
-  | Psig_class (l) ->
-      line i ppf "Psig_class\n";
-      list i class_description ppf l;
-  | Psig_class_type (l) ->
-      line i ppf "Psig_class_type\n";
-      list i class_type_declaration ppf l;
-
-and modtype_declaration i ppf x =
-  match x with
-  | Pmodtype_abstract -> line i ppf "Pmodtype_abstract\n";
-  | Pmodtype_manifest (mt) ->
-      line i ppf "Pmodtype_manifest\n";
-      module_type (i+1) ppf mt;
-
-and with_constraint i ppf x =
-  match x with
-  | Pwith_type (td) ->
-      line i ppf "Pwith_type\n";
-      type_declaration (i+1) ppf td;
-  | Pwith_module (li) -> line i ppf "Pwith_module %a\n" fmt_longident li;
-
-and module_expr i ppf x =
-  line i ppf "module_expr %a\n" fmt_location x.pmod_loc;
-  let i = i+1 in
-  match x.pmod_desc with
-  | Pmod_ident (li) -> line i ppf "Pmod_ident %a\n" fmt_longident li;
-  | Pmod_structure (s) ->
-      line i ppf "Pmod_structure\n";
-      structure i ppf s;
-  | Pmod_functor (s, mt, me) ->
-      line i ppf "Pmod_functor \"%s\"\n" s;
-      module_type i ppf mt;
-      module_expr i ppf me;
-  | Pmod_apply (me1, me2) ->
-      line i ppf "Pmod_apply\n";
-      module_expr i ppf me1;
-      module_expr i ppf me2;
-  | Pmod_constraint (me, mt) ->
-      line i ppf "Pmod_constraint\n";
-      module_expr i ppf me;
-      module_type i ppf mt;
-
-and structure i ppf x = list i structure_item ppf x
-
-and structure_item i ppf x =
-  line i ppf "structure_item %a\n" fmt_location x.pstr_loc;
-  let i = i+1 in
-  match x.pstr_desc with
-  | Pstr_eval (e) ->
-      line i ppf "Pstr_eval\n";
+      type_expression i ppf te;
+  | Pexpr_assert (e) ->
+      line i ppf "Pexpr_assert";
+      expression i ppf e;
+  | Pexpr_nothing ->
+      line i ppf "Pexpr_nothing\n";
+  | Pexpr_pause ->
+      line i ppf "Pexpr_pause\n";
+  | Pexpr_halt ->
+      line i ppf "Pexpr_halt\n";
+  | Pexpr_emit (e) ->
+      line i ppf "Pexpr_emit";
       expression i ppf e;
-  | Pstr_value (rf, l) ->
-      line i ppf "Pstr_value %a\n" fmt_rec_flag rf;
-      list i pattern_x_expression_def ppf l;
-  | Pstr_primitive (s, vd) ->
-      line i ppf "Pstr_primitive \"%s\"\n" s;
-      value_description i ppf vd;
-  | Pstr_type (l) ->
-      line i ppf "Pstr_type\n";
-      list i string_x_type_declaration ppf l;
-  | Pstr_exception (s, ed) ->
-      line i ppf "Pstr_exception \"%s\"\n" s;
-      exception_declaration i ppf ed;
-  | Pstr_exn_rebind (s, li) ->
-      line i ppf "Pstr_exn_rebind \"%s\" %a\n" s fmt_longident li;
-  | Pstr_module (s, me) ->
-      line i ppf "Pstr_module \"%s\"\n" s;
-      module_expr i ppf me;
-  | Pstr_recmodule bindings ->
-      line i ppf "Pstr_recmodule\n";
-      list i string_x_modtype_x_module ppf bindings;
-  | Pstr_modtype (s, mt) ->
-      line i ppf "Pstr_modtype \"%s\"\n" s;
-      module_type i ppf mt;
-  | Pstr_open (li) -> line i ppf "Pstr_open %a\n" fmt_longident li;
-  | Pstr_class (l) ->
-      line i ppf "Pstr_class\n";
-      list i class_declaration ppf l;
-  | Pstr_class_type (l) ->
-      line i ppf "Pstr_class_type\n";
-      list i class_type_declaration ppf l;
-  | Pstr_include me ->
-      line i ppf "Pstr_include";
-      module_expr i ppf me
-
-and string_x_type_declaration i ppf (s, td) =
-  string i ppf s;
-  type_declaration (i+1) ppf td;
-
-and string_x_module_type i ppf (s, mty) =
-  string i ppf s;
-  module_type (i+1) ppf mty;
-
-and string_x_modtype_x_module i ppf (s, mty, modl) =
-  string i ppf s;
-  module_type (i+1) ppf mty;
-  module_expr (i+1) ppf modl;
-
-and longident_x_with_constraint i ppf (li, wc) =
-  line i ppf "%a\n" fmt_longident li;
-  with_constraint (i+1) ppf wc;
-
-and core_type_x_core_type_x_location i ppf (ct1, ct2, l) =
-  line i ppf "<constraint> %a\n" fmt_location l;
-  core_type (i+1) ppf ct1;
-  core_type (i+1) ppf ct2;
-
-and string_x_core_type_list i ppf (s, l) =
-  string i ppf s;
-  list (i+1) core_type ppf l;
-
-and string_x_mutable_flag_x_core_type i ppf (s, mf, ct) =
-  line i ppf "\"%s\" %a\n" s fmt_mutable_flag mf;
-  core_type (i+1) ppf ct;
-
-and string_list_x_location i ppf (l, loc) =
-  line i ppf "<params> %a\n" fmt_location loc;
-  list (i+1) string ppf l;
-
-and longident_x_pattern i ppf (li, p) =
-  line i ppf "%a\n" fmt_longident li;
-  pattern (i+1) ppf p;
+  | Pexpr_emit_val (e1,e2) ->
+      line i ppf "Pexpr_emit_val\n";
+      expression i ppf e1;
+      expression i ppf e2;
+  | Pexpr_loop (e) ->
+      line i ppf "Pexpr_loop\n";
+      expression i ppf e;
+  | Pexpr_par (e1, e2) ->
+      line i ppf "Pexpr_par\n";
+      expression i ppf e1;
+      expression i ppf e2;
+  | Pexpr_merge (e1, e2) ->
+      line i ppf "Pexpr_merge\n";
+      expression i ppf e1;
+      expression i ppf e2;
+  | Pexpr_signal (l, eeo, e) ->
+      line i ppf "Pexpr_signal\n";
+      list i string_x_type_expression_option ppf l;
+      option i signal_kind_x_expression_x_expression ppf eeo;
+      expression i ppf e;
+  | Pexpr_process (e) ->
+      line i ppf "Pexpr_process\n";
+      expression i ppf e;
+  | Pexpr_run (e) ->
+      line i ppf "Pexpr_run\n";
+      expression i ppf e;
+  | Pexpr_until (e, cfg_when_opt_expr_opt_list) ->
+      line i ppf "Pexpr_until\n";
+      expression i ppf e;
+      list i (fun i ppf  (s, when_opt, expr_opt) ->
+        event_config i ppf s;
+        option i expression ppf when_opt;
+        option i expression ppf expr_opt)
+        ppf cfg_when_opt_expr_opt_list
+  | Pexpr_when (s,e) ->
+      line i ppf "Pexpr_when\n";
+      event_config i ppf s;
+      expression i ppf e;
+  | Pexpr_control (s, expr_opt, e) ->
+      line i ppf "Pexpr_control\n";
+      event_config i ppf s;
+      option i expression ppf expr_opt;
+      expression i ppf e;
+  | Pexpr_get (e) ->
+      line i ppf "Pexpr_values\n";
+      expression i ppf e;
+  | Pexpr_present (s,e1,e2) ->
+      line i ppf "Pexpr_present\n";
+      event_config i ppf s;
+      expression i ppf e1;
+      expression i ppf e2;
+  | Pexpr_await (imf,s) ->
+      line i ppf "Pexpr_await %a\n" fmt_immediate_flag imf;
+      event_config i ppf s;
+  | Pexpr_await_val (flag1, flag2, s, when_opt, e) ->
+      line i ppf "Pexpr_await_val %a %a\n"
+	fmt_immediate_flag flag1 fmt_await_kind_flag flag2;
+      event_config i ppf s;
+      option i expression ppf when_opt;
+      expression i ppf e;
+  | Pexpr_pre (k, s) ->
+      line i ppf "Pexpr_pre %a\n" fmt_pre_kind k;
+      expression i ppf s;
+  | Pexpr_last s ->
+      line i ppf "Pexpr_last\n";
+      expression i ppf s;
+  | Pexpr_default s ->
+      line i ppf "Pexpr_default\n";
+      expression i ppf s;
+
+and event_config i ppf cfg =
+  match cfg.pconf_desc with
+  | Pconf_present (e, p) ->
+      line i ppf "Pconf_present\n";
+      expression i ppf e;
+      option i pattern ppf p
+  | Pconf_and (e1,e2) ->
+      line i ppf "Pconf_and\n";
+      event_config i ppf e1;
+      event_config i ppf e2
+  | Pconf_or (e1,e2) ->
+      line i ppf "Pconf_or\n";
+      event_config i ppf e1;
+      event_config i ppf e2
 
-and pattern_x_expression_case i ppf (p, e) =
+and pattern_x_expression_option_x_expression_case i ppf (p, when_opt, e) =
   line i ppf "<case>\n";
   pattern (i+1) ppf  p;
+  option (i+1) expression ppf when_opt;
   expression (i+1) ppf e;
 
 and pattern_x_expression_def i ppf (p, e) =
@@ -636,48 +375,87 @@
   pattern (i+1) ppf p;
   expression (i+1) ppf e;
 
-and string_x_expression i ppf (s, e) =
-  line i ppf "<override> \"%s\"\n" s;
+and expression_arg  i ppf e =
+  line i ppf "<arg>\n";
   expression (i+1) ppf e;
 
-and longident_x_expression i ppf (li, e) =
-  line i ppf "%a\n" fmt_longident li;
+and ident_x_expression i ppf (li, e) =
+  line i ppf "%a\n" fmt_ident li;
   expression (i+1) ppf e;
 
-and label_x_expression i ppf (l,e) =
-  line i ppf "<label> \"%s\"\n" l;
-  expression (i+1) ppf e;
+and string_x_type_expression_option i ppf (s, teo) =
+  line i ppf "%a\n" fmt_simple s;
+  option (i+1) type_expression ppf teo;
 
-and label_x_bool_x_core_type_list i ppf x =
-  match x with
-    Rtag (l, b, ctl) ->
-      line i ppf "Rtag \"%s\" %s\n" l (string_of_bool b);
-      list (i+1) core_type ppf ctl
-  | Rinherit (ct) ->
-      line i ppf "Rinherit\n";
-      core_type (i+1) ppf ct
-;;
+and expression_x_expression i ppf (e1, e2) =
+  expression i ppf e1;
+  expression i ppf e2
 
-let rec toplevel_phrase i ppf x =
-  match x with
-  | Ptop_def (s) ->
-      line i ppf "Ptop_def\n";
-      structure (i+1) ppf s;
-  | Ptop_dir (s, da) ->
-      line i ppf "Ptop_dir \"%s\"\n" s;
-      directive_argument i ppf da;
+and signal_kind_x_expression_x_expression i ppf (kind, e1, e2) =
+  expression i ppf e1;
+  expression i ppf e2
+;;
 
-and directive_argument i ppf x =
+let rec type_declaration i ppf x =
+  line i ppf "type_declaration \n";
+  let i = i+1 in
   match x with
-  | Pdir_none -> line i ppf "Pdir_none\n"
-  | Pdir_string (s) -> line i ppf "Pdir_string \"%s\"\n" s;
-  | Pdir_int (i) -> line i ppf "Pdir_int %d\n" i;
-  | Pdir_ident (li) -> line i ppf "Pdir_ident %a\n" fmt_longident li;
-  | Pdir_bool (b) -> line i ppf "Pdir_bool %s\n" (string_of_bool b);
+  | Ptype_abstract ->
+      line i ppf "Ptype_abstract\n";
+  | Ptype_rebind (te) ->
+      line i ppf "Ptype_rebind\n";
+      type_expression i ppf te;
+  | Ptype_variant (l) ->
+      line i ppf "Ptype_variant\n";
+      list (i+1) string_x_type_expression_option ppf l;
+  | Ptype_record (l) ->
+      line i ppf "Ptype_record\n";
+      list (i+1) string_x_mutable_flag_x_type_expression ppf l;
+
+and string_x_mutable_flag_x_type_expression i ppf (s, mf, te) =
+  line i ppf "\"%a\" %a\n" fmt_simple s fmt_mutable_flag mf;
+  type_expression (i+1) ppf te
+
+and string_x_type_expression_option i ppf (s, teo) =
+  line i ppf "%a\n" fmt_simple s;
+  option (i+1) type_expression ppf teo;
 ;;
 
-let interface ppf x = list 0 signature_item ppf x;;
 
-let implementation ppf x = list 0 structure_item ppf x;;
+let rec impl_item i ppf x =
+  line i ppf "impl_item %a\n" fmt_location x.pimpl_loc;
+  let i = i+1 in
+  match x.pimpl_desc with
+  | Pimpl_expr (e) ->
+      line i ppf "Pimpl_expr\n";
+      expression i ppf e;
+  | Pimpl_let (rf, l) ->
+      line i ppf "Pimpl_let %a\n" fmt_rec_flag rf;
+      list i pattern_x_expression_def ppf l;
+  | Pimpl_signal (l, eeo) ->
+      line i ppf "Pimpl_signal\n";
+      list i string_x_type_expression_option ppf l;
+      option i signal_kind_x_expression_x_expression ppf eeo;
+  | Pimpl_type (l) ->
+      line i ppf "Pimpl_type\n";
+      list i string_x_string_list_x_type_expression_def ppf l;
+  | Pimpl_exn (s,teo) ->
+      line i ppf "Pimpl_exn %a\n" fmt_simple s;
+      option i type_expression ppf teo;
+  | Pimpl_exn_rebind (s,id) ->
+      line i ppf "Pimpl_exn_rebind %a\n" fmt_simple s;
+      ident i ppf id;
+  | Pimpl_open (s) ->
+      line i ppf "Pimpl_open %s\n" s;
+  | Pimpl_lucky (id, in_ty_list, out_ty_list, files) ->
+      line i ppf "Pimpl_lucky ... A FAIRE ...\n";
+
+
+and string_x_string_list_x_type_expression_def i ppf (s,l,td) =
+  line i ppf "<def> %a\n" fmt_simple s;
+  list (i+1) type_var ppf l;
+  type_declaration (i+1) ppf td
+
+and type_var i ppf x = line i ppf "\'%s" x
+;;
 
-let top_phrase ppf x = toplevel_phrase 0 ppf x;;
