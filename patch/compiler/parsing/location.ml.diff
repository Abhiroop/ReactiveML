--- compiler/parsing/location.ml	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/parsing/location.ml	2017-10-10 15:45:19.000000000 -0400
@@ -1,4 +1,30 @@
-(* This file was location.ml from Objective Caml *)
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: location.ml *)
+
+(* Warning: *)
+(* This file is based on the original version of location.ml *)
+(* from the Objective Caml 3.07 distribution, INRIA          *)
+
+(* first modification: 2004-05-06 *)
+(* modified by: Louis Mandel      *)
 
 (***********************************************************************)
 (*                                                                     *)
@@ -12,21 +38,15 @@
 (*                                                                     *)
 (***********************************************************************)
 
-(* $Id: location.ml,v 1.43 2003/09/03 13:24:56 doligez Exp $ *)
+(* $Id$ *)
 
 open Lexing
 
 type t = { loc_start: position; loc_end: position; loc_ghost: bool };;
 
-let none = { loc_start = dummy_pos; loc_end = dummy_pos; loc_ghost = true };;
-
-let curr lexbuf = {
-  loc_start = lexbuf.lex_start_p;
-  loc_end = lexbuf.lex_curr_p;
-  loc_ghost = false
-};;
-
 let init lexbuf fname =
+  lexbuf.lex_curr_pos <- 0;
+  lexbuf.lex_buffer_len <- 0;
   lexbuf.lex_curr_p <- {
     pos_fname = fname;
     pos_lnum = 1;
@@ -35,6 +55,19 @@
   }
 ;;
 
+let none = { loc_start = dummy_pos; loc_end = dummy_pos; loc_ghost = true };;
+
+let concat loc1 loc2 =
+  { loc_start = loc1.loc_start;
+    loc_end = loc2.loc_end;
+    loc_ghost = loc1.loc_ghost || loc2.loc_ghost; };;
+
+let curr lexbuf = {
+  loc_start = lexbuf.lex_start_p;
+  loc_end = lexbuf.lex_curr_p;
+  loc_ghost = false
+};;
+
 let symbol_rloc () = {
   loc_start = Parsing.symbol_start_pos ();
   loc_end = Parsing.symbol_end_pos ();
@@ -56,133 +89,8 @@
 let input_name = ref ""
 let input_lexbuf = ref (None : lexbuf option)
 
-(* Terminal info *)
-
-let status = ref Terminfo.Uninitialised
-
 let num_loc_lines = ref 0 (* number of lines already printed after input *)
 
-(* Highlight the location using standout mode. *)
-
-let highlight_terminfo ppf num_lines lb loc1 loc2 =
-  (* Char 0 is at offset -lb.lex_abs_pos in lb.lex_buffer. *)
-  let pos0 = -lb.lex_abs_pos in
-  (* Do nothing if the buffer does not contain the whole phrase. *)
-  if pos0 < 0 then raise Exit;
-  (* Count number of lines in phrase *)
-  let lines = ref !num_loc_lines in
-  for i = pos0 to lb.lex_buffer_len - 1 do
-    if lb.lex_buffer.[i] = '\n' then incr lines
-  done;
-  (* If too many lines, give up *)
-  if !lines >= num_lines - 2 then raise Exit;
-  (* Move cursor up that number of lines *)
-  flush stdout; Terminfo.backup !lines;
-  (* Print the input, switching to standout for the location *)
-  let bol = ref false in
-  print_string "# ";
-  for pos = 0 to lb.lex_buffer_len - pos0 - 1 do
-    if !bol then (print_string "  "; bol := false);
-    if pos = loc1.loc_start.pos_cnum || pos = loc2.loc_start.pos_cnum then
-      Terminfo.standout true;
-    if pos = loc1.loc_end.pos_cnum || pos = loc2.loc_end.pos_cnum then
-      Terminfo.standout false;
-    let c = lb.lex_buffer.[pos + pos0] in
-    print_char c;
-    bol := (c = '\n')
-  done;
-  (* Make sure standout mode is over *)
-  Terminfo.standout false;
-  (* Position cursor back to original location *)
-  Terminfo.resume !num_loc_lines;
-  flush stdout
-
-(* Highlight the location by printing it again. *)
-
-let highlight_dumb ppf lb loc =
-  (* Char 0 is at offset -lb.lex_abs_pos in lb.lex_buffer. *)
-  let pos0 = -lb.lex_abs_pos in
-  (* Do nothing if the buffer does not contain the whole phrase. *)
-  if pos0 < 0 then raise Exit;
-  let end_pos = lb.lex_buffer_len - pos0 - 1 in
-  (* Determine line numbers for the start and end points *)
-  let line_start = ref 0 and line_end = ref 0 in
-  for pos = 0 to end_pos do
-    if lb.lex_buffer.[pos + pos0] = '\n' then begin
-      if loc.loc_start.pos_cnum > pos then incr line_start;
-      if loc.loc_end.pos_cnum   > pos then incr line_end;
-    end
-  done;
-  (* Print character location (useful for Emacs) *)
-  Format.fprintf ppf "Characters %i-%i:@."
-                 loc.loc_start.pos_cnum loc.loc_end.pos_cnum;
-  (* Print the input, underlining the location *)
-  print_string "  ";
-  let line = ref 0 in
-  let pos_at_bol = ref 0 in
-  for pos = 0 to end_pos do
-    let c = lb.lex_buffer.[pos + pos0] in
-    if c <> '\n' then begin
-      if !line = !line_start && !line = !line_end then
-        (* loc is on one line: print whole line *)
-        print_char c
-      else if !line = !line_start then
-        (* first line of multiline loc: print ... before loc_start *)
-        if pos < loc.loc_start.pos_cnum
-        then print_char '.'
-        else print_char c
-      else if !line = !line_end then
-        (* last line of multiline loc: print ... after loc_end *)
-        if pos < loc.loc_end.pos_cnum
-        then print_char c
-        else print_char '.'
-      else if !line > !line_start && !line < !line_end then
-        (* intermediate line of multiline loc: print whole line *)
-        print_char c
-    end else begin
-      if !line = !line_start && !line = !line_end then begin
-        (* loc is on one line: underline location *)
-        print_string "\n  ";
-        for i = !pos_at_bol to loc.loc_start.pos_cnum - 1 do
-          print_char ' '
-        done;
-        for i = loc.loc_start.pos_cnum to loc.loc_end.pos_cnum - 1 do
-          print_char '^'
-        done
-      end;
-      if !line >= !line_start && !line <= !line_end then begin
-        print_char '\n';
-        if pos < loc.loc_end.pos_cnum then print_string "  "
-      end;
-      incr line;
-      pos_at_bol := pos + 1;
-    end
-  done
-
-(* Highlight the location using one of the supported modes. *)
-
-let rec highlight_locations ppf loc1 loc2 =
-  match !status with
-    Terminfo.Uninitialised ->
-      status := Terminfo.setup stdout; highlight_locations ppf loc1 loc2
-  | Terminfo.Bad_term ->
-      begin match !input_lexbuf with
-        None -> false
-      | Some lb ->
-          let norepeat =
-            try Sys.getenv "TERM" = "norepeat" with Not_found -> false in
-          if norepeat then false else
-            try highlight_dumb ppf lb loc1; true
-            with Exit -> false
-      end
-  | Terminfo.Good_term num_lines ->
-      begin match !input_lexbuf with
-        None -> false
-      | Some lb ->
-          try highlight_terminfo ppf num_lines lb loc1 loc2; true
-          with Exit -> false
-      end
-
 (* Print the location in some way or another *)
 
 open Format
@@ -212,15 +120,17 @@
   let (file, line, startchar) = get_pos_info loc.loc_start in
   let endchar = loc.loc_end.pos_cnum - loc.loc_start.pos_cnum + startchar in
   if file = "" then begin
-    if highlight_locations ppf loc none then () else
-      fprintf ppf "Characters %i-%i:@."
-              loc.loc_start.pos_cnum loc.loc_end.pos_cnum
+    fprintf ppf "Characters %i-%i:@."
+      loc.loc_start.pos_cnum loc.loc_end.pos_cnum
   end else begin
     fprintf ppf "%s%s%s%i" msg_file file msg_line line;
     fprintf ppf "%s%i" msg_chars startchar;
-    fprintf ppf "%s%i%s@.%s" msg_to endchar msg_colon msg_head;
+    fprintf ppf "%s%i%s@.%s" msg_to endchar msg_colon msg_head
   end
 
+(* let print_oc oc loc = *)
+(*   print (formatter_of_out_channel oc) loc *)
+
 let print_warning loc ppf w =
   if Warnings.is_active w then begin
     let printw ppf w =
