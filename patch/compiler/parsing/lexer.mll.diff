--- compiler/parsing/lexer.mll	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/parsing/lexer.mll	2017-10-10 15:45:19.000000000 -0400
@@ -1,4 +1,30 @@
-(* This file was lexer.mll from Objective Caml *)
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: lexer.mll *)
+
+(* Warning: *)
+(* This file is based on the original version of lexer.mll *)
+(* from the Objective Caml 3.07 distribution, INRIA        *)
+
+(* first modification: 2004-05-05 *)
+(* modified by: Louis Mandel      *)
 
 (***********************************************************************)
 (*                                                                     *)
@@ -12,7 +38,7 @@
 (*                                                                     *)
 (***********************************************************************)
 
-(* $Id: lexer.mll,v 1.66 2003/08/25 13:15:47 doligez Exp $ *)
+(* $Id$ *)
 
 (* The lexer definition *)
 
@@ -34,18 +60,24 @@
 
 (* The table of keywords *)
 
-let keyword_table =
-  create_hashtable 149 [
-    "and", AND;
+let keyword_table = ((Hashtbl.create 149) : (string, token) Hashtbl.t);;
+
+List.iter (fun (str,tok) -> Hashtbl.add keyword_table str tok)
+  [ "and", AND;
     "as", AS;
     "assert", ASSERT;
+    "await", AWAIT;
     "begin", BEGIN;
     "class", CLASS;
     "constraint", CONSTRAINT;
+    "control", CONTROL;
+    "default", DEFAULT;
     "do", DO;
     "done", DONE;
+    "dopar", DOPAR;
     "downto", DOWNTO;
     "else", ELSE;
+    "emit", EMIT;
     "end", END;
     "exception", EXCEPTION;
     "external", EXTERNAL;
@@ -54,32 +86,50 @@
     "fun", FUN;
     "function", FUNCTION;
     "functor", FUNCTOR;
+    "gather", GATHER;
+    "halt", HALT;
     "if", IF;
+    "immediate", IMMEDIATE;
     "in", IN;
     "include", INCLUDE;
     "inherit", INHERIT;
     "initializer", INITIALIZER;
+(*    "inout", INOUT;*)
+    "last", LAST;
     "lazy", LAZY;
     "let", LET;
+    "loop", LOOP;
     "match", MATCH;
+    "memory", MEMORY;
     "method", METHOD;
     "module", MODULE;
     "mutable", MUTABLE;
     "new", NEW;
+    "nothing", NOTHING;
     "object", OBJECT;
     "of", OF;
+    "one", ONE;
     "open", OPEN;
     "or", OR;
+(*    "out", OUT;*)
 (*  "parser", PARSER; *)
+    "pause", PAUSE;
+    "pre", PRE;
+    "present", PRESENT;
     "private", PRIVATE;
+    "proc", PROC;
+    "process", PROCESS;
     "rec", REC;
+    "run", RUN;
     "sig", SIG;
+    "signal", SIGNAL;
     "struct", STRUCT;
     "then", THEN;
     "to", TO;
     "true", TRUE;
     "try", TRY;
     "type", TYPE;
+    "until", UNTIL;
     "val", VAL;
     "virtual", VIRTUAL;
     "when", WHEN;
@@ -93,11 +143,11 @@
     "lsl", INFIXOP4("lsl");
     "lsr", INFIXOP4("lsr");
     "asr", INFIXOP4("asr")
-]
+  ]
 
 (* To buffer string literals *)
 
-let initial_string_buffer = String.create 256
+let initial_string_buffer = Bytes.create 256
 let string_buff = ref initial_string_buffer
 let string_index = ref 0
 
@@ -106,18 +156,18 @@
   string_index := 0
 
 let store_string_char c =
-  if !string_index >= String.length (!string_buff) then begin
-    let new_buff = String.create (String.length (!string_buff) * 2) in
-      String.blit (!string_buff) 0 new_buff 0 (String.length (!string_buff));
+  if !string_index >= Bytes.length (!string_buff) then begin
+    let new_buff = Bytes.create (Bytes.length (!string_buff) * 2) in
+      Bytes.blit (!string_buff) 0 new_buff 0 (Bytes.length (!string_buff));
       string_buff := new_buff
   end;
-  String.unsafe_set (!string_buff) (!string_index) c;
+  Bytes.unsafe_set (!string_buff) (!string_index) c;
   incr string_index
 
 let get_stored_string () =
-  let s = String.sub (!string_buff) 0 (!string_index) in
+  let s = Bytes.sub (!string_buff) 0 (!string_index) in
   string_buff := initial_string_buffer;
-  s
+  Bytes.to_string s
 
 (* To store the position of the beginning of a string and comment *)
 let string_start_loc = ref Location.none;;
@@ -168,19 +218,6 @@
   in
   Char.chr (val1 * 16 + val2)
 
-(* Remove underscores from float literals *)
-
-let remove_underscores s =
-  let l = String.length s in
-  let rec remove src dst =
-    if src >= l then
-      if dst >= l then s else String.sub s 0 dst
-    else
-      match s.[src] with
-        '_' -> remove (src + 1) dst
-      |  c  -> s.[dst] <- c; remove (src + 1) (dst + 1)
-  in remove 0 0
-
 (* Update the current location with file name and line number. *)
 
 let update_loc lexbuf file line absolute chars =
@@ -275,7 +312,7 @@
   | int_literal
       { INT (int_of_string(Lexing.lexeme lexbuf)) }
   | float_literal
-      { FLOAT (remove_underscores(Lexing.lexeme lexbuf)) }
+      { FLOAT (float_of_string(Lexing.lexeme lexbuf)) }
   | int_literal "l"
       { let s = Lexing.lexeme lexbuf in
         INT32 (Int32.of_string(String.sub s 0 (String.length s - 1))) }
@@ -338,6 +375,8 @@
   | "#"  { SHARP }
   | "&"  { AMPERSAND }
   | "&&" { AMPERAMPER }
+  | "\\/"{ BACKSLASHSLASH }
+  | "/\\"{ SLASHBACKSLASH }
   | "`"  { BACKQUOTE }
   | "'"  { QUOTE }
   | "("  { LPAREN }
@@ -365,6 +404,7 @@
   | "|"  { BAR }
   | "||" { BARBAR }
   | "|]" { BARRBRACKET }
+  | "|>" { BARGRATER }
   | ">"  { GREATER }
   | ">]" { GREATERRBRACKET }
   | "}"  { RBRACE }
@@ -389,7 +429,7 @@
             { INFIXOP4(Lexing.lexeme lexbuf) }
   | ['*' '/' '%'] symbolchar *
             { INFIXOP3(Lexing.lexeme lexbuf) }
-  | eof { EOF }
+  | eof     { EOF }
   | _
       { raise (Error(Illegal_character (Lexing.lexeme_char lexbuf 0),
                      Location.curr lexbuf))
