--- compiler/parsing/parser.mly	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/parsing/parser.mly	2017-10-10 15:45:19.000000000 -0400
@@ -1,4 +1,30 @@
-/* This file was parser.mly from Objective Caml */
+/**********************************************************************/
+/*                                                                    */
+/*                           ReactiveML                               */
+/*                    http://reactiveML.org                           */
+/*                    http://rml.inria.fr                             */
+/*                                                                    */
+/*                          Louis Mandel                              */
+/*                                                                    */
+/*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          */
+/*  This file is distributed under the terms of the Q Public License  */
+/*  version 1.0.                                                      */
+/*                                                                    */
+/*  ReactiveML has been done in the following labs:                   */
+/*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    */
+/*  - Verimag, CNRS Grenoble (2005-2006)                              */
+/*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  */
+/*                                                                    */
+/**********************************************************************/
+
+/* file: parser.mly */
+
+/* Warning: */
+/* This file is based on the original version of parser.mly  */
+/* from the Objective Caml 3.07 distribution, INRIA          */
+
+/* first modification: 2004-05-05 */
+/* modified by: Louis Mandel */
 
 /***********************************************************************/
 /*                                                                     */
@@ -12,42 +38,58 @@
 /*                                                                     */
 /***********************************************************************/
 
-/* $Id: parser.mly,v 1.117 2003/08/25 13:15:47 doligez Exp $ */
+/* $Id$ */
 
 /* The parser definition */
 
 %{
 open Location
 open Asttypes
-open Longident
-open Parsetree
+open Parse_ident
+open Parse_ast
 
-let mktyp d =
-  { ptyp_desc = d; ptyp_loc = symbol_rloc() }
-let mkpat d =
-  { ppat_desc = d; ppat_loc = symbol_rloc() }
-let mkexp d =
-  { pexp_desc = d; pexp_loc = symbol_rloc() }
-let mkmty d =
-  { pmty_desc = d; pmty_loc = symbol_rloc() }
-let mksig d =
-  { psig_desc = d; psig_loc = symbol_rloc() }
-let mkmod d =
-  { pmod_desc = d; pmod_loc = symbol_rloc() }
-let mkstr d =
-  { pstr_desc = d; pstr_loc = symbol_rloc() }
-let mkfield d =
-  { pfield_desc = d; pfield_loc = symbol_rloc() }
-let mkclass d =
-  { pcl_desc = d; pcl_loc = symbol_rloc() }
-let mkcty d =
-  { pcty_desc = d; pcty_loc = symbol_rloc() }
+let mkident id pos =
+  { pident_id = id;
+    pident_loc = rhs_loc pos; }
+let mkident_loc id loc =
+  { pident_id = id;
+    pident_loc = loc; }
+
+let mksimple id pos =
+  { psimple_id = id;
+    psimple_loc = rhs_loc pos; }
+let mksimple_loc id loc =
+  { psimple_id = id;
+    psimple_loc = loc; }
+
+let mkte d =
+  { pte_desc = d; pte_loc = symbol_rloc() }
+let mkpatt d =
+  { ppatt_desc = d; ppatt_loc = symbol_rloc() }
+let mkexpr d =
+  { pexpr_desc = d;
+    pexpr_loc = symbol_rloc(); }
+let mkconf d =
+  { pconf_desc = d;
+    pconf_loc = symbol_rloc(); }
+let mkimpl d =
+  { pimpl_desc = d; pimpl_loc = symbol_rloc() }
+let mkintf d =
+  { pintf_desc = d; pintf_loc = symbol_rloc() }
+
+let rec mkexpr_until body cfg_when_opt_expr_opt_list =
+  match cfg_when_opt_expr_opt_list with
+  | [] -> raise Parse_error
+  | _ :: _ ->
+      mkexpr (Pexpr_until (body, cfg_when_opt_expr_opt_list))
 
-let reloc_pat x = { x with ppat_loc = symbol_rloc () };;
-let reloc_exp x = { x with pexp_loc = symbol_rloc () };;
+let reloc_patt x = { x with ppatt_loc = symbol_rloc () };;
+let reloc_expr x = { x with pexpr_loc = symbol_rloc () };;
 
 let mkoperator name pos =
-  { pexp_desc = Pexp_ident(Lident name); pexp_loc = rhs_loc pos }
+  { pexpr_desc = Pexpr_ident (mkident (Pident name) pos);
+    pexpr_loc = rhs_loc pos; }
+
 
 (*
   Ghost expressions and patterns:
@@ -66,79 +108,72 @@
   AST node, then the location must be real; in all other cases,
   it must be ghost.
 *)
-let ghexp d = { pexp_desc = d; pexp_loc = symbol_gloc () };;
-let ghpat d = { ppat_desc = d; ppat_loc = symbol_gloc () };;
-let ghtyp d = { ptyp_desc = d; ptyp_loc = symbol_gloc () };;
+let ghexpr d = { pexpr_desc = d;
+		 pexpr_loc = symbol_gloc (); };;
+let ghpatt d = { ppatt_desc = d; ppatt_loc = symbol_gloc () };;
+let ghte d = { pte_desc = d; pte_loc = symbol_gloc () };;
+let ghimpl d = { pimpl_desc = d; pimpl_loc = symbol_gloc () };;
+
+let ghexpr_unit () = ghexpr (Pexpr_constant(Const_unit))
 
 let mkassert e =
-  match e with
-  | {pexp_desc = Pexp_construct (Lident "false", None, false) } ->
-         mkexp (Pexp_assertfalse)
-  | _ -> mkexp (Pexp_assert (e))
+  mkexpr (Pexpr_assert (e))
 ;;
 
 let mkinfix arg1 name arg2 =
-  mkexp(Pexp_apply(mkoperator name 2, ["", arg1; "", arg2]))
-
-let neg_float_string f =
-  if String.length f > 0 && f.[0] = '-'
-  then String.sub f 1 (String.length f - 1)
-  else "-" ^ f
+  mkexpr(Pexpr_apply(mkoperator name 2, [arg1; arg2]))
 
 let mkuminus name arg =
-  match name, arg.pexp_desc with
-  | "-", Pexp_constant(Const_int n) ->
-      mkexp(Pexp_constant(Const_int(-n)))
-  | "-", Pexp_constant(Const_int32 n) ->
-      mkexp(Pexp_constant(Const_int32(Int32.neg n)))
-  | "-", Pexp_constant(Const_int64 n) ->
-      mkexp(Pexp_constant(Const_int64(Int64.neg n)))
-  | "-", Pexp_constant(Const_nativeint n) ->
-      mkexp(Pexp_constant(Const_nativeint(Nativeint.neg n)))
-  | _, Pexp_constant(Const_float f) ->
-      mkexp(Pexp_constant(Const_float(neg_float_string f)))
+  match name, arg.pexpr_desc with
+  | "-", Pexpr_constant(Const_int n) ->
+      mkexpr(Pexpr_constant(Const_int(-n)))
+  | _, Pexpr_constant(Const_float f) ->
+      mkexpr(Pexpr_constant(Const_float(-. f)))
   | _ ->
-      mkexp(Pexp_apply(mkoperator ("~" ^ name) 1, ["", arg]))
+      mkexpr(Pexpr_apply(mkoperator ("~" ^ name) 1, [arg]))
 
-let rec mktailexp = function
+let rec mktailexpr = function
     [] ->
-      ghexp(Pexp_construct(Lident "[]", None, false))
+      ghexpr(Pexpr_construct( mkident_loc (Pident "[]") none, None))
   | e1 :: el ->
-      let exp_el = mktailexp el in
-      let l = {loc_start = e1.pexp_loc.loc_start;
-               loc_end = exp_el.pexp_loc.loc_end;
+      let exp_el = mktailexpr el in
+      let l = {loc_start = e1.pexpr_loc.loc_start;
+               loc_end = exp_el.pexpr_loc.loc_end;
                loc_ghost = true}
       in
-      let arg = {pexp_desc = Pexp_tuple [e1; exp_el]; pexp_loc = l} in
-      {pexp_desc = Pexp_construct(Lident "::", Some arg, false); pexp_loc = l}
+      let arg = {pexpr_desc = Pexpr_tuple [e1; exp_el];
+		 pexpr_loc = l;}
+      in
+      {pexpr_desc = Pexpr_construct(mkident_loc (Pident "::") l,
+				    Some arg);
+       pexpr_loc = l;}
 
-let rec mktailpat = function
+let rec mktailpatt = function
     [] ->
-      ghpat(Ppat_construct(Lident "[]", None, false))
+      ghpatt(Ppatt_construct(mkident_loc (Pident "[]") none, None))
   | p1 :: pl ->
-      let pat_pl = mktailpat pl in
-      let l = {loc_start = p1.ppat_loc.loc_start;
-               loc_end = pat_pl.ppat_loc.loc_end;
+      let pat_pl = mktailpatt pl in
+      let l = {loc_start = p1.ppatt_loc.loc_start;
+               loc_end = pat_pl.ppatt_loc.loc_end;
                loc_ghost = true}
       in
-      let arg = {ppat_desc = Ppat_tuple [p1; pat_pl]; ppat_loc = l} in
-      {ppat_desc = Ppat_construct(Lident "::", Some arg, false); ppat_loc = l}
-
-let ghstrexp e =
-  { pstr_desc = Pstr_eval e; pstr_loc = {e.pexp_loc with loc_ghost = true} }
+      let arg = {ppatt_desc = Ppatt_tuple [p1; pat_pl]; ppatt_loc = l} in
+      {ppatt_desc = Ppatt_construct(mkident_loc (Pident "::") l,
+				    Some arg);
+       ppatt_loc = l}
 
 let array_function str name =
-  Ldot(Lident str, (if !Clflags.fast then "unsafe_" ^ name else name))
+  mkident_loc (Pdot(str, name)) none
 
-let rec deep_mkrangepat c1 c2 =
-  if c1 = c2 then ghpat(Ppat_constant(Const_char c1)) else
-  ghpat(Ppat_or(ghpat(Ppat_constant(Const_char c1)),
-                deep_mkrangepat (Char.chr(Char.code c1 + 1)) c2))
-
-let rec mkrangepat c1 c2 =
-  if c1 > c2 then mkrangepat c2 c1 else
-  if c1 = c2 then mkpat(Ppat_constant(Const_char c1)) else
-  reloc_pat (deep_mkrangepat c1 c2)
+let rec deep_mkrangepatt c1 c2 =
+  if c1 = c2 then ghpatt(Ppatt_constant(Const_char c1)) else
+  ghpatt(Ppatt_or(ghpatt(Ppatt_constant(Const_char c1)),
+                  deep_mkrangepatt (Char.chr(Char.code c1 + 1)) c2))
+
+let rec mkrangepatt c1 c2 =
+  if c1 > c2 then mkrangepatt c2 c1 else
+  if c1 = c2 then mkpatt(Ppatt_constant(Const_char c1)) else
+  reloc_patt (deep_mkrangepatt c1 c2)
 
 let syntax_error () =
   raise Syntaxerr.Escape_error
@@ -147,156 +182,144 @@
   raise(Syntaxerr.Error(Syntaxerr.Unclosed(rhs_loc opening_num, opening_name,
                                            rhs_loc closing_num, closing_name)))
 
-let bigarray_function str name =
-  Ldot(Ldot(Lident "Bigarray", str), name)
-
-let bigarray_untuplify = function
-    { pexp_desc = Pexp_tuple explist} -> explist
-  | exp -> [exp]
-
-let bigarray_get arr arg =
-  match bigarray_untuplify arg with
-    [c1] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" "get")),
-                       ["", arr; "", c1]))
-  | [c1;c2] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" "get")),
-                       ["", arr; "", c1; "", c2]))
-  | [c1;c2;c3] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" "get")),
-                       ["", arr; "", c1; "", c2; "", c3]))
-  | coords ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
-                       ["", arr; "", ghexp(Pexp_array coords)]))
-
-let bigarray_set arr arg newval =
-  match bigarray_untuplify arg with
-    [c1] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" "set")),
-                       ["", arr; "", c1; "", newval]))
-  | [c1;c2] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" "set")),
-                       ["", arr; "", c1; "", c2; "", newval]))
-  | [c1;c2;c3] ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" "set")),
-                       ["", arr; "", c1; "", c2; "", c3; "", newval]))
-  | coords ->
-      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
-                       ["", arr;
-                        "", ghexp(Pexp_array coords);
-                        "", newval]))
 %}
 
 /* Tokens */
 
-%token AMPERAMPER
-%token AMPERSAND
-%token AND
-%token AS
-%token ASSERT
-%token BACKQUOTE
-%token BAR
-%token BARBAR
-%token BARRBRACKET
-%token BEGIN
+%token AMPERAMPER          /* "&&" */
+%token AMPERSAND           /* "&" */
+%token AND                 /* "and" */
+%token AS                  /* "as" */
+%token ASSERT              /* "assert" */
+%token AWAIT               /* "await" */
+%token BACKQUOTE           /* "`" */
+%token BACKSLASHSLASH      /* " \/ " */
+%token BAR                 /* "|" */
+%token BARBAR              /* "||" */
+%token BARRBRACKET         /* "|]" */
+%token BARGRATER           /* "|>" */
+%token BEGIN               /* "begin" */
 %token <char> CHAR
-%token CLASS
-%token COLON
-%token COLONCOLON
-%token COLONEQUAL
-%token COLONGREATER
-%token COMMA
-%token CONSTRAINT
-%token DO
-%token DONE
-%token DOT
-%token DOTDOT
-%token DOWNTO
-%token ELSE
-%token END
+%token CLASS               /* "class" */
+%token COLON               /* ":" */
+%token COLONCOLON          /* "::" */
+%token COLONEQUAL          /* ":=" */
+%token COLONGREATER        /* ":>" */
+%token COMMA               /* "," */
+%token CONSTRAINT          /* "constraint" */
+%token CONTROL             /* "control" */
+%token DEFAULT             /* "default" */
+%token DO                  /* "do" */
+%token DONE                /* "done" */
+%token DOPAR               /* "dopar" */
+%token DOT                 /* "." */
+%token DOTDOT              /* ".." */
+%token DOWNTO              /* "downto" */
+%token ELSE                /* "else" */
+%token EMIT                /* "emit" */
+%token END                 /* "end" */
 %token EOF
-%token EQUAL
-%token EXCEPTION
-%token EXTERNAL
-%token FALSE
-%token <string> FLOAT
-%token FOR
-%token FUN
-%token FUNCTION
-%token FUNCTOR
-%token GREATER
-%token GREATERRBRACE
-%token GREATERRBRACKET
-%token IF
-%token IN
-%token INCLUDE
+%token EQUAL               /* "=" */
+%token EXCEPTION           /* "exception" */
+%token EXTERNAL            /* "external" */
+%token FALSE               /* "false" */
+%token <float> FLOAT
+%token FOR                 /* "for" */
+%token FUN                 /* "fun" */
+%token FUNCTION            /* "function" */
+%token FUNCTOR             /* "functor" */
+%token GATHER              /* "gather" */
+%token GREATER             /* ">" */
+%token GREATERRBRACE       /* ">}" */
+%token GREATERRBRACKET     /* ">]" */
+%token HALT                /* "halt" */
+%token IF                  /* "if" */
+%token IMMEDIATE           /* "immediate" */
+%token IN                  /* "in" */
+%token INCLUDE             /* "include" */
 %token <string> INFIXOP0
 %token <string> INFIXOP1
 %token <string> INFIXOP2
 %token <string> INFIXOP3
 %token <string> INFIXOP4
-%token INHERIT
-%token INITIALIZER
+%token INHERIT             /* "inherit" */
+%token INITIALIZER         /* "initializer" */
+/* %token INOUT */               /* "inout" */
 %token <int> INT
 %token <int32> INT32
 %token <int64> INT64
 %token <string> LABEL
-%token LAZY
-%token LBRACE
-%token LBRACELESS
-%token LBRACKET
-%token LBRACKETBAR
-%token LBRACKETLESS
-%token LESS
-%token LESSMINUS
-%token LET
+%token LAST                /* "last" */
+%token LAZY                /* "lazy" */
+%token LBRACE              /* "{" */
+%token LBRACELESS          /* "{<" */
+%token LBRACKET            /* "[" */
+%token LBRACKETBAR         /* "[|" */
+%token LBRACKETLESS        /* "[<" */
+%token LESS                /* "<" */
+%token LESSMINUS           /* "<-" */
+%token LET                 /* "let" */
 %token <string> LIDENT
-%token LPAREN
-%token MATCH
-%token METHOD
-%token MINUS
-%token MINUSDOT
-%token MINUSGREATER
-%token MODULE
-%token MUTABLE
+%token LOOP                /* "loop" */
+%token LPAREN              /* "(" */
+%token MATCH               /* "match" */
+%token MEMORY              /* "memory" */
+%token METHOD              /* "method" */
+%token MINUS               /* "-" */
+%token MINUSDOT            /* "-." */
+%token MINUSGREATER        /* "->" */
+%token MODULE              /* "module" */
+%token MUTABLE             /* "mutable" */
 %token <nativeint> NATIVEINT
-%token NEW
-%token OBJECT
-%token OF
-%token OPEN
+%token NEW                 /* "new" */
+%token NOTHING             /* "nothing" */
+%token OBJECT              /* "object" */
+%token OF                  /* "of" */
+%token ONE                 /* "one" */
+%token OPEN                /* "open" */
 %token <string> OPTLABEL
-%token OR
+%token OR                  /* "or" */
+/* %token OUT */                 /* "out" */
 /* %token PARSER */
-%token PLUS
+%token PAUSE               /* "pause" */
+%token PLUS                /* "+" */
+%token PRE                 /* "pre" */
 %token <string> PREFIXOP
-%token PRIVATE
-%token QUESTION
-%token QUESTIONQUESTION
-%token QUOTE
-%token RBRACE
-%token RBRACKET
-%token REC
-%token RPAREN
-%token SEMI
-%token SEMISEMI
-%token SHARP
-%token SIG
-%token STAR
+%token PRESENT             /* "present" */
+%token PRIVATE             /* "private" */
+%token PROC                /* "proc"  */
+%token PROCESS             /* "process" */
+%token QUESTION            /* "?" */
+%token QUESTIONQUESTION    /* "??" */
+%token QUOTE               /* "'" */
+%token RBRACE              /* "}" */
+%token RBRACKET            /* "]" */
+%token REC                 /* "rec" */
+%token RPAREN              /* "(" */
+%token RUN                 /* "run" */
+%token SEMI                /* ";" */
+%token SEMISEMI            /* ";;" */
+%token SHARP               /* "#" */
+%token SIG                 /* "sig" */
+%token SIGNAL              /* "signal" */
+%token SLASHBACKSLASH      /* " /\ " */
+%token STAR                /* "*" */
 %token <string> STRING
-%token STRUCT
-%token THEN
-%token TILDE
-%token TO
-%token TRUE
-%token TRY
-%token TYPE
+%token STRUCT              /* "struct" */
+%token THEN                /* "then" */
+%token TILDE               /* "~" */
+%token TO                  /* "to" */
+%token TRUE                /* "true" */
+%token TRY                 /* "try" */
+%token TYPE                /* "type" */
 %token <string> UIDENT
-%token UNDERSCORE
-%token VAL
-%token VIRTUAL
-%token WHEN
-%token WHILE
-%token WITH
+%token UNDERSCORE          /* "_" */
+%token UNTIL               /* "until" */
+%token VAL                 /* "val" */
+%token VIRTUAL             /* "virtual" */
+%token WHEN                /* "when" */
+%token WHILE               /* "while" */
+%token WITH                /* "with" */
 
 /* Precedences and associativities.
 
@@ -321,10 +344,13 @@
 The precedences must be listed from low to high.
 */
 
-%nonassoc IN
+%nonassoc above_IN
+%nonassoc IN WHEN
+%nonassoc below_BARBAR
+%nonassoc BARBAR BARGRATER              /* below SEMI e; e || e*/
 %nonassoc below_SEMI
 %nonassoc SEMI                          /* below EQUAL ({lbl=...; lbl=...}) */
-%nonassoc LET                           /* above SEMI ( ...; let ... in ...) */
+%nonassoc LET SIGNAL DO DOPAR           /* above SEMI ( ...; let ... in ...) */
 %nonassoc below_WITH
 %nonassoc FUNCTION WITH                 /* below BAR  (match ... with ...) */
 %nonassoc AND             /* above WITH (module rec A: SIG with ... and ...) */
@@ -337,8 +363,9 @@
 %nonassoc below_COMMA
 %left     COMMA                         /* expr/expr_comma_list (e,e,e) */
 %right    MINUSGREATER                  /* core_type2 (t -> t -> t) */
-%right    OR BARBAR                     /* expr (e || e || e) */
-%right    AMPERSAND AMPERAMPER          /* expr (e && e && e) */
+%right    OR BACKSLASHSLASH             /* expr (e or e or e) */
+%right    AMPERSAND AMPERAMPER SLASHBACKSLASH
+                                        /* expr (e && e && e) */
 %nonassoc below_EQUAL
 %left     INFIXOP0 EQUAL LESS GREATER   /* expr (e OP e OP e) */
 %right    INFIXOP1                      /* expr (e OP e OP e) */
@@ -352,23 +379,23 @@
 %nonassoc below_SHARP
 %nonassoc SHARP                         /* simple_expr/toplevel_directive */
 %nonassoc below_DOT
+%left RUN
 %nonassoc DOT
+%nonassoc below_LPAREN
 /* Finally, the first tokens of simple_expr are above everything else. */
-%nonassoc BACKQUOTE BEGIN CHAR FALSE FLOAT INT INT32 INT64
+%nonassoc BACKQUOTE BEGIN CHAR FALSE FLOAT HALT INT INT32 INT64
           LBRACE LBRACELESS LBRACKET LBRACKETBAR LIDENT LPAREN
-          NEW NATIVEINT PREFIXOP STRING TRUE UIDENT
+          NEW NATIVEINT PREFIXOP STRING TRUE UIDENT NOTHING PAUSE LOOP
 
 
 /* Entry points */
 
 %start implementation                   /* for implementation files */
-%type <Parsetree.structure> implementation
+%type <Parse_ast.implementation> implementation
 %start interface                        /* for interface files */
-%type <Parsetree.signature> interface
-%start toplevel_phrase                  /* for interactive use */
-%type <Parsetree.toplevel_phrase> toplevel_phrase
-%start use_file                         /* for the #use directive */
-%type <Parsetree.toplevel_phrase list> use_file
+%type <Parse_ast.interface> interface
+%start interactive                      /* for interactive mode */
+%type <Parse_ast.implementation> interactive
 
 %%
 
@@ -380,128 +407,59 @@
 interface:
     signature EOF                        { List.rev $1 }
 ;
-toplevel_phrase:
-    top_structure SEMISEMI               { Ptop_def $1 }
-  | seq_expr SEMISEMI                    { Ptop_def[ghstrexp $1] }
-  | toplevel_directive SEMISEMI          { $1 }
-  | EOF                                  { raise End_of_file }
-;
-top_structure:
-    structure_item                       { [$1] }
-  | structure_item top_structure         { $1 :: $2 }
-;
-use_file:
-    use_file_tail                        { $1 }
-  | seq_expr use_file_tail               { Ptop_def[ghstrexp $1] :: $2 }
-;
-use_file_tail:
-    EOF                                         { [] }
-  | SEMISEMI EOF                                { [] }
-  | SEMISEMI seq_expr use_file_tail             { Ptop_def[ghstrexp $2] :: $3 }
-  | SEMISEMI structure_item use_file_tail       { Ptop_def[$2] :: $3 }
-  | SEMISEMI toplevel_directive use_file_tail   { $2 :: $3 }
-  | structure_item use_file_tail                { Ptop_def[$1] :: $2 }
-  | toplevel_directive use_file_tail            { $1 :: $2 }
-;
-
-/* Module expressions */
-
-module_expr:
-    mod_longident
-      { mkmod(Pmod_ident $1) }
-  | STRUCT structure END
-      { mkmod(Pmod_structure($2)) }
-  | STRUCT structure error
-      { unclosed "struct" 1 "end" 3 }
-  | FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_expr
-      { mkmod(Pmod_functor($3, $5, $8)) }
-  | module_expr LPAREN module_expr RPAREN
-      { mkmod(Pmod_apply($1, $3)) }
-  | module_expr LPAREN module_expr error
-      { unclosed "(" 2 ")" 4 }
-  | LPAREN module_expr COLON module_type RPAREN
-      { mkmod(Pmod_constraint($2, $4)) }
-  | LPAREN module_expr COLON module_type error
-      { unclosed "(" 1 ")" 5 }
-  | LPAREN module_expr RPAREN
-      { $2 }
-  | LPAREN module_expr error
-      { unclosed "(" 1 ")" 3 }
+interactive:
+    /* empty */                          { exit 0 }
+  | interactive_defs                     { $1 }
+  | seq_expr SEMISEMI                    { [ghimpl (Pimpl_expr $1)] }
 ;
+interactive_defs:
+    structure_item SEMISEMI              { [$1] }
+  | structure_item interactive_defs      {  $1 :: $2 }
+
+
+/* implementation */
+
 structure:
-    structure_tail                              { $1 }
-  | seq_expr structure_tail                     { ghstrexp $1 :: $2 }
+    structure_tail                             { $1 }
+  | seq_expr structure_tail                    { ghimpl (Pimpl_expr $1) :: $2 }
 ;
 structure_tail:
-    /* empty */                                 { [] }
-  | SEMISEMI                                    { [] }
-  | SEMISEMI seq_expr structure_tail            { ghstrexp $2 :: $3 }
-  | SEMISEMI structure_item structure_tail      { $2 :: $3 }
-  | structure_item structure_tail               { $1 :: $2 }
+    /* empty */                                { [] }
+  | SEMISEMI                                   { [] }
+  | SEMISEMI seq_expr structure_tail           { ghimpl (Pimpl_expr $2) :: $3 }
+  | SEMISEMI structure_item structure_tail     { $2 :: $3 }
+  | structure_item structure_tail              { $1 :: $2 }
 ;
 structure_item:
     LET rec_flag let_bindings
       { match $3 with
-          [{ppat_desc = Ppat_any}, exp] -> mkstr(Pstr_eval exp)
-        | _ -> mkstr(Pstr_value($2, List.rev $3)) }
-  | EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
-      { mkstr(Pstr_primitive($2, {pval_type = $3; pval_prim = $5})) }
+          [{ppatt_desc = Ppatt_any}, exp] -> mkimpl(Pimpl_expr exp)
+        | _ -> mkimpl(Pimpl_let($2, List.rev $3)) }
+  | SIGNAL signal_comma_list
+      { mkimpl(Pimpl_signal(List.rev $2, None)) }
+  | SIGNAL signal_comma_list DEFAULT par_expr GATHER par_expr
+      { mkimpl(Pimpl_signal(List.rev $2, Some(Default, $4, $6))) }
+  | SIGNAL signal_comma_list MEMORY par_expr GATHER par_expr
+      { mkimpl(Pimpl_signal(List.rev $2, Some(Memory, $4, $6))) }
   | TYPE type_declarations
-      { mkstr(Pstr_type(List.rev $2)) }
+      { mkimpl(Pimpl_type(List.rev $2)) }
   | EXCEPTION UIDENT constructor_arguments
-      { mkstr(Pstr_exception($2, $3)) }
+      { mkimpl(Pimpl_exn(mksimple $2 2, $3)) }
   | EXCEPTION UIDENT EQUAL constr_longident
-      { mkstr(Pstr_exn_rebind($2, $4)) }
-  | MODULE UIDENT module_binding
-      { mkstr(Pstr_module($2, $3)) }
-  | MODULE REC module_rec_bindings
-      { mkstr(Pstr_recmodule(List.rev $3)) }
-  | MODULE TYPE ident EQUAL module_type
-      { mkstr(Pstr_modtype($3, $5)) }
-  | OPEN mod_longident
-      { mkstr(Pstr_open $2) }
-  | CLASS class_declarations
-      { mkstr(Pstr_class (List.rev $2)) }
-  | CLASS TYPE class_type_declarations
-      { mkstr(Pstr_class_type (List.rev $3)) }
-  | INCLUDE module_expr
-      { mkstr(Pstr_include $2) }
-;
-module_binding:
-    EQUAL module_expr
-      { $2 }
-  | COLON module_type EQUAL module_expr
-      { mkmod(Pmod_constraint($4, $2)) }
-  | LPAREN UIDENT COLON module_type RPAREN module_binding
-      { mkmod(Pmod_functor($2, $4, $6)) }
-;
-module_rec_bindings:
-    module_rec_binding                            { [$1] }
-  | module_rec_bindings AND module_rec_binding    { $3 :: $1 }
-;
-module_rec_binding:
-    UIDENT COLON module_type EQUAL module_expr    { ($1, $3, $5) }
-;
-
-/* Module types */
-
-module_type:
-    mty_longident
-      { mkmty(Pmty_ident $1) }
-  | SIG signature END
-      { mkmty(Pmty_signature(List.rev $2)) }
-  | SIG signature error
-      { unclosed "sig" 1 "end" 3 }
-  | FUNCTOR LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type
-      %prec below_WITH
-      { mkmty(Pmty_functor($3, $5, $8)) }
-  | module_type WITH with_constraints
-      { mkmty(Pmty_with($1, List.rev $3)) }
-  | LPAREN module_type RPAREN
-      { $2 }
-  | LPAREN module_type error
-      { unclosed "(" 1 ")" 3 }
+      { mkimpl(Pimpl_exn_rebind(mksimple $2 2, $4)) }
+  | OPEN UIDENT
+      { mkimpl(Pimpl_open $2) }
+  | EXTERNAL DOT LIDENT LIDENT lucky_declarations lucky_declarations
+      EQUAL lucky_files
+      { match $3 with
+        | "luc" ->
+	    mkimpl(Pimpl_lucky(mksimple $4 4, List.rev $5, List.rev $6, $8))
+	| _ -> raise (Syntaxerr.Error(Syntaxerr.Other (rhs_loc 1)))
+      }
 ;
+
+/* interface */
+
 signature:
     /* empty */                                 { [] }
   | signature signature_item                    { $2 :: $1 }
@@ -509,326 +467,64 @@
 ;
 signature_item:
     VAL val_ident_colon core_type
-      { mksig(Psig_value($2, {pval_type = $3; pval_prim = []})) }
+      { mkintf(Pintf_val($2, $3)) }
   | EXTERNAL val_ident_colon core_type EQUAL primitive_declaration
-      { mksig(Psig_value($2, {pval_type = $3; pval_prim = $5})) }
+      { mkintf(Pintf_val($2, $3)) }
   | TYPE type_declarations
-      { mksig(Psig_type(List.rev $2)) }
+      { mkintf(Pintf_type(List.rev $2)) }
   | EXCEPTION UIDENT constructor_arguments
-      { mksig(Psig_exception($2, $3)) }
-  | MODULE UIDENT module_declaration
-      { mksig(Psig_module($2, $3)) }
-  | MODULE REC module_rec_declarations
-      { mksig(Psig_recmodule(List.rev $3)) }
-  | MODULE TYPE ident
-      { mksig(Psig_modtype($3, Pmodtype_abstract)) }
-  | MODULE TYPE ident EQUAL module_type
-      { mksig(Psig_modtype($3, Pmodtype_manifest $5)) }
-  | OPEN mod_longident
-      { mksig(Psig_open $2) }
-  | INCLUDE module_type
-      { mksig(Psig_include $2) }
-  | CLASS class_descriptions
-      { mksig(Psig_class (List.rev $2)) }
-  | CLASS TYPE class_type_declarations
-      { mksig(Psig_class_type (List.rev $3)) }
-;
-
-module_declaration:
-    COLON module_type
-      { $2 }
-  | LPAREN UIDENT COLON module_type RPAREN module_declaration
-      { mkmty(Pmty_functor($2, $4, $6)) }
-;
-module_rec_declarations:
-    module_rec_declaration                              { [$1] }
-  | module_rec_declarations AND module_rec_declaration  { $3 :: $1 }
-;
-module_rec_declaration:
-    UIDENT COLON module_type                            { ($1, $3) }
-;
-
-/* Class expressions */
-
-class_declarations:
-    class_declarations AND class_declaration    { $3 :: $1 }
-  | class_declaration                           { [$1] }
-;
-class_declaration:
-    virtual_flag class_type_parameters LIDENT class_fun_binding
-      { let params, variance = List.split (fst $2) in
-        {pci_virt = $1; pci_params = params, snd $2;
-         pci_name = $3; pci_expr = $4; pci_variance = variance;
-         pci_loc = symbol_rloc ()} }
-;
-class_fun_binding:
-    EQUAL class_expr
-      { $2 }
-  | COLON class_type EQUAL class_expr
-      { mkclass(Pcl_constraint($4, $2)) }
-  | labeled_simple_pattern class_fun_binding
-      { let (l,o,p) = $1 in mkclass(Pcl_fun(l, o, p, $2)) }
-;
-class_type_parameters:
-    /*empty*/                                   { [], symbol_gloc () }
-  | LBRACKET type_parameter_list RBRACKET       { List.rev $2, symbol_rloc () }
-;
-class_fun_def:
-    labeled_simple_pattern MINUSGREATER class_expr
-      { let (l,o,p) = $1 in mkclass(Pcl_fun(l, o, p, $3)) }
-  | labeled_simple_pattern class_fun_def
-      { let (l,o,p) = $1 in mkclass(Pcl_fun(l, o, p, $2)) }
-;
-class_expr:
-    class_simple_expr
-      { $1 }
-  | FUN class_fun_def
-      { $2 }
-  | class_simple_expr simple_labeled_expr_list
-      { mkclass(Pcl_apply($1, List.rev $2)) }
-  | LET rec_flag let_bindings IN class_expr
-      { mkclass(Pcl_let ($2, List.rev $3, $5)) }
-;
-class_simple_expr:
-    LBRACKET core_type_comma_list RBRACKET class_longident
-      { mkclass(Pcl_constr($4, List.rev $2)) }
-  | class_longident
-      { mkclass(Pcl_constr($1, [])) }
-  | OBJECT class_structure END
-      { mkclass(Pcl_structure($2)) }
-  | OBJECT class_structure error
-      { unclosed "class" 1 "end" 3 }
-  | LPAREN class_expr COLON class_type RPAREN
-      { mkclass(Pcl_constraint($2, $4)) }
-  | LPAREN class_expr COLON class_type error
-      { unclosed "(" 1 ")" 5 }
-  | LPAREN class_expr RPAREN
-      { $2 }
-  | LPAREN class_expr error
-      { unclosed "(" 1 ")" 3 }
-;
-class_structure:
-    class_self_pattern class_fields
-      { $1, List.rev $2 }
-;
-class_self_pattern:
-    LPAREN pattern RPAREN
-      { reloc_pat $2 }
-  | LPAREN pattern COLON core_type RPAREN
-      { mkpat(Ppat_constraint($2, $4)) }
-  | /* empty */
-      { ghpat(Ppat_any) }
-;
-class_fields:
-    /* empty */
-      { [] }
-  | class_fields INHERIT class_expr parent_binder
-      { Pcf_inher ($3, $4) :: $1 }
-  | class_fields VAL value
-      { Pcf_val $3 :: $1 }
-  | class_fields virtual_method
-      { Pcf_virt $2 :: $1 }
-  | class_fields concrete_method
-      { Pcf_meth $2 :: $1 }
-  | class_fields CONSTRAINT constrain
-      { Pcf_cstr $3 :: $1 }
-  | class_fields INITIALIZER seq_expr
-      { Pcf_init $3 :: $1 }
-;
-parent_binder:
-    AS LIDENT
-          { Some $2 }
-  | /* empty */
-          {None}
-;
-value:
-        mutable_flag label EQUAL seq_expr
-          { $2, $1, $4, symbol_rloc () }
-      | mutable_flag label type_constraint EQUAL seq_expr
-          { $2, $1, (let (t, t') = $3 in ghexp(Pexp_constraint($5, t, t'))),
-            symbol_rloc () }
-;
-virtual_method:
-    METHOD PRIVATE VIRTUAL label COLON poly_type
-      { $4, Private, $6, symbol_rloc () }
-  | METHOD VIRTUAL private_flag label COLON poly_type
-      { $4, $3, $6, symbol_rloc () }
-;
-concrete_method :
-    METHOD private_flag label strict_binding
-      { $3, $2, ghexp(Pexp_poly ($4, None)), symbol_rloc () }
-  | METHOD private_flag label COLON poly_type EQUAL seq_expr
-      { $3, $2, ghexp(Pexp_poly($7,Some $5)), symbol_rloc () }
-  | METHOD private_flag LABEL poly_type EQUAL seq_expr
-      { $3, $2, ghexp(Pexp_poly($6,Some $4)), symbol_rloc () }
-;
-
-/* Class types */
-
-class_type:
-    class_signature
-      { $1 }
-  | QUESTION LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
-      { mkcty(Pcty_fun("?" ^ $2 ,
-                       {ptyp_desc = Ptyp_constr(Lident "option", [$4]);
-                        ptyp_loc = $4.ptyp_loc},
-                       $6)) }
-  | OPTLABEL simple_core_type_or_tuple MINUSGREATER class_type
-      { mkcty(Pcty_fun("?" ^ $1 ,
-                       {ptyp_desc = Ptyp_constr(Lident "option", [$2]);
-                        ptyp_loc = $2.ptyp_loc},
-                       $4)) }
-  | LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type
-      { mkcty(Pcty_fun($1, $3, $5)) }
-  | simple_core_type_or_tuple MINUSGREATER class_type
-      { mkcty(Pcty_fun("", $1, $3)) }
-;
-class_signature:
-    LBRACKET core_type_comma_list RBRACKET clty_longident
-      { mkcty(Pcty_constr ($4, List.rev $2)) }
-  | clty_longident
-      { mkcty(Pcty_constr ($1, [])) }
-  | OBJECT class_sig_body END
-      { mkcty(Pcty_signature $2) }
-  | OBJECT class_sig_body error
-      { unclosed "sig" 1 "end" 3 }
-;
-class_sig_body:
-    class_self_type class_sig_fields
-      { $1, List.rev $2 }
-;
-class_self_type:
-    LPAREN core_type RPAREN
-      { $2 }
-  | /* empty */
-      { mktyp(Ptyp_any) }
-;
-class_sig_fields:
-    /* empty */                                 { [] }
-  | class_sig_fields INHERIT class_signature    { Pctf_inher $3 :: $1 }
-  | class_sig_fields VAL value_type             { Pctf_val   $3 :: $1 }
-  | class_sig_fields virtual_method             { Pctf_virt  $2 :: $1 }
-  | class_sig_fields method_type                { Pctf_meth  $2 :: $1 }
-  | class_sig_fields CONSTRAINT constrain       { Pctf_cstr  $3 :: $1 }
-;
-value_type:
-    mutable_flag label COLON core_type
-      { $2, $1, Some $4, symbol_rloc () }
-;
-method_type:
-    METHOD private_flag label COLON poly_type
-      { $3, $2, $5, symbol_rloc () }
-;
-constrain:
-        core_type EQUAL core_type          { $1, $3, symbol_rloc () }
-;
-class_descriptions:
-    class_descriptions AND class_description    { $3 :: $1 }
-  | class_description                           { [$1] }
-;
-class_description:
-    virtual_flag class_type_parameters LIDENT COLON class_type
-      { let params, variance = List.split (fst $2) in
-        {pci_virt = $1; pci_params = params, snd $2;
-         pci_name = $3; pci_expr = $5; pci_variance = variance;
-         pci_loc = symbol_rloc ()} }
-;
-class_type_declarations:
-    class_type_declarations AND class_type_declaration  { $3 :: $1 }
-  | class_type_declaration                              { [$1] }
-;
-class_type_declaration:
-    virtual_flag class_type_parameters LIDENT EQUAL class_signature
-      { let params, variance = List.split (fst $2) in
-        {pci_virt = $1; pci_params = params, snd $2;
-         pci_name = $3; pci_expr = $5; pci_variance = variance;
-         pci_loc = symbol_rloc ()} }
+      { mkintf(Pintf_exn(mksimple $2 2, $3)) }
+  | OPEN UIDENT
+      { mkintf(Pintf_open $2) }
 ;
 
 /* Core expressions */
 
+par_expr:
+  | seq_expr  %prec below_BARBAR  { $1}
+  | seq_expr BARBAR par_expr      { mkexpr(Pexpr_par($1, $3)) }
+  | seq_expr BARGRATER par_expr   { mkexpr(Pexpr_merge($1, $3)) }
+;
 seq_expr:
   | expr        %prec below_SEMI  { $1 }
-  | expr SEMI                     { reloc_exp $1 }
-  | expr SEMI seq_expr            { mkexp(Pexp_sequence($1, $3)) }
-;
-labeled_simple_pattern:
-    QUESTION LPAREN label_let_pattern opt_default RPAREN
-      { ("?" ^ fst $3, $4, snd $3) }
-  | QUESTION label_var
-      { ("?" ^ fst $2, None, snd $2) }
-  | OPTLABEL LPAREN let_pattern opt_default RPAREN
-      { ("?" ^ $1, $4, $3) }
-  | OPTLABEL pattern_var
-      { ("?" ^ $1, None, $2) }
-  | TILDE LPAREN label_let_pattern RPAREN
-      { (fst $3, None, snd $3) }
-  | TILDE label_var
-      { (fst $2, None, snd $2) }
-  | LABEL simple_pattern
-      { ($1, None, $2) }
-  | simple_pattern
-      { ("", None, $1) }
-;
-pattern_var:
-    LIDENT    { mkpat(Ppat_var $1) }
-;
-opt_default:
-    /* empty */                         { None }
-  | EQUAL seq_expr                      { Some $2 }
-;
-label_let_pattern:
-    label_var
-      { $1 }
-  | label_var COLON core_type
-      { let (lab, pat) = $1 in (lab, mkpat(Ppat_constraint(pat, $3))) }
-;
-label_var:
-    LIDENT    { ($1, mkpat(Ppat_var $1)) }
-;
-let_pattern:
-    pattern
-      { $1 }
-  | pattern COLON core_type
-      { mkpat(Ppat_constraint($1, $3)) }
+  | expr SEMI                     { reloc_expr $1 }
+  | expr SEMI seq_expr            { mkexpr(Pexpr_seq($1, $3)) }
 ;
 expr:
     simple_expr %prec below_SHARP
       { $1 }
-  | simple_expr simple_labeled_expr_list
-      { mkexp(Pexp_apply($1, List.rev $2)) }
-  | LET rec_flag let_bindings IN seq_expr
-      { mkexp(Pexp_let($2, List.rev $3, $5)) }
-  | LET MODULE UIDENT module_binding IN seq_expr
-      { mkexp(Pexp_letmodule($3, $4, $6)) }
+  | simple_expr simple_expr_list
+      { mkexpr(Pexpr_apply($1, List.rev $2)) }
+  | LET rec_flag let_bindings IN par_expr
+      { mkexpr(Pexpr_let($2, List.rev $3, $5)) }
   | FUNCTION opt_bar match_cases
-      { mkexp(Pexp_function("", None, List.rev $3)) }
-  | FUN labeled_simple_pattern fun_def
-      { let (l,o,p) = $2 in mkexp(Pexp_function(l, o, [p, $3])) }
-  | MATCH seq_expr WITH opt_bar match_cases
-      { mkexp(Pexp_match($2, List.rev $5)) }
-  | TRY seq_expr WITH opt_bar match_cases
-      { mkexp(Pexp_try($2, List.rev $5)) }
-  | TRY seq_expr WITH error
+      { mkexpr(Pexpr_function(List.rev $3)) }
+  | FUN simple_pattern fun_def
+      { let when_opt, expr = $3 in
+        mkexpr(Pexpr_function([$2, when_opt, expr])) }
+  | MATCH par_expr WITH opt_bar match_cases
+      { mkexpr(Pexpr_match($2, List.rev $5)) }
+  | TRY par_expr WITH opt_bar match_cases
+      { mkexpr(Pexpr_trywith($2, List.rev $5)) }
+  | TRY par_expr WITH error
       { syntax_error() }
   | expr_comma_list %prec below_COMMA
-      { mkexp(Pexp_tuple(List.rev $1)) }
-  | constr_longident simple_expr %prec below_SHARP
-      { mkexp(Pexp_construct($1, Some $2, false)) }
-  | name_tag simple_expr %prec below_SHARP
-      { mkexp(Pexp_variant($1, Some $2)) }
-  | IF seq_expr THEN expr ELSE expr
-      { mkexp(Pexp_ifthenelse($2, $4, Some $6)) }
-  | IF seq_expr THEN expr
-      { mkexp(Pexp_ifthenelse($2, $4, None)) }
-  | WHILE seq_expr DO seq_expr DONE
-      { mkexp(Pexp_while($2, $4)) }
-  | FOR val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr DONE
-      { mkexp(Pexp_for($2, $4, $6, $5, $8)) }
+      { mkexpr(Pexpr_tuple(List.rev $1)) }
+  | constr_longident simple_expr %prec prec_constr_appl /*%prec below_SHARP */
+      { mkexpr(Pexpr_construct($1, Some $2)) }
+  | IF par_expr THEN expr ELSE expr
+      { mkexpr(Pexpr_ifthenelse($2, $4, Some $6)) }
+  | IF par_expr THEN expr
+      { mkexpr(Pexpr_ifthenelse($2, $4, None)) }
+  | WHILE par_expr DO par_expr DONE
+      { mkexpr(Pexpr_while($2, $4)) }
+  | FOR val_ident EQUAL par_expr direction_flag par_expr DO par_expr DONE
+      { mkexpr(Pexpr_for($2, $4, $6, $5, $8)) }
+  | FOR val_ident EQUAL par_expr direction_flag par_expr DOPAR par_expr DONE
+      { mkexpr(Pexpr_fordopar($2, $4, $6, $5, $8)) }
   | expr COLONCOLON expr
-      { mkexp(Pexp_construct(Lident "::",
-                             Some(ghexp(Pexp_tuple[$1;$3])),
-                             false)) }
+      { mkexpr(Pexpr_construct(mkident (Pident "::") 2,
+                               Some(ghexpr(Pexpr_tuple[$1;$3])))) }
   | expr INFIXOP0 expr
       { mkinfix $1 $2 $3 }
   | expr INFIXOP1 expr
@@ -855,8 +551,6 @@
       { mkinfix $1 ">" $3 }
   | expr OR expr
       { mkinfix $1 "or" $3 }
-  | expr BARBAR expr
-      { mkinfix $1 "||" $3 }
   | expr AMPERSAND expr
       { mkinfix $1 "&" $3 }
   | expr AMPERAMPER expr
@@ -866,153 +560,329 @@
   | subtractive expr %prec prec_unary_minus
       { mkuminus $1 $2 }
   | simple_expr DOT label_longident LESSMINUS expr
-      { mkexp(Pexp_setfield($1, $3, $5)) }
-  | simple_expr DOT LPAREN seq_expr RPAREN LESSMINUS expr
-      { mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "set")),
-                         ["",$1; "",$4; "",$7])) }
-  | simple_expr DOT LBRACKET seq_expr RBRACKET LESSMINUS expr
-      { mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "set")),
-                         ["",$1; "",$4; "",$7])) }
-  | simple_expr DOT LBRACE expr RBRACE LESSMINUS expr
-      { bigarray_set $1 $4 $7 }
-  | label LESSMINUS expr
-      { mkexp(Pexp_setinstvar($1, $3)) }
+      { mkexpr(Pexpr_record_update($1, $3, $5)) }
+  | simple_expr DOT LPAREN par_expr RPAREN LESSMINUS expr
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "Array" "set")),
+                           [$1; $4; $7])) }
+  | simple_expr DOT LBRACKET par_expr RBRACKET LESSMINUS expr
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "String" "set")),
+                           [$1; $4; $7])) }
   | ASSERT simple_expr %prec below_SHARP
       { mkassert $2 }
-  | LAZY simple_expr %prec below_SHARP
-      { mkexp (Pexp_lazy ($2)) }
+  | PRE pre_expr
+      { let k,s = $2 in mkexpr(Pexpr_pre (k,s)) }
+  | LAST QUESTION simple_expr
+      { mkexpr(Pexpr_last $3) }
+  | DEFAULT QUESTION simple_expr
+      { mkexpr(Pexpr_default $3) }
+  | EMIT simple_expr
+      { mkexpr(Pexpr_emit $2 ) }
+  | EMIT simple_expr simple_expr
+      { mkexpr(Pexpr_emit_val($2, $3)) }
+  | SIGNAL signal_comma_list IN par_expr
+      { mkexpr(Pexpr_signal(List.rev $2, None, $4)) }
+  | SIGNAL signal_comma_list DEFAULT par_expr GATHER par_expr IN par_expr
+      { mkexpr(Pexpr_signal(List.rev $2, Some(Default, $4, $6), $8)) }
+  | SIGNAL signal_comma_list MEMORY par_expr GATHER par_expr IN par_expr
+      { mkexpr(Pexpr_signal(List.rev $2, Some(Memory, $4, $6), $8)) }
+  | DO par_expr UNTIL opt_bar until_cases DONE
+      { mkexpr_until $2 $5 }
+  | DO par_expr WHEN event_config DONE
+      { mkexpr(Pexpr_when($4, $2)) }
+  | CONTROL par_expr WITH event_config DONE
+      { mkexpr(Pexpr_control($4, None, $2)) }
+  | CONTROL par_expr WITH event_config WHEN par_expr DONE
+      { mkexpr(Pexpr_control($4, Some $6, $2)) }
+  | PRESENT event_config THEN expr ELSE expr
+      { mkexpr(Pexpr_present($2, $4, $6)) }
+  | PRESENT event_config THEN expr
+      { mkexpr(Pexpr_present($2, $4, ghexpr(Pexpr_nothing))) }
+  | PRESENT event_config ELSE expr
+      { mkexpr(Pexpr_present($2, ghexpr(Pexpr_nothing), $4)) }
+  | AWAIT await_flag event_config %prec above_IN
+      { if (snd $2) = One
+        then raise(Syntaxerr.Error(Syntaxerr.Other (rhs_loc 2)))
+        else mkexpr(Pexpr_await(fst $2, $3)) }
+  | AWAIT await_flag event_config IN par_expr
+      { match $2 with
+        | Immediate, All -> raise(Syntaxerr.Error(Syntaxerr.Other (rhs_loc 2)))
+	| im, k -> mkexpr(Pexpr_await_val(im, k, $3, None, $5)) }
+  | AWAIT await_flag event_config WHEN par_expr IN par_expr
+      { match $2 with
+        | Immediate, All -> raise(Syntaxerr.Error(Syntaxerr.Other (rhs_loc 2)))
+	| im, k ->
+	    mkexpr(Pexpr_await_val(im, k, $3, Some $5, $7)) }
+  | PROCESS proc_def
+      { $2 }
+  | PROC simple_pattern proc_fun_def
+      { mkexpr(Pexpr_function([$2, None, $3])) }
+  | RUN simple_expr simple_expr_list
+      { let e = mkexpr(Pexpr_apply($2, List.rev $3)) in
+        mkexpr(Pexpr_run(e)) }
+  | RUN simple_expr
+      { mkexpr(Pexpr_run($2)) }
 ;
 simple_expr:
     val_longident
-      { mkexp(Pexp_ident $1) }
+      { mkexpr(Pexpr_ident $1) }
   | constant
-      { mkexp(Pexp_constant $1) }
+      { mkexpr(Pexpr_constant $1) }
   | constr_longident %prec prec_constant_constructor
-      { mkexp(Pexp_construct($1, None, false)) }
-  | name_tag %prec prec_constant_constructor
-      { mkexp(Pexp_variant($1, None)) }
-  | LPAREN seq_expr RPAREN
-      { reloc_exp $2 }
-  | LPAREN seq_expr error
+      { mkexpr(Pexpr_construct($1, None)) }
+  | LPAREN par_expr RPAREN
+      { reloc_expr $2 }
+  | LPAREN par_expr error
       { unclosed "(" 1 ")" 3 }
-  | BEGIN seq_expr END
-      { reloc_exp $2 }
+  | BEGIN par_expr END
+      { reloc_expr $2 }
   | BEGIN END
-      { mkexp (Pexp_construct (Lident "()", None, false)) }
-  | BEGIN seq_expr error
+      { mkexpr (Pexpr_constant Const_unit) }
+  | BEGIN par_expr error
       { unclosed "begin" 1 "end" 3 }
-  | LPAREN seq_expr type_constraint RPAREN
-      { let (t, t') = $3 in mkexp(Pexp_constraint($2, t, t')) }
+  | LPAREN par_expr type_constraint RPAREN
+      { mkexpr(Pexpr_constraint($2, $3)) }
   | simple_expr DOT label_longident
-      { mkexp(Pexp_field($1, $3)) }
-  | simple_expr DOT LPAREN seq_expr RPAREN
-      { mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "Array" "get")),
-                         ["",$1; "",$4])) }
-  | simple_expr DOT LPAREN seq_expr error
+      { mkexpr(Pexpr_record_access($1, $3)) }
+  | simple_expr DOT LPAREN par_expr RPAREN
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "Array" "get")),
+                           [$1; $4])) }
+  | simple_expr DOT LPAREN par_expr error
       { unclosed "(" 3 ")" 5 }
-  | simple_expr DOT LBRACKET seq_expr RBRACKET
-      { mkexp(Pexp_apply(ghexp(Pexp_ident(array_function "String" "get")),
-                         ["",$1; "",$4])) }
-  | simple_expr DOT LBRACKET seq_expr error
+  | simple_expr DOT LBRACKET par_expr RBRACKET
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "String" "get")),
+                           [$1; $4])) }
+  | simple_expr DOT LBRACKET par_expr error
       { unclosed "[" 3 "]" 5 }
-  | simple_expr DOT LBRACE expr RBRACE
-      { bigarray_get $1 $4 }
-  | simple_expr DOT LBRACE expr_comma_list error
-      { unclosed "{" 3 "}" 5 }
   | LBRACE record_expr RBRACE
-      { let (exten, fields) = $2 in mkexp(Pexp_record(fields, exten)) }
+      { mkexpr(Pexpr_record($2)) }
   | LBRACE record_expr error
       { unclosed "{" 1 "}" 5 }
+  | LBRACE simple_expr WITH record_expr RBRACE
+      { mkexpr(Pexpr_record_with ($2, $4)) }
   | LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
-      { mkexp(Pexp_array(List.rev $2)) }
+      { mkexpr(Pexpr_array(List.rev $2)) }
   | LBRACKETBAR expr_semi_list opt_semi error
       { unclosed "[|" 1 "|]" 4 }
   | LBRACKETBAR BARRBRACKET
-      { mkexp(Pexp_array []) }
+      { mkexpr(Pexpr_array []) }
   | LBRACKET expr_semi_list opt_semi RBRACKET
-      { reloc_exp (mktailexp (List.rev $2)) }
+      { reloc_expr (mktailexpr (List.rev $2)) }
   | LBRACKET expr_semi_list opt_semi error
       { unclosed "[" 1 "]" 4 }
   | PREFIXOP simple_expr
-      { mkexp(Pexp_apply(mkoperator $1 1, ["",$2])) }
-  | NEW class_longident
-      { mkexp(Pexp_new($2)) }
-  | LBRACELESS field_expr_list opt_semi GREATERRBRACE
-      { mkexp(Pexp_override(List.rev $2)) }
-  | LBRACELESS field_expr_list opt_semi error
-      { unclosed "{<" 1 ">}" 4 }
-  | LBRACELESS GREATERRBRACE
-      { mkexp(Pexp_override []) }
-  | simple_expr SHARP label
-      { mkexp(Pexp_send($1, $3)) }
-;
-simple_labeled_expr_list:
-    labeled_simple_expr
-      { [$1] }
-  | simple_labeled_expr_list labeled_simple_expr
-      { $2 :: $1 }
-;
-labeled_simple_expr:
-    simple_expr %prec below_SHARP
-      { ("", $1) }
-  | label_expr
-      { $1 }
+      { mkexpr(Pexpr_apply(mkoperator $1 1, [$2])) }
+  | NOTHING
+      { mkexpr Pexpr_nothing }
+  | PAUSE
+      { mkexpr Pexpr_pause }
+  | HALT
+      { mkexpr Pexpr_halt }
+  | LOOP par_expr END
+      { mkexpr (Pexpr_loop $2) }
+  | SHARP ident
+      { match $2 with
+        | "suspend" ->
+	    mkexpr
+	      (Pexpr_apply
+		 (mkexpr (Pexpr_ident
+			    (mkident (Pdot("Rmltop_controller",
+					   "set_suspend")) 2)),
+		  [mkexpr (Pexpr_constant Const_unit)]))
+(* !!!!!!!!!!
+	    mkexpr
+	      (Pexpr_seq
+		 (mkexpr
+		    (Pexpr_apply
+		       (mkexpr (Pexpr_ident
+				  (mkident (Pdot("Rmltop_controller",
+						 "set_suspend")) 2)),
+			[mkexpr (Pexpr_constant Const_unit)])),
+		  mkexpr Pexpr_pause))
+!!!!!!!!!! *)
+	| _ -> raise (Syntaxerr.Error(Syntaxerr.Other (rhs_loc 2))) }
 ;
-label_expr:
-    LABEL simple_expr %prec below_SHARP
-      { ($1, $2) }
-  | TILDE label_ident
+very_simple_expr: /* simple_expr without "LPAREN expr RPAREN" */
+    val_longident
+      { mkexpr(Pexpr_ident $1) }
+  | constant
+      { mkexpr(Pexpr_constant $1) }
+  | constr_longident %prec prec_constant_constructor
+      { mkexpr(Pexpr_construct($1, None)) }
+  | BEGIN par_expr END
+      { reloc_expr $2 }
+  | BEGIN END
+      { mkexpr (Pexpr_constant Const_unit) }
+  | BEGIN par_expr error
+      { unclosed "begin" 1 "end" 3 }
+  | very_simple_expr DOT label_longident
+      { mkexpr(Pexpr_record_access($1, $3)) }
+  | very_simple_expr DOT LPAREN par_expr RPAREN
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "Array" "get")),
+                           [$1; $4])) }
+  | very_simple_expr DOT LPAREN par_expr error
+      { unclosed "(" 3 ")" 5 }
+  | very_simple_expr DOT LBRACKET par_expr RBRACKET
+      { mkexpr(Pexpr_apply(ghexpr(Pexpr_ident(array_function "String" "get")),
+                           [$1; $4])) }
+  | very_simple_expr DOT LBRACKET par_expr error
+      { unclosed "[" 3 "]" 5 }
+  | LBRACE record_expr RBRACE
+      { mkexpr(Pexpr_record($2)) }
+  | LBRACE record_expr error
+      { unclosed "{" 1 "}" 5 }
+  | LBRACE simple_expr WITH record_expr RBRACE
+      { mkexpr(Pexpr_record_with ($2, $4)) }
+  | LBRACKETBAR expr_semi_list opt_semi BARRBRACKET
+      { mkexpr(Pexpr_array(List.rev $2)) }
+  | LBRACKETBAR expr_semi_list opt_semi error
+      { unclosed "[|" 1 "|]" 4 }
+  | LBRACKETBAR BARRBRACKET
+      { mkexpr(Pexpr_array []) }
+  | LBRACKET expr_semi_list opt_semi RBRACKET
+      { reloc_expr (mktailexpr (List.rev $2)) }
+  | LBRACKET expr_semi_list opt_semi error
+      { unclosed "[" 1 "]" 4 }
+  | PREFIXOP simple_expr
+      { mkexpr(Pexpr_apply(mkoperator $1 1, [$2])) }
+  | NOTHING
+      { mkexpr Pexpr_nothing }
+  | PAUSE
+      { mkexpr Pexpr_pause }
+  | HALT
+      { mkexpr Pexpr_halt }
+  | LOOP par_expr END
+      { mkexpr (Pexpr_loop $2) }
+  | SHARP ident
+      { match $2 with
+        | "suspend" ->
+	    mkexpr
+	      (Pexpr_apply
+		 (mkexpr (Pexpr_ident
+			    (mkident (Pdot("Rmltop_controller",
+					   "set_suspend")) 2)),
+		  [mkexpr (Pexpr_constant Const_unit)]))
+(* !!!!!!!!!!
+	    mkexpr
+	      (Pexpr_seq
+		 (mkexpr
+		    (Pexpr_apply
+		       (mkexpr (Pexpr_ident
+				  (mkident (Pdot("Rmltop_controller",
+						 "set_suspend")) 2)),
+			[mkexpr (Pexpr_constant Const_unit)])),
+		  mkexpr Pexpr_pause))
+!!!!!!!!!! *)
+	| _ -> raise (Syntaxerr.Error(Syntaxerr.Other (rhs_loc 2))) }
+;
+pre_expr:
+    simple_expr
+      { Status, $1 }
+  | QUESTION simple_expr
+      { Value, $2 }
+;
+event_config:
+    very_simple_expr  %prec below_LPAREN
+      { mkconf(Pconf_present($1, None))}
+  | very_simple_expr LPAREN pattern RPAREN
+      { mkconf(Pconf_present($1, Some $3))}
+  | event_config BACKSLASHSLASH event_config
+      { mkconf(Pconf_or($1,$3)) }
+  | event_config SLASHBACKSLASH event_config
+      { mkconf(Pconf_and($1,$3)) }
+  | LPAREN event_config RPAREN
       { $2 }
-  | QUESTION label_ident
-      { ("?" ^ fst $2, snd $2) }
-  | OPTLABEL simple_expr %prec below_SHARP
-      { ("?" ^ $1, $2) }
+  | LPAREN event_config error
+      { unclosed "(" 1 ")" 3 }
 ;
-label_ident:
-    LIDENT   { ($1, mkexp(Pexp_ident(Lident $1))) }
+simple_expr_list:
+    simple_expr
+      { [$1] }
+  | simple_expr_list simple_expr
+      { $2 :: $1 }
 ;
 let_bindings:
     let_binding                                 { [$1] }
   | let_bindings AND let_binding                { $3 :: $1 }
+/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
+  | val_longident LESS pattern GREATER
+      {	[$3, { pexpr_desc = Pexpr_get (mkexpr(Pexpr_ident $1));
+	       pexpr_loc = rhs_loc 1; }] }
+/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
 ;
 let_binding:
     val_ident fun_binding
-      { ({ppat_desc = Ppat_var $1; ppat_loc = rhs_loc 1}, $2) }
-  | pattern EQUAL seq_expr
+      { ({ppatt_desc = Ppatt_var $1; ppatt_loc = rhs_loc 1}, $2) }
+  | pattern EQUAL par_expr
       { ($1, $3) }
+  | PROCESS val_ident proc_binding
+      { ({ppatt_desc = Ppatt_var $2; ppatt_loc = rhs_loc 2}, $3) }
 ;
 fun_binding:
     strict_binding
       { $1 }
-  | type_constraint EQUAL seq_expr
-      { let (t, t') = $1 in ghexp(Pexp_constraint($3, t, t')) }
+  | type_constraint EQUAL par_expr
+      { ghexpr(Pexpr_constraint($3, $1)) }
 ;
 strict_binding:
-    EQUAL seq_expr
+    EQUAL par_expr
       { $2 }
-  | labeled_simple_pattern fun_binding
-      { let (l, o, p) = $1 in ghexp(Pexp_function(l, o, [p, $2])) }
+  | simple_pattern fun_binding
+      { ghexpr(Pexpr_function([$1, None, $2])) }
+;
+proc_binding:
+    strict_proc_binding
+      { $1 }
+  | type_constraint EQUAL par_expr
+      { ghexpr(Pexpr_constraint(ghexpr(Pexpr_process($3)), $1)) }
+;
+strict_proc_binding:
+    EQUAL par_expr
+      { ghexpr(Pexpr_process($2)) }
+  | simple_pattern proc_binding
+      { ghexpr(Pexpr_function([$1, None, $2])) }
 ;
 match_cases:
-    pattern match_action                        { [$1, $2] }
-  | match_cases BAR pattern match_action        { ($3, $4) :: $1 }
+    pattern match_action
+      { let when_opt, expr = $2 in
+        [$1, when_opt, expr] }
+  | match_cases BAR pattern match_action
+      { let when_opt, expr = $4 in
+        ($3, when_opt, expr) :: $1 }
 ;
 fun_def:
     match_action                                { $1 }
-  | labeled_simple_pattern fun_def
-      { let (l,o,p) = $1 in ghexp(Pexp_function(l, o, [p, $2])) }
+  | simple_pattern fun_def
+      { let when_opt, expr = $2 in
+        when_opt, ghexpr(Pexpr_function([$1, None, expr])) }
+;
+proc_fun_def:
+    MINUSGREATER par_expr                       { mkexpr (Pexpr_process $2) }
+  | simple_pattern proc_fun_def
+      { ghexpr(Pexpr_function([$1, None, $2])) }
+;
+proc_def:
+    simple_expr                                 { mkexpr(Pexpr_process $1) }
+/*
+    MINUSGREATER par_expr                       { mkexpr(Pexpr_process $2) }
+  | simple_pattern proc_def
+      { ghexpr(Pexpr_function([$1, $2])) }
+*/
 ;
 match_action:
-    MINUSGREATER seq_expr                       { $2 }
-  | WHEN seq_expr MINUSGREATER seq_expr         { mkexp(Pexp_when($2, $4)) }
+    MINUSGREATER par_expr                       { None, $2 }
+  | WHEN par_expr MINUSGREATER par_expr         { Some $2, $4 }
+;
+until_action:
+    MINUSGREATER par_expr                       { None, $2 }
+  | WHEN par_expr                               { Some $2, ghexpr_unit() }
+  | WHEN par_expr MINUSGREATER par_expr         { Some $2, $4 }
 ;
 expr_comma_list:
     expr_comma_list COMMA expr                  { $3 :: $1 }
   | expr COMMA expr                             { [$3; $1] }
 ;
 record_expr:
-    simple_expr WITH lbl_expr_list opt_semi     { (Some $1, List.rev $3) }
-  | lbl_expr_list opt_semi                      { (None, List.rev $1) }
+    lbl_expr_list opt_semi                      { List.rev $1 }
 ;
 lbl_expr_list:
     label_longident EQUAL expr
@@ -1020,22 +890,26 @@
   | lbl_expr_list SEMI label_longident EQUAL expr
       { ($3, $5) :: $1 }
 ;
-field_expr_list:
-    label EQUAL expr
-      { [$1,$3] }
-  | field_expr_list SEMI label EQUAL expr
-      { ($3, $5) :: $1 }
-;
 expr_semi_list:
     expr                                        { [$1] }
   | expr_semi_list SEMI expr                    { $3 :: $1 }
 ;
 type_constraint:
-    COLON core_type                             { (Some $2, None) }
-  | COLON core_type COLONGREATER core_type      { (Some $2, Some $4) }
-  | COLONGREATER core_type                      { (None, Some $2) }
+    COLON core_type                             { $2 }
   | COLON error                                 { syntax_error() }
-  | COLONGREATER error                          { syntax_error() }
+;
+
+until_cases:
+    event_config                                { [$1, None, None] }
+  | until_handlers                              { List.rev $1 }
+;
+until_handlers:
+    event_config until_action
+      { let when_opt, expr = $2 in
+        [$1, when_opt, Some expr] }
+  | until_handlers BAR event_config until_action
+      { let when_opt, expr = $4 in
+        ($3, when_opt, Some expr) :: $1 }
 ;
 
 /* Patterns */
@@ -1044,54 +918,48 @@
     simple_pattern
       { $1 }
   | pattern AS val_ident
-      { mkpat(Ppat_alias($1, $3)) }
+      { mkpatt(Ppatt_alias($1, $3)) }
   | pattern_comma_list  %prec below_COMMA
-      { mkpat(Ppat_tuple(List.rev $1)) }
+      { mkpatt(Ppatt_tuple(List.rev $1)) }
   | constr_longident pattern %prec prec_constr_appl
-      { mkpat(Ppat_construct($1, Some $2, false)) }
-  | name_tag pattern %prec prec_constr_appl
-      { mkpat(Ppat_variant($1, Some $2)) }
+      { mkpatt(Ppatt_construct($1, Some $2)) }
   | pattern COLONCOLON pattern
-      { mkpat(Ppat_construct(Lident "::", Some(ghpat(Ppat_tuple[$1;$3])),
-                             false)) }
+      { mkpatt(Ppatt_construct(mkident (Pident "::") 2,
+			       Some(ghpatt(Ppatt_tuple[$1;$3])))) }
   | pattern BAR pattern
-      { mkpat(Ppat_or($1, $3)) }
+      { mkpatt(Ppatt_or($1, $3)) }
 ;
 simple_pattern:
     val_ident %prec below_EQUAL
-      { mkpat(Ppat_var $1) }
+      { mkpatt(Ppatt_var $1) }
   | UNDERSCORE
-      { mkpat(Ppat_any) }
+      { mkpatt(Ppatt_any) }
   | signed_constant
-      { mkpat(Ppat_constant $1) }
+      { mkpatt(Ppatt_constant $1) }
   | CHAR DOTDOT CHAR
-      { mkrangepat $1 $3 }
+      { mkrangepatt $1 $3 }
   | constr_longident
-      { mkpat(Ppat_construct($1, None, false)) }
-  | name_tag
-      { mkpat(Ppat_variant($1, None)) }
-  | SHARP type_longident
-      { mkpat(Ppat_type $2) }
+      { mkpatt(Ppatt_construct($1, None)) }
   | LBRACE lbl_pattern_list opt_semi RBRACE
-      { mkpat(Ppat_record(List.rev $2)) }
+      { mkpatt(Ppatt_record(List.rev $2)) }
   | LBRACE lbl_pattern_list opt_semi error
       { unclosed "{" 1 "}" 4 }
   | LBRACKET pattern_semi_list opt_semi RBRACKET
-      { reloc_pat (mktailpat (List.rev $2)) }
+      { reloc_patt (mktailpatt (List.rev $2)) }
   | LBRACKET pattern_semi_list opt_semi error
       { unclosed "[" 1 "]" 4 }
   | LBRACKETBAR pattern_semi_list opt_semi BARRBRACKET
-      { mkpat(Ppat_array(List.rev $2)) }
+      { mkpatt(Ppatt_array(List.rev $2)) }
   | LBRACKETBAR BARRBRACKET
-      { mkpat(Ppat_array []) }
+      { mkpatt(Ppatt_array []) }
   | LBRACKETBAR pattern_semi_list opt_semi error
       { unclosed "[|" 1 "|]" 4 }
   | LPAREN pattern RPAREN
-      { reloc_pat $2 }
+      { reloc_patt $2 }
   | LPAREN pattern error
       { unclosed "(" 1 ")" 3 }
   | LPAREN pattern COLON core_type RPAREN
-      { mkpat(Ppat_constraint($2, $4)) }
+      { mkpatt(Ppatt_constraint($2, $4)) }
   | LPAREN pattern COLON core_type error
       { unclosed "(" 1 ")" 5 }
 ;
@@ -1124,37 +992,20 @@
 ;
 
 type_declaration:
-    type_parameters LIDENT type_kind constraints
-      { let (params, variance) = List.split $1 in
-        let (kind, manifest) = $3 in
-        ($2, {ptype_params = params;
-              ptype_cstrs = List.rev $4;
-              ptype_kind = kind;
-              ptype_manifest = manifest;
-              ptype_variance = variance;
-              ptype_loc = symbol_rloc()}) }
-;
-constraints:
-        constraints CONSTRAINT constrain        { $3 :: $1 }
-      | /* empty */                             { [] }
+    type_parameters LIDENT type_kind
+      { (mksimple $2 2, $1, $3) }
 ;
 type_kind:
     /*empty*/
-      { (Ptype_abstract, None) }
+      { Ptype_abstract }
   | EQUAL core_type
-      { (Ptype_abstract, Some $2) }
+      { Ptype_rebind $2 }
   | EQUAL constructor_declarations
-      { (Ptype_variant(List.rev $2, Public), None) }
-  | EQUAL PRIVATE constructor_declarations
-      { (Ptype_variant(List.rev $3, Private), None) }
-  | EQUAL private_flag BAR constructor_declarations
-      { (Ptype_variant(List.rev $4, $2), None) }
-  | EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
-      { (Ptype_record(List.rev $4, $2), None) }
-  | EQUAL core_type EQUAL private_flag opt_bar constructor_declarations
-      { (Ptype_variant(List.rev $6, $4), Some $2) }
-  | EQUAL core_type EQUAL private_flag LBRACE label_declarations opt_semi RBRACE
-      { (Ptype_record(List.rev $6, $4), Some $2) }
+      { Ptype_variant(List.rev $2) }
+  | EQUAL BAR constructor_declarations
+      { Ptype_variant(List.rev $3) }
+  | EQUAL LBRACE label_declarations opt_semi RBRACE
+      { Ptype_record(List.rev $3) }
 ;
 type_parameters:
     /*empty*/                                   { [] }
@@ -1162,12 +1013,7 @@
   | LPAREN type_parameter_list RPAREN           { List.rev $2 }
 ;
 type_parameter:
-    type_variance QUOTE ident                   { $3, $1 }
-;
-type_variance:
-    /* empty */                                 { false, false }
-  | PLUS                                        { true, false }
-  | MINUS                                       { false, true }
+    QUOTE ident                                 { $2 }
 ;
 type_parameter_list:
     type_parameter                              { [$1] }
@@ -1181,152 +1027,52 @@
     constr_ident constructor_arguments          { ($1, $2) }
 ;
 constructor_arguments:
-    /*empty*/                                   { [] }
-  | OF core_type_list                           { List.rev $2 }
+    /*empty*/                                   { None }
+    | OF core_type                              { Some $2 }
 ;
 label_declarations:
     label_declaration                           { [$1] }
   | label_declarations SEMI label_declaration   { $3 :: $1 }
 ;
 label_declaration:
-    mutable_flag label COLON poly_type          { ($2, $1, $4) }
-;
-
-/* "with" constraints (additional type equations over signature components) */
-
-with_constraints:
-    with_constraint                             { [$1] }
-  | with_constraints AND with_constraint        { $3 :: $1 }
-;
-with_constraint:
-    TYPE type_parameters label_longident EQUAL core_type constraints
-      { let params, variance = List.split $2 in
-        ($3, Pwith_type {ptype_params = params;
-                         ptype_cstrs = List.rev $6;
-                         ptype_kind = Ptype_abstract;
-                         ptype_manifest = Some $5;
-                         ptype_variance = variance;
-                         ptype_loc = symbol_rloc()}) }
-    /* used label_longident instead of type_longident to disallow
-       functor applications in type path */
-  | MODULE mod_longident EQUAL mod_ext_longident
-      { ($2, Pwith_module $4) }
-;
-
-/* Polymorphic types */
-
-typevar_list:
-        QUOTE ident                             { [$2] }
-      | typevar_list QUOTE ident                { $3 :: $1 }
-;
-poly_type:
-        core_type
-          { mktyp(Ptyp_poly([], $1)) }
-      | typevar_list DOT core_type
-          { mktyp(Ptyp_poly(List.rev $1, $3)) }
+    mutable_flag label COLON core_type          { ($2, $1, $4) }
 ;
 
 /* Core types */
 
 core_type:
-    core_type2
-      { $1 }
-  | core_type2 AS QUOTE ident
-      { mktyp(Ptyp_alias($1, $4)) }
-;
-core_type2:
     simple_core_type_or_tuple
       { $1 }
-  | QUESTION LIDENT COLON core_type2 MINUSGREATER core_type2
-      { mktyp(Ptyp_arrow("?" ^ $2 ,
-               {ptyp_desc = Ptyp_constr(Lident "option", [$4]);
-                ptyp_loc = $4.ptyp_loc}, $6)) }
-  | OPTLABEL core_type2 MINUSGREATER core_type2
-      { mktyp(Ptyp_arrow("?" ^ $1 ,
-               {ptyp_desc = Ptyp_constr(Lident "option", [$2]);
-                ptyp_loc = $2.ptyp_loc}, $4)) }
-  | LIDENT COLON core_type2 MINUSGREATER core_type2
-      { mktyp(Ptyp_arrow($1, $3, $5)) }
-  | core_type2 MINUSGREATER core_type2
-      { mktyp(Ptyp_arrow("", $1, $3)) }
+  | core_type MINUSGREATER core_type
+      { mkte(Ptype_arrow($1, $3)) }
 ;
 
 simple_core_type:
-    simple_core_type2  %prec below_SHARP
-      { $1 }
-  | LPAREN core_type_comma_list RPAREN %prec below_SHARP
+    simple_core_type2
+      { $1}
+  | LPAREN core_type_comma_list RPAREN
       { match $2 with [sty] -> sty | _ -> raise Parse_error }
-;
+
 simple_core_type2:
     QUOTE ident
-      { mktyp(Ptyp_var $2) }
-  | UNDERSCORE
-      { mktyp(Ptyp_any) }
+      { mkte(Ptype_var $2) }
   | type_longident
-      { mktyp(Ptyp_constr($1, [])) }
+      { mkte(Ptype_constr($1, [])) }
   | simple_core_type2 type_longident
-      { mktyp(Ptyp_constr($2, [$1])) }
+      { mkte(Ptype_constr($2, [$1])) }
   | LPAREN core_type_comma_list RPAREN type_longident
-      { mktyp(Ptyp_constr($4, List.rev $2)) }
-  | LESS meth_list GREATER
-      { mktyp(Ptyp_object $2) }
-  | LESS GREATER
-      { mktyp(Ptyp_object []) }
-  | SHARP class_longident opt_present
-      { mktyp(Ptyp_class($2, [], $3)) }
-  | simple_core_type2 SHARP class_longident opt_present
-      { mktyp(Ptyp_class($3, [$1], $4)) }
-  | LPAREN core_type_comma_list RPAREN SHARP class_longident opt_present
-      { mktyp(Ptyp_class($5, List.rev $2, $6)) }
-  | LBRACKET tag_field RBRACKET
-      { mktyp(Ptyp_variant([$2], true, None)) }
-  | LBRACKET BAR row_field_list RBRACKET
-      { mktyp(Ptyp_variant(List.rev $3, true, None)) }
-  | LBRACKET row_field BAR row_field_list RBRACKET
-      { mktyp(Ptyp_variant($2 :: List.rev $4, true, None)) }
-  | LBRACKET GREATER opt_bar row_field_list RBRACKET
-      { mktyp(Ptyp_variant(List.rev $4, false, None)) }
-  | LBRACKET GREATER RBRACKET
-      { mktyp(Ptyp_variant([], false, None)) }
-  | LBRACKETLESS opt_bar row_field_list RBRACKET
-      { mktyp(Ptyp_variant(List.rev $3, true, Some [])) }
-  | LBRACKETLESS opt_bar row_field_list GREATER name_tag_list RBRACKET
-      { mktyp(Ptyp_variant(List.rev $3, true, Some (List.rev $5))) }
-;
-row_field_list:
-    row_field                                   { [$1] }
-  | row_field_list BAR row_field                { $3 :: $1 }
-;
-row_field:
-    tag_field                                   { $1 }
-  | simple_core_type2                           { Rinherit $1 }
-;
-tag_field:
-    name_tag OF opt_ampersand amper_type_list
-      { Rtag ($1, $3, List.rev $4) }
-  | name_tag
-      { Rtag ($1, true, []) }
-;
-opt_ampersand:
-    AMPERSAND                                   { true }
-  | /* empty */                                 { false }
-;
-amper_type_list:
-    core_type                                   { [$1] }
-  | amper_type_list AMPERSAND core_type         { $3 :: $1 }
-;
-opt_present:
-    LBRACKET GREATER name_tag_list RBRACKET     { List.rev $3 }
-  | /* empty */                                 { [] }
-;
-name_tag_list:
-    name_tag                                    { [$1] }
-  | name_tag_list name_tag                      { $2 :: $1 }
+      { mkte(Ptype_constr($4, List.rev $2)) }
+  | simple_core_type PROCESS
+      { mkte(Ptype_process ($1, Def_static.Dontknow)) }
+  | simple_core_type PROCESS PLUS
+      { mkte(Ptype_process ($1, Def_static.Noninstantaneous)) }
+  | simple_core_type PROCESS MINUS
+      { mkte(Ptype_process ($1, Def_static.Instantaneous)) }
 ;
 simple_core_type_or_tuple:
     simple_core_type                            { $1 }
   | simple_core_type STAR core_type_list
-      { mktyp(Ptyp_tuple($1 :: List.rev $3)) }
+      { mkte(Ptype_tuple($1 :: List.rev $3)) }
 ;
 core_type_comma_list:
     core_type                                   { [$1] }
@@ -1336,16 +1082,8 @@
     simple_core_type                            { [$1] }
   | core_type_list STAR simple_core_type        { $3 :: $1 }
 ;
-meth_list:
-    field SEMI meth_list                        { $1 :: $3 }
-  | field opt_semi                              { [$1] }
-  | DOTDOT                                      { [mkfield Pfield_var] }
-;
-field:
-    label COLON poly_type                       { mkfield(Pfield($1, $3)) }
-;
 label:
-    LIDENT                                      { $1 }
+    LIDENT                                      { mksimple $1 1 }
 ;
 
 /* Constants */
@@ -1355,18 +1093,16 @@
   | CHAR                                        { Const_char $1 }
   | STRING                                      { Const_string $1 }
   | FLOAT                                       { Const_float $1 }
-  | INT32                                       { Const_int32 $1 }
-  | INT64                                       { Const_int64 $1 }
-  | NATIVEINT                                   { Const_nativeint $1 }
+  | LPAREN RPAREN                               { Const_unit }
+  | FALSE                                       { Const_bool false }
+  | TRUE                                        { Const_bool true }
 ;
 signed_constant:
     constant                                    { $1 }
   | MINUS INT                                   { Const_int(- $2) }
-  | MINUS FLOAT                                 { Const_float("-" ^ $2) }
-  | MINUS INT32                                 { Const_int32(Int32.neg $2) }
-  | MINUS INT64                                 { Const_int64(Int64.neg $2) }
-  | MINUS NATIVEINT                             { Const_nativeint(Nativeint.neg $2) }
+  | MINUS FLOAT                                 { Const_float(-. $2) }
 ;
+
 /* Identifiers and long identifiers */
 
 ident:
@@ -1374,13 +1110,13 @@
   | LIDENT                                      { $1 }
 ;
 val_ident:
-    LIDENT                                      { $1 }
-  | LPAREN operator RPAREN                      { $2 }
+    LIDENT                                      { mksimple $1 1 }
+  | LPAREN operator RPAREN                      { mksimple $2 2 }
 ;
 val_ident_colon:
-    LIDENT COLON                                { $1 }
-  | LPAREN operator RPAREN COLON                { $2 }
-  | LABEL                                       { $1 }
+    LIDENT COLON                                { mksimple $1 1 }
+  | LPAREN operator RPAREN COLON                { mksimple $2 2 }
+  | LABEL                                       { mksimple $1 1 }
 ;
 operator:
     PREFIXOP                                    { $1 }
@@ -1397,77 +1133,56 @@
   | LESS                                        { "<" }
   | GREATER                                     { ">" }
   | OR                                          { "or" }
-  | BARBAR                                      { "||" }
   | AMPERSAND                                   { "&" }
   | AMPERAMPER                                  { "&&" }
   | COLONEQUAL                                  { ":=" }
 ;
 constr_ident:
-    UIDENT                                      { $1 }
+    UIDENT                                      { mksimple $1 1 }
 /*  | LBRACKET RBRACKET                           { "[]" } */
-  | LPAREN RPAREN                               { "()" }
-  | COLONCOLON                                  { "::" }
-  | FALSE                                       { "false" }
-  | TRUE                                        { "true" }
+  | COLONCOLON                                  { mksimple "::" 1 }
 ;
 
 val_longident:
-    val_ident                                   { Lident $1 }
-  | mod_longident DOT val_ident                 { Ldot($1, $3) }
+    val_ident
+      { mkident (Pident $1.psimple_id) 1 }
+  | UIDENT DOT val_ident
+      { mkident_loc (Pdot($1, $3.psimple_id)) (symbol_rloc()) }
 ;
 constr_longident:
-    mod_longident       %prec below_DOT         { $1 }
-  | LBRACKET RBRACKET                           { Lident "[]" }
-  | LPAREN RPAREN                               { Lident "()" }
-  | FALSE                                       { Lident "false" }
-  | TRUE                                        { Lident "true" }
+    UIDENT             %prec below_DOT
+      { mkident (Pident $1) 1 }
+  | UIDENT DOT UIDENT
+      { mkident_loc (Pdot($1, $3)) (symbol_rloc()) }
+  | LBRACKET RBRACKET
+      { mkident_loc (Pident "[]") (symbol_rloc()) }
 ;
 label_longident:
-    LIDENT                                      { Lident $1 }
-  | mod_longident DOT LIDENT                    { Ldot($1, $3) }
+    LIDENT
+      { mkident (Pident $1) 1 }
+  | UIDENT DOT LIDENT
+      { mkident_loc (Pdot($1, $3)) (symbol_rloc()) }
 ;
 type_longident:
-    LIDENT                                      { Lident $1 }
-  | mod_ext_longident DOT LIDENT                { Ldot($1, $3) }
+    LIDENT
+      { mkident (Pident $1) 1 }
+  | UIDENT DOT LIDENT
+      { mkident_loc (Pdot($1, $3)) (symbol_rloc()) }
 ;
-mod_longident:
-    UIDENT                                      { Lident $1 }
-  | mod_longident DOT UIDENT                    { Ldot($1, $3) }
-;
-mod_ext_longident:
-    UIDENT                                      { Lident $1 }
-  | mod_ext_longident DOT UIDENT                { Ldot($1, $3) }
-  | mod_ext_longident LPAREN mod_ext_longident RPAREN { Lapply($1, $3) }
-;
-mty_longident:
-    ident                                       { Lident $1 }
-  | mod_ext_longident DOT ident                 { Ldot($1, $3) }
-;
-clty_longident:
-    LIDENT                                      { Lident $1 }
-  | mod_ext_longident DOT LIDENT                { Ldot($1, $3) }
-;
-class_longident:
-    LIDENT                                      { Lident $1 }
-  | mod_longident DOT LIDENT                    { Ldot($1, $3) }
-;
-
-/* Toplevel directives */
-
-toplevel_directive:
-    SHARP ident                 { Ptop_dir($2, Pdir_none) }
-  | SHARP ident STRING          { Ptop_dir($2, Pdir_string $3) }
-  | SHARP ident INT             { Ptop_dir($2, Pdir_int $3) }
-  | SHARP ident val_longident   { Ptop_dir($2, Pdir_ident $3) }
-  | SHARP ident FALSE           { Ptop_dir($2, Pdir_bool false) }
-  | SHARP ident TRUE            { Ptop_dir($2, Pdir_bool true) }
+
+/* Signals */
+signal_decl:
+    LIDENT                                      { (mksimple $1 1, None) }
+  | LIDENT COLON core_type
+      { (mksimple $1 1, Some $3) }
+;
+signal_comma_list:
+    signal_decl                                 { [$1] }
+  | signal_comma_list COMMA signal_decl         { $3 :: $1}
 ;
 
 /* Miscellaneous */
 
-name_tag:
-    BACKQUOTE ident                             { $2 }
-;
 rec_flag:
     /* empty */                                 { Nonrecursive }
   | REC                                         { Recursive }
@@ -1476,18 +1191,28 @@
     TO                                          { Upto }
   | DOWNTO                                      { Downto }
 ;
-private_flag:
-    /* empty */                                 { Public }
-  | PRIVATE                                     { Private }
-;
 mutable_flag:
     /* empty */                                 { Immutable }
   | MUTABLE                                     { Mutable }
 ;
-virtual_flag:
-    /* empty */                                 { Concrete }
-  | VIRTUAL                                     { Virtual }
-;
+
+await_flag:
+    /* empty */                                 { Nonimmediate, All }
+  | IMMEDIATE                                   { Immediate, All }
+  | ONE                                         { Nonimmediate, One }
+  | IMMEDIATE ONE                               { Immediate, One }
+;
+
+/*immediate_flag:*/
+    /* empty */                  /*               { Nonimmediate }*/
+/*  | IMMEDIATE                                   { Immediate }*/
+/*;*/
+
+/*one_flag:*/
+    /* empty */                  /*               { All }*/
+/*  | ONE                                         { One }*/
+/*;*/
+
 opt_bar:
     /* empty */                                 { () }
   | BAR                                         { () }
@@ -1500,4 +1225,39 @@
   | MINUS                                       { "-" }
   | MINUSDOT                                    { "-." }
 ;
+
+/* Lucky */
+
+lucky_declarations:
+    LBRACE RBRACE                               { [] }
+  | LBRACE lucky_declarations2 opt_semi RBRACE  { $2 }
+;
+lucky_declarations2:
+    lucky_declaration                           { [$1] }
+  | lucky_declarations2 SEMI lucky_declaration  { $3 :: $1 }
+;
+lucky_declaration:
+    lucky_label COLON core_type                 { ($1, $3) }
+;
+lucky_label:
+    LIDENT                                      { mksimple $1 1 }
+  | UIDENT                                      { mksimple $1 1 }
+;
+/* string list */
+lucky_files:
+  | LBRACKET string_semi_list opt_semi RBRACKET
+      { List.rev $2 }
+  | LBRACKET string_semi_list opt_semi error
+      { unclosed "[" 1 "]" 4 }
+;
+string_semi_list:
+    constant
+      { match $1 with
+        | Const_string s -> [s]
+	| _ -> syntax_error() }
+  | string_semi_list SEMI constant
+      { match $3 with
+        | Const_string s -> s :: $1
+	| _ -> syntax_error() }
+;
 %%
