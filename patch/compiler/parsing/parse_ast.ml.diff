--- compiler/parsing/parse_ast.ml	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/parsing/parse_ast.ml	2017-10-10 15:45:19.000000000 -0400
@@ -1,169 +1,175 @@
-(* This file was syntax.ml from Caml Light *)
-
-(* The abstract syntax for the language *)
-
-#open "const";;
-#open "location";;
-#open "globals";;
-
-type type_expression =
-  { te_desc: type_expression_desc;
-    te_loc: location }
-and type_expression_desc =
-    Ztypevar of string
-  | Ztypearrow of type_expression * type_expression
-  | Ztypetuple of type_expression list
-  | Ztypeconstr of global_reference * type_expression list
-;;
-
-type pattern =
-  { p_desc: pattern_desc;
-    p_loc: location;
-    mutable p_typ: typ }
-and pattern_desc =
-    Zwildpat
-  | Zvarpat of string
-  | Zaliaspat of pattern * string
-  | Zconstantpat of atomic_constant
-  | Ztuplepat of pattern list
-  | Zconstruct0pat of constr_desc global
-  | Zconstruct1pat of constr_desc global * pattern
-  | Zorpat of pattern * pattern
-  | Zconstraintpat of pattern * type_expression
-  | Zrecordpat of (label_desc global * pattern) list
-;;
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: parse_ast.ml *)
+
+(* Warning: *)
+(* This file is based on the original version of syntax.ml *)
+(* from the CamlLight 0.75 distribution, INRIA             *)
+
+(* first modification: 2004-04-23  *)
+(* author: Louis Mandel *)
+
+(* $Id$ *)
+
+(* The abstract syntax for the parsed language *)
+
+open Asttypes
+
+type ident =
+    { pident_id: Parse_ident.t;
+      pident_loc: Location.t; }
+and simple_ident =
+    { psimple_id: string;
+      psimple_loc: Location.t; }
 
+(* Expressions *)
 type expression =
-  { e_desc: expression_desc;
-    e_loc: location;
-    mutable e_typ: typ }
+    { pexpr_desc: expression_desc;
+      pexpr_loc: Location.t; }
 and expression_desc =
-    Zident of expr_ident ref
-  | Zconstant of struct_constant
-  | Ztuple of expression list
-  | Zconstruct0 of constr_desc global
-  | Zconstruct1 of constr_desc global * expression
-  | Zapply of expression * expression list
-  | Zlet of bool * (pattern * expression) list * expression
-  | Zfunction of (pattern list * expression) list
-  | Ztrywith of expression * (pattern * expression) list
-  | Zsequence of expression * expression
-  | Zcondition of expression * expression * expression
-  | Zwhile of expression * expression
-  | Zfor of string * expression * expression * bool * expression
-  | Zconstraint of expression * type_expression
-  | Zvector of expression list
-  | Zassign of string * expression
-  | Zrecord of (label_desc global * expression) list
-  | Zrecord_access of expression * label_desc global
-  | Zrecord_update of expression * label_desc global * expression
-  | Zstream of stream_component list
-  | Zparser of (stream_pattern list * expression) list
-  | Zwhen of expression * expression
-
-and expr_ident =
-    Zglobal of value_desc global
-  | Zlocal of string
-
-and stream_component =
-    Zterm of expression
-  | Znonterm of expression
-
-and stream_pattern =
-    Ztermpat of pattern
-  | Znontermpat of expression * pattern
-  | Zstreampat of string
-;;
-
-type type_decl =
-    Zabstract_type
-  | Zvariant_type of constr_decl list
-  | Zrecord_type of (string * type_expression * mutable_flag) list
-  | Zabbrev_type of type_expression
-
-and constr_decl =
-    Zconstr0decl of string
-  | Zconstr1decl of string * type_expression * mutable_flag
-;;
-
-type directiveu =
-    Zdir of string * string
-;;
-
-type impl_phrase =
-  { im_desc: impl_desc;
-    im_loc: location }
+  | Pexpr_ident of ident
+  | Pexpr_constant of immediate
+  | Pexpr_let of rec_flag * (pattern * expression) list * expression
+  | Pexpr_function of (pattern * expression option * expression) list
+(*  | Pexpr_fun of pattern list * expression *)
+  | Pexpr_apply of expression * expression list
+  | Pexpr_tuple of expression list
+  | Pexpr_construct of ident * expression option
+  | Pexpr_array of expression list
+  | Pexpr_record of (ident * expression) list
+  | Pexpr_record_access of expression * ident
+  | Pexpr_record_with of expression * (ident * expression) list
+  | Pexpr_record_update of expression * ident * expression
+  | Pexpr_constraint of expression * type_expression
+  | Pexpr_trywith of expression * (pattern * expression option * expression)list
+  | Pexpr_assert of expression
+  | Pexpr_ifthenelse of expression * expression * expression option
+  | Pexpr_match of expression * (pattern * expression option * expression) list
+  | Pexpr_while of expression * expression
+  | Pexpr_for of
+      simple_ident * expression * expression * direction_flag * expression
+  | Pexpr_fordopar of
+      simple_ident * expression * expression * direction_flag * expression
+  | Pexpr_seq of expression * expression
+  | Pexpr_nothing
+  | Pexpr_pause
+  | Pexpr_halt
+  | Pexpr_emit of expression
+  | Pexpr_emit_val of expression * expression
+  | Pexpr_loop of expression
+  | Pexpr_par of expression * expression
+  | Pexpr_merge of expression * expression
+  | Pexpr_signal of
+      (simple_ident * type_expression option) list *
+	(signal_kind * expression * expression) option * expression
+  | Pexpr_process of expression
+  | Pexpr_run of expression
+  | Pexpr_until of
+      expression * (event_config * expression option * expression option) list
+   (* body       *  signal       * when condition    * handler *)
+  | Pexpr_when of event_config * expression
+  | Pexpr_control of event_config * expression option * expression
+                  (* signal       * when condition    * body *)
+  | Pexpr_get of expression
+  | Pexpr_present of event_config * expression * expression
+  | Pexpr_await of immediate_flag * event_config
+  | Pexpr_await_val of
+     immediate_flag * await_kind * event_config * expression option * expression
+  (* immediate?     * one?       * signal       * when condition    * body *)
+  | Pexpr_pre of pre_kind * expression
+  | Pexpr_last of expression
+  | Pexpr_default of expression
+
+(* event configuration *)
+and event_config =
+    { pconf_desc: event_config_desc;
+      pconf_loc: Location.t; }
+and event_config_desc =
+  | Pconf_present of expression * pattern option
+  | Pconf_and of event_config * event_config
+  | Pconf_or of event_config * event_config
+
+(* Patterns *)
+and pattern =
+    {ppatt_desc: pattern_desc;
+     ppatt_loc: Location.t;}
+and pattern_desc =
+  | Ppatt_any
+  | Ppatt_var of simple_ident
+  | Ppatt_alias of pattern * simple_ident
+  | Ppatt_constant of immediate
+  | Ppatt_tuple of pattern list
+  | Ppatt_construct of ident * pattern option
+  | Ppatt_or of pattern * pattern
+  | Ppatt_record of (ident * pattern) list
+  | Ppatt_array of pattern list
+  | Ppatt_constraint of pattern * type_expression
+
+(* Types *)
+and type_expression =
+    {pte_desc: type_expression_desc;
+     pte_loc: Location.t;}
+and type_expression_desc =
+  | Ptype_var of string
+  | Ptype_arrow of type_expression * type_expression
+  | Ptype_tuple of type_expression list
+  | Ptype_constr of ident * type_expression list
+  | Ptype_process of type_expression * Def_static.instantaneous
+
+and type_declaration =
+  | Ptype_abstract
+  | Ptype_rebind of type_expression
+  | Ptype_variant of (simple_ident * type_expression option) list
+  | Ptype_record of (simple_ident * mutable_flag * type_expression) list
+
+(* Structure *)
+type implementation = impl_item list
+
+and impl_item =
+  { pimpl_desc: impl_desc;
+    pimpl_loc: Location.t;}
 and impl_desc =
-    Zexpr of expression
-  | Zletdef of bool * (pattern * expression) list
-  | Ztypedef of (string * string list * type_decl) list
-  | Zexcdef of constr_decl list
-  | Zimpldirective of directiveu
-;;
-
-type intf_phrase =
-  { in_desc: intf_desc;
-    in_loc: location }
+  | Pimpl_expr of expression
+  | Pimpl_let of rec_flag * (pattern * expression) list
+  | Pimpl_signal of
+      (simple_ident * type_expression option) list *
+	(signal_kind * expression * expression) option
+  | Pimpl_type of (simple_ident * string list * type_declaration) list
+  | Pimpl_exn of simple_ident * type_expression option
+  | Pimpl_exn_rebind of simple_ident * ident
+  | Pimpl_open of string
+  | Pimpl_lucky of
+      simple_ident *
+	(simple_ident * type_expression) list * (* inputs: (id * ty) *)
+	(simple_ident * type_expression) list * (* outputs: (id * ty) *)
+	string list (* files *)
+
+(* Signature *)
+type interface = intf_item list
+
+and intf_item =
+    {pintf_desc: intf_desc;
+     pintf_loc: Location.t;}
 and intf_desc =
-    Zvaluedecl of (string * type_expression * prim_desc) list
-  | Ztypedecl of (string * string list * type_decl) list
-  | Zexcdecl of constr_decl list
-  | Zintfdirective of directiveu
-;;
-
-let rec free_vars_of_pat pat =
-  match pat.p_desc with
-    Zwildpat -> []
-  | Zvarpat v -> [v]
-  | Zaliaspat(pat,v) -> v :: free_vars_of_pat pat
-  | Zconstantpat _ -> []
-  | Ztuplepat patl -> flat_map free_vars_of_pat patl
-  | Zconstruct0pat(_) -> []
-  | Zconstruct1pat(_, pat) -> free_vars_of_pat pat
-  | Zorpat(pat1, pat2) -> free_vars_of_pat pat1 @ free_vars_of_pat pat2
-  | Zconstraintpat(pat, _) -> free_vars_of_pat pat
-  | Zrecordpat lbl_pat_list ->
-      flat_map (fun (lbl,pat) -> free_vars_of_pat pat) lbl_pat_list
-;;
-
-let rec expr_is_pure expr =
-  match expr.e_desc with
-    Zident _ -> true
-  | Zconstant _ -> true
-  | Ztuple el -> for_all expr_is_pure el
-  | Zconstruct0 cstr -> true
-  | Zconstruct1(cstr,arg) -> expr_is_pure arg
-  | Zfunction _ -> true
-  | Zconstraint(expr, ty) -> expr_is_pure expr
-  | Zvector el -> for_all expr_is_pure el
-  | Zrecord lbl_expr_list ->
-      for_all (fun (lbl,e) -> expr_is_pure e) lbl_expr_list
-  | Zparser _ -> true
-  | _ -> false
-;;
-
-let letdef_is_pure pat_expr_list =
-  for_all (fun (pat,expr) -> expr_is_pure expr) pat_expr_list
-;;
-
-let single_constructor cstr =
-  match cstr.info.cs_tag with
-    ConstrRegular(_, span) -> span == 1
-  | ConstrExtensible(_,_) -> false
-;;
-
-let rec pat_irrefutable pat =
-  match pat.p_desc with
-    Zwildpat -> true
-  | Zvarpat s -> true
-  | Zaliaspat(pat, _) -> pat_irrefutable pat
-  | Zconstantpat _ -> false
-  | Ztuplepat patl -> for_all pat_irrefutable patl
-  | Zconstruct0pat cstr -> single_constructor cstr
-  | Zconstruct1pat(cstr, pat) -> single_constructor cstr && pat_irrefutable pat
-  | Zorpat(pat1, pat2) -> pat_irrefutable pat1 || pat_irrefutable pat2
-  | Zconstraintpat(pat, _) -> pat_irrefutable pat
-  | Zrecordpat lbl_pat_list ->
-      for_all (fun (lbl, pat) -> pat_irrefutable pat) lbl_pat_list
-;;
+  | Pintf_val of simple_ident * type_expression
+  | Pintf_type of (simple_ident * string list * type_declaration) list
+  | Pintf_exn of simple_ident * type_expression option
+  | Pintf_open of string
 
