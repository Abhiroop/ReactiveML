--- compiler/reac/reac_ast.ml	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/reac/reac_ast.ml	2017-10-10 15:45:19.000000000 -0400
@@ -1,169 +1,182 @@
-(* This file was syntax.ml from Caml Light *)
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: reac_ast.ml *)
+
+(* Warning: *)
+(* This file is based on the original version of syntax.ml *)
+(* from the CamlLight 0.75 distribution, INRIA             *)
+
+(* first modification: 2004-04-23 *)
+(* modified by: Louis Mandel *)
+
+(* $Id$ *)
+
+(* The abstract syntax for the reac language *)
+
+open Asttypes
+open Def_types
 
-(* The abstract syntax for the language *)
+type ident = Ident.t
 
-#open "const";;
-#open "location";;
-#open "globals";;
+(*type global_ident = Global_ident.qualified_ident*)
+type 'a global = 'a Global.global
 
-type type_expression =
-  { te_desc: type_expression_desc;
-    te_loc: location }
-and type_expression_desc =
-    Ztypevar of string
-  | Ztypearrow of type_expression * type_expression
-  | Ztypetuple of type_expression list
-  | Ztypeconstr of global_reference * type_expression list
-;;
-
-type pattern =
-  { p_desc: pattern_desc;
-    p_loc: location;
-    mutable p_typ: typ }
-and pattern_desc =
-    Zwildpat
-  | Zvarpat of string
-  | Zaliaspat of pattern * string
-  | Zconstantpat of atomic_constant
-  | Ztuplepat of pattern list
-  | Zconstruct0pat of constr_desc global
-  | Zconstruct1pat of constr_desc global * pattern
-  | Zorpat of pattern * pattern
-  | Zconstraintpat of pattern * type_expression
-  | Zrecordpat of (label_desc global * pattern) list
-;;
+(* Expressions *)
 
+(* ML expressions *)
 type expression =
-  { e_desc: expression_desc;
-    e_loc: location;
-    mutable e_typ: typ }
+  { expr_desc: expression_desc;
+    expr_loc: Location.t;
+    mutable expr_type: Def_types.type_expression;
+    mutable expr_static: Def_static.context * Def_static.static;
+    mutable expr_reactivity: (varpatt * int) list;
+    mutable expr_reactivity_effect: Def_types.reactivity_effect; }
+
 and expression_desc =
-    Zident of expr_ident ref
-  | Zconstant of struct_constant
-  | Ztuple of expression list
-  | Zconstruct0 of constr_desc global
-  | Zconstruct1 of constr_desc global * expression
-  | Zapply of expression * expression list
-  | Zlet of bool * (pattern * expression) list * expression
-  | Zfunction of (pattern list * expression) list
-  | Ztrywith of expression * (pattern * expression) list
-  | Zsequence of expression * expression
-  | Zcondition of expression * expression * expression
-  | Zwhile of expression * expression
-  | Zfor of string * expression * expression * bool * expression
-  | Zconstraint of expression * type_expression
-  | Zvector of expression list
-  | Zassign of string * expression
-  | Zrecord of (label_desc global * expression) list
-  | Zrecord_access of expression * label_desc global
-  | Zrecord_update of expression * label_desc global * expression
-  | Zstream of stream_component list
-  | Zparser of (stream_pattern list * expression) list
-  | Zwhen of expression * expression
-
-and expr_ident =
-    Zglobal of value_desc global
-  | Zlocal of string
-
-and stream_component =
-    Zterm of expression
-  | Znonterm of expression
-
-and stream_pattern =
-    Ztermpat of pattern
-  | Znontermpat of expression * pattern
-  | Zstreampat of string
-;;
-
-type type_decl =
-    Zabstract_type
-  | Zvariant_type of constr_decl list
-  | Zrecord_type of (string * type_expression * mutable_flag) list
-  | Zabbrev_type of type_expression
-
-and constr_decl =
-    Zconstr0decl of string
-  | Zconstr1decl of string * type_expression * mutable_flag
-;;
-
-type directiveu =
-    Zdir of string * string
-;;
-
-type impl_phrase =
-  { im_desc: impl_desc;
-    im_loc: location }
+  | Rexpr_local of ident
+  | Rexpr_global of value_type_description global
+  | Rexpr_constant of immediate
+  | Rexpr_let of rec_flag * (pattern * expression) list * expression
+  | Rexpr_function of (pattern * expression option * expression) list
+  | Rexpr_apply of expression * expression list
+  | Rexpr_tuple of expression list
+  | Rexpr_construct of constructor_type_description global * expression option
+  | Rexpr_array of expression list
+  | Rexpr_record of (label_type_description global * expression) list
+  | Rexpr_record_access of expression * label_type_description global
+  | Rexpr_record_with of
+      expression * (label_type_description global * expression) list
+  | Rexpr_record_update of
+      expression * label_type_description global * expression
+  | Rexpr_constraint of expression * type_expression
+  | Rexpr_trywith of expression * (pattern * expression option * expression)list
+  | Rexpr_assert of expression
+  | Rexpr_ifthenelse of expression * expression * expression
+  | Rexpr_match of expression * (pattern * expression option * expression) list
+  | Rexpr_while of expression * expression
+  | Rexpr_for of
+      ident * expression * expression * direction_flag * expression
+  | Rexpr_seq of expression list
+  | Rexpr_process of expression
+  | Rexpr_pre of pre_kind * expression
+  | Rexpr_last of expression
+  | Rexpr_default of expression
+  | Rexpr_nothing
+  | Rexpr_pause of continue_begin_of_instant
+  | Rexpr_halt of continue_begin_of_instant
+  | Rexpr_emit of expression * expression option
+  | Rexpr_loop of expression option * expression
+  | Rexpr_fordopar of
+      ident * expression * expression * direction_flag * expression
+  | Rexpr_par of expression list
+  | Rexpr_merge of expression * expression
+  | Rexpr_signal of
+      (ident * type_expression option)
+	* (signal_kind * expression * expression) option * expression
+  | Rexpr_run of expression
+  | Rexpr_until of
+      expression * (event_config * expression option * expression option) list
+  | Rexpr_when of event_config * expression
+  | Rexpr_control of event_config * expression option * expression
+  | Rexpr_get of expression * pattern * expression
+  | Rexpr_present of event_config * expression * expression
+  | Rexpr_await of immediate_flag * event_config
+  | Rexpr_await_val of
+     immediate_flag * await_kind * event_config * expression option * expression
+
+(* event configuration *)
+and event_config =
+    { conf_desc: event_config_desc;
+      conf_loc: Location.t; }
+and event_config_desc =
+  | Rconf_present of expression * pattern option
+  | Rconf_and of event_config * event_config
+  | Rconf_or of event_config * event_config
+
+(* Patterns *)
+and pattern =
+    { patt_desc: pattern_desc;
+      patt_loc: Location.t;
+      mutable patt_type: Def_types.type_expression; }
+and pattern_desc =
+  | Rpatt_any
+  | Rpatt_var of varpatt
+  | Rpatt_alias of pattern * varpatt
+  | Rpatt_constant of immediate
+  | Rpatt_tuple of pattern list
+  | Rpatt_construct of constructor_type_description global * pattern option
+  | Rpatt_or of pattern * pattern
+  | Rpatt_record of (label_type_description global * pattern) list
+  | Rpatt_array of pattern list
+  | Rpatt_constraint of pattern * type_expression
+
+and varpatt =
+  | Varpatt_local of ident
+  | Varpatt_global of value_type_description global
+
+(* Types *)
+and type_expression =
+    { te_desc: type_expression_desc;
+      te_loc: Location.t}
+and type_expression_desc =
+    Rtype_var of string
+  | Rtype_arrow of type_expression * type_expression
+  | Rtype_product of type_expression list
+  | Rtype_constr of type_description global * type_expression list
+  | Rtype_process of type_expression * Def_static.instantaneous
+
+and type_declaration =
+  | Rtype_abstract
+  | Rtype_rebind of type_expression
+  | Rtype_variant of
+      (constructor_type_description global * type_expression option) list
+  | Rtype_record of
+      (label_type_description global * mutable_flag * type_expression) list
+
+(* Structure *)
+type impl_item =
+  { impl_desc: impl_desc;
+    impl_loc: Location.t;}
 and impl_desc =
-    Zexpr of expression
-  | Zletdef of bool * (pattern * expression) list
-  | Ztypedef of (string * string list * type_decl) list
-  | Zexcdef of constr_decl list
-  | Zimpldirective of directiveu
-;;
-
-type intf_phrase =
-  { in_desc: intf_desc;
-    in_loc: location }
+  | Rimpl_expr of expression
+  | Rimpl_let of rec_flag * (pattern * expression) list
+  | Rimpl_signal of
+      ((value_type_description global * type_expression option)
+	 * (signal_kind * expression * expression) option) list
+  | Rimpl_type of
+      (type_description global * string list * type_declaration) list
+  | Rimpl_exn of
+      constructor_type_description global * type_expression option
+  | Rimpl_exn_rebind of
+      constructor_type_description global * constructor_type_description global
+  | Rimpl_open of string
+
+(* Signature *)
+type intf_item =
+    {intf_desc: intf_desc;
+     intf_loc: Location.t;}
 and intf_desc =
-    Zvaluedecl of (string * type_expression * prim_desc) list
-  | Ztypedecl of (string * string list * type_decl) list
-  | Zexcdecl of constr_decl list
-  | Zintfdirective of directiveu
-;;
-
-let rec free_vars_of_pat pat =
-  match pat.p_desc with
-    Zwildpat -> []
-  | Zvarpat v -> [v]
-  | Zaliaspat(pat,v) -> v :: free_vars_of_pat pat
-  | Zconstantpat _ -> []
-  | Ztuplepat patl -> flat_map free_vars_of_pat patl
-  | Zconstruct0pat(_) -> []
-  | Zconstruct1pat(_, pat) -> free_vars_of_pat pat
-  | Zorpat(pat1, pat2) -> free_vars_of_pat pat1 @ free_vars_of_pat pat2
-  | Zconstraintpat(pat, _) -> free_vars_of_pat pat
-  | Zrecordpat lbl_pat_list ->
-      flat_map (fun (lbl,pat) -> free_vars_of_pat pat) lbl_pat_list
-;;
-
-let rec expr_is_pure expr =
-  match expr.e_desc with
-    Zident _ -> true
-  | Zconstant _ -> true
-  | Ztuple el -> for_all expr_is_pure el
-  | Zconstruct0 cstr -> true
-  | Zconstruct1(cstr,arg) -> expr_is_pure arg
-  | Zfunction _ -> true
-  | Zconstraint(expr, ty) -> expr_is_pure expr
-  | Zvector el -> for_all expr_is_pure el
-  | Zrecord lbl_expr_list ->
-      for_all (fun (lbl,e) -> expr_is_pure e) lbl_expr_list
-  | Zparser _ -> true
-  | _ -> false
-;;
-
-let letdef_is_pure pat_expr_list =
-  for_all (fun (pat,expr) -> expr_is_pure expr) pat_expr_list
-;;
-
-let single_constructor cstr =
-  match cstr.info.cs_tag with
-    ConstrRegular(_, span) -> span == 1
-  | ConstrExtensible(_,_) -> false
-;;
-
-let rec pat_irrefutable pat =
-  match pat.p_desc with
-    Zwildpat -> true
-  | Zvarpat s -> true
-  | Zaliaspat(pat, _) -> pat_irrefutable pat
-  | Zconstantpat _ -> false
-  | Ztuplepat patl -> for_all pat_irrefutable patl
-  | Zconstruct0pat cstr -> single_constructor cstr
-  | Zconstruct1pat(cstr, pat) -> single_constructor cstr && pat_irrefutable pat
-  | Zorpat(pat1, pat2) -> pat_irrefutable pat1 || pat_irrefutable pat2
-  | Zconstraintpat(pat, _) -> pat_irrefutable pat
-  | Zrecordpat lbl_pat_list ->
-      for_all (fun (lbl, pat) -> pat_irrefutable pat) lbl_pat_list
-;;
+  | Rintf_val of value_type_description global * type_expression
+  | Rintf_type of
+      (type_description global * string list * type_declaration) list
+  | Rintf_exn of
+      constructor_type_description global * type_expression option
+  | Rintf_open of string
 
