--- compiler/global/global.ml	2017-10-10 15:45:19.000000000 -0400
+++ ../compiler/global/global.ml	2017-10-10 15:45:19.000000000 -0400
@@ -1,107 +1,48 @@
-(* This file was globals.ml from Caml Light *)
+(**********************************************************************)
+(*                                                                    *)
+(*                           ReactiveML                               *)
+(*                    http://reactiveML.org                           *)
+(*                    http://rml.inria.fr                             *)
+(*                                                                    *)
+(*                          Louis Mandel                              *)
+(*                                                                    *)
+(*  Copyright 2002, 2007 Louis Mandel.  All rights reserved.          *)
+(*  This file is distributed under the terms of the Q Public License  *)
+(*  version 1.0.                                                      *)
+(*                                                                    *)
+(*  ReactiveML has been done in the following labs:                   *)
+(*  - theme SPI, Laboratoire d'Informatique de Paris 6 (2002-2005)    *)
+(*  - Verimag, CNRS Grenoble (2005-2006)                              *)
+(*  - projet Moscova, INRIA Rocquencourt (2006-2007)                  *)
+(*                                                                    *)
+(**********************************************************************)
+
+(* file: global.ml *)
+
+(* Warning: *)
+(* This file is based on the original version of globals.ml *)
+(* from the CamlLight 0.75 distribution, INRIA              *)
 
-(* Global symbol tables *)
+(* first modification: 2004-04-23 *)
+(* modified by: Louis Mandel      *)
 
-#open "const";;
-#open "prim";;
+(* $Id$ *)
 
-(* A reference to a global, in a source file, is either a qualified identifier
-   mod__name, or an unqualified identifier name. *)
+open Misc
 
-type global_reference =
-    GRname of string
-  | GRmodname of qualified_ident
-;;
-
-(* Internally, a global is represented by its fully qualified name,
-   plus associated information. *)
+(* values in the symbol table *)
 
 type 'a global =
-  { qualid: qualified_ident; (* Full name *)
-    info: 'a }               (* Description *)
-;;
-
-let little_name_of_global g = g.qualid.id
-;;
-
-(* Type constructors *)
-
-type type_constr =
-  { mutable ty_stamp: int;              (* Stamp *)
-    mutable ty_abbr: type_abbrev }      (* Abbreviation or not *)
-
-and type_abbrev =
-    Tnotabbrev
-  | Tabbrev of typ list * typ           (* Parameters and body *)
-
-(* Type expressions *)
-
-and typ =
-  { typ_desc: typ_desc;                 (* What kind of type expression? *)
-    mutable typ_level: int }            (* Binding level *)
-and typ_desc =
-    Tvar of mutable typ_link            (* A type variable *)
-  | Tarrow of typ * typ                 (* A function type *)
-  | Tproduct of typ list                (* A tuple type *)
-  | Tconstr of type_constr global * typ list  (* A constructed type *)
-and typ_link =
-    Tnolink                             (* Free variable *)
-  | Tlinkto of typ                      (* Instantiated variable *)
-;;
-
-(* Type constructor descriptions *)
-
-type type_desc =
-  { ty_constr: type_constr global;      (* The constructor *)
-    ty_arity: int;                      (* Its arity *)
-    mutable ty_desc: type_components }  (* Its description *)
-
-and type_components =
-    Abstract_type
-  | Variant_type of constr_desc global list (* Sum type -> list of constr. *)
-  | Record_type of label_desc global list (* Record type -> list of labels *)
-  | Abbrev_type of typ list * typ         (* Abbreviation *)
-
-(* Value constructors *)
-
-and constr_desc =
-  { cs_res: typ;                       (* Result type *)
-    cs_arg: typ;                       (* Argument type *)
-    cs_mut: mutable_flag;              (* Mutable or not *)
-    cs_tag: constr_tag;                (* Its run-time tag *)
-    cs_kind: constr_kind }             (* How it is represented *)
-
-and mutable_flag =
-  Mutable | Notmutable
-
-and constr_kind =
-    Constr_constant                     (* Constant constructor *)
-  | Constr_regular                      (* Usual constructor *)
-  | Constr_superfluous of int           (* Superfluous constructor
-                                           with its arity *)
-
-(* Labels *)
-
-and label_desc =
-  { lbl_res: typ;                      (* Result type *)
-    lbl_arg: typ;                      (* Argument type *)
-    lbl_mut: mutable_flag;             (* Mutable or not *)
-    lbl_pos: int }                     (* Position in the tuple *)
-;;
-
-let generic = (-1)
-and notgeneric = 0;;
-
-let no_type = { typ_desc = Tproduct []; typ_level = 0 };;
-
-(* Global variables *)
-
-type value_desc =
-  { val_typ: typ;                       (* Type *)
-    val_prim: prim_desc }               (* Is this a primitive? *)
-
-and prim_desc =
-    ValueNotPrim
-  | ValuePrim of int * primitive        (* arity & implementation *)
-;;
+  { mutable gi: Global_ident.qualified_ident;
+    mutable info: 'a option }
+
+let little_name_of_global g = Global_ident.little_name g.gi
+
+
+let no_info() = None
 
+let gi gl = gl.gi
+let info gl =
+  match gl.info with
+  | None -> assert false
+  | Some i -> i
