#! /bin/sh

# ReactiveML
# Louis Mandel
# adapted from Objective Caml

configure_options="$*"
prefix=/usr/local
bindir=''
libdir=''
mandir=''
manext=1
emacsdir=''
target=''
debug=''

ocamlversion_min=3.06

# Parse command-line arguments

while : ; do
  case "$1" in
    "") break;;
    -prefix|--prefix)
        prefix=$2; shift;;
    -bindir|--bindir)
        bindir=$2; shift;;
    -libdir|--libdir)
        libdir=$2; shift;;
    -mandir|--mandir)
        case "$2" in
          */man[1-9ln])
            mandir=`echo $2 | sed -e 's|^\(.*\)/man.$|\1|'`
            manext=`echo $2 | sed -e 's/^.*\(.\)$/\1/'`;;
          *)
            mandir=$2
            manext=1;;
        esac
        shift;;
    -debug|--debug)
        debug='-g -dtypes';
        shift;
        continue;;
    -target|--target)
        target=$2; shift;;
    -with-emacs-dir|--with-emacs-dir)
	emacsdir=$2; shift;;
    -help|--help)
        cat <<EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]
  --prefix PREFIX         install files in PREFIX [$/usr/local]
  --bindir DIR            user executables in DIR [PREFIX/bin]
  --libdir DIR            object code libraries in DIR [PREFIX/lib]
  --mandir DIR            man documentation in DIR [PREFIX/man]
  --target TARGET         must be byte or opt [byte]
  --debug                 add "-g -dtypes" to ocaml flags
  --with-emacs-dir DIR    set emacs dir to DIR
  -with-emacs-dir DIR     (same as above)
  --help                  print this message
EOF
	exit 0;;
    *) echo "Unknown option \"$1\"." 1>&2; exit 2;;
  esac
  shift
done

# Sanity checks

case "$prefix" in
  /*) ;;
   *) echo "The -prefix directory must be absolute." 1>&2; exit 2;;
esac
case "$bindir" in
  /*) ;;
  "") ;;
   *) echo "The -bindir directory must be absolute." 1>&2; exit 2;;
esac
case "$libdir" in
  /*) ;;
  "") ;;
   *) echo "The -libdir directory must be absolute." 1>&2; exit 2;;
esac
case "$mandir" in
  /*) ;;
  "") ;;
   *) echo "The -mandir directory must be absolute." 1>&2; exit 2;;
esac

# Generate the config file

rootdir=`dirname $0`

cd $rootdir/configure-tools
rm -f config
touch config

# Write options

echo "# -*- makefile -*-" >> config
echo "# generated by ./configure $configure_options" >> config
echo "" >> config
cat version >> config
echo "" >> config

# Generate a dummy rzi.ml file
if [ ! -f ../compiler/global/rzi.ml ]; then
  echo "creating compiler/global/rzi.ml"
  echo "let known_modules = [" > rzi.ml
  echo "]" >> rzi.ml
  mv rzi.ml ../compiler/global
fi

# Where to install

echo "# Where to install" >> config
echo "PREFIX=$prefix" >> config
case "$bindir" in
  "") echo 'BINDIR="$(PREFIX)/bin"' >> config
      bindir="$prefix/bin";;
   *) echo 'BINDIR="$bindir"' >> config;;
esac
case "$libdir" in
  "") echo 'LIBDIR="$(PREFIX)/lib/rml"' >> config
      libdir="$prefix/lib/rml";;
   *) echo 'LIBDIR="$libdir"' >> config;;
esac
case "$mandir" in
  "") echo 'MANDIR="$(PREFIX)/man"' >> config
      mandir="$prefix/man";;
   *) echo 'MANDIR="$mandir"' >> config;;
esac
echo "MANEXT=$manext" >> config
echo 'EMACSDIR="$emacsdir"' >> config
echo "" >> config

# Check for install script
set dummy install; cmd_name=$2
echo -n "checking for $cmd_name... "
if sh ./searchpath $cmd_name; then
    echo "$cmd_name"
else
    echo "not found"
    { echo "configure: error: Cannot find $cmd_name." 1>&2; exit 1; }
fi
install=$cmd_name


# Check for Ocaml compilers

echo "# Program used" >> config
echo >> config

# checking for ocaml
set dummy ocaml; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocaml=$compiler

# checking for ocamlc
set dummy ocamlc; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamlc=$compiler

# we extract Ocaml version number and library path
# (borrowed from JC Filliatre)
ocamlversion=`$ocamlc -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $ocamlversion"
bad_version=`expr "$ocamlversion" \< "$ocamlversion_min"`
if test "$bad_version" = "1"; then
    { echo "configure: error: Ocaml >= $ocamlversion_min needed." 1>&2; exit 1; }
fi

ocamllib=`$ocamlc -where`
echo "ocaml library path is $ocamllib"


# checking for ocamlopt
set dummy ocamlopt; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
fi
ocamlopt=$compiler

ocamlbest=byte
if [ -n "$ocamlopt" ]; then
  ocamlbest=opt
fi
if [ -z "$target" ]; then
  target=$ocamlbest
fi

echo "TARGET=$target" >> config
echo "" >> config

# we extract Ocaml version number and library path
# (borrowed from JC Filliatre)
ocamlversion=`$ocamlopt -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocaml version is $ocamlversion"
bad_version=`expr "$ocamlversion" \< "$ocamlversion_min"`
if test "$bad_version" = "1"; then
    { echo "configure: error: Ocaml >= $ocamlversion_min needed." 1>&2; exit 1; }
fi
ocamllib=`$ocamlopt -where`
echo "ocaml library path is $ocamllib"


# checking for ocamldep
set dummy ocamldep; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamldep=$compiler


# checking for ocamllex
set dummy ocamllex; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamllex=$compiler


# checking for ocamlyacc
set dummy ocamlyacc; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamlyacc=$compiler


# checking for ocamlcp
set dummy ocamlcp; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamlcp=$compiler

# checking for ocamlbuild
set dummy ocamlbuild; compiler_name=$2
echo -n "checking for $compiler_name... "
if sh ./searchpath $compiler_name; then
    echo "$compiler_name"
    compiler=$compiler_name
else
    echo "not found"
    { echo "configure: error: Cannot find $compiler_name." 1>&2; exit 1; }
fi
ocamlbuild=$compiler


# Finish generated files

echo "INSTALL=$install" >> config
echo "OCAML=$ocaml" >> config
echo "OCAMLCP=$ocamlcp" >> config
echo "OCAMLC=$ocamlc" >> config
echo "OCAMLOPT=$ocamlopt" >> config
echo "OCAMLDEP=$ocamldep" >> config
echo "OCAMLLEX=$ocamllex" >> config
echo "OCAMLYACC=$ocamlyacc" >> config
echo "OCAMLBUILD=$ocamlbuild" >> config
echo "OCAMLFLAGS=$debug" >> config
echo "OCAMLOPTFLAGS=$debug" >> config
echo "OCAMLDEPFLAGS=-slash" >> config
echo "OCAMLBEST=$ocamlbest" >> config
echo
mv config ..
touch ../config-stamp

# Patch Caml files

cd ../patch
if sh ./patch_all.sh; then
    echo "Patch OK"
else
    { echo "configure: error: Install \"patch\" or send an email to louis.mandel@reactiveML.org" 1>&2; exit 1; }
fi
cd ../configure-tools

# Print a summary

echo
echo "** Configuration summary **"
echo
echo "Directories where ReactiveML will be installed:"
echo "        binaries.................. $bindir"
echo "        standard library.......... $libdir"
echo "        manual pages.............. $mandir (with extension .$manext)"
if test "$EMACSDIR" != ""; then
echo "        emacs files............... $emacsdir"
fi
echo
echo "creating config"
echo
echo "** ReactiveML configuration completed successfully **"
echo

