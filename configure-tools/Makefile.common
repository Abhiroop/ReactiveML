
TRUE_OCAMLC = $(OCAMLC)
RMLC = rmlc.$(TARGET)

# common rules
world: all

opt: $(BIN).opt
$(BIN).opt: $(OBJ_OPT)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(INCLUDES) $(OBJ_OPT) -o $(BIN).opt
	ln -sf $(BIN).opt $(BIN)

byte: $(BIN).byte
$(BIN).byte: $(OBJ)
	$(OCAMLC) $(OCAMLFLAGS) $(INCLUDES) $(OBJ) -o $(BIN).byte
	ln -sf $(BIN).byte $(BIN)

install.opt: opt
	$(INSTALL) -d $(BINDIR)
	$(INSTALL) $(BIN).opt $(BINDIR)/$(BIN).opt

install.byte: byte
	$(INSTALL) -d $(BINDIR)
	$(INSTALL) $(BIN).byte $(BINDIR)/$(BIN)

uninstall.byte:
	rm -f $(BINDIR)/$(BIN)
uninstall.opt:
	rm -f $(BINDIR)/$(BIN).opt

debug: OCAMLFLAGS += -g
debug: byte

bprof: OCAMLFLAGS += -g -p a
bprof: OCAMLC := $(OCAMLCP)
bprof: byte

oprof: OCAMLOPTFLAGS += -p
oprof: opt

# implicit rules
.SUFFIXES : .mli .ml .cmi .cmo .cmx .mll

.ml.cmo:
	$(OCAMLC) $(OCAMLFLAGS) -c $(INCLUDES) $<

.ml.cmi:
	$(OCAMLC) $(OCAMLFLAGS) -c $(INCLUDES) $<

.mli.cmi:
	$(OCAMLC) $(OCAMLFLAGS) -c $(INCLUDES) $<

.ml.cmx:
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -c $(INCLUDES) $<

.mll.ml:
	$(OCAMLLEX) $<

